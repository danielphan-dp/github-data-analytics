- Merge the JSON files then sort them by # of starts.
- Start with a sample of 10 repos (then generalize to 100 then all).
  - Download the repo (git clone), then put the repo to Git ignore
    - For example: /google/guava --> google_guava (create only 1 level of directories)
    - Another: /google/guava_v1_1 --> google_guava_v1_1 (replace the first _ when converting back)
  - Extract the number of lines of Java tests (test_loc) and Java code (total_loc), try Python lib "glob"
    - Test files: have "test" in the path (non-case-sensitive)


- Take a look at Seutil


- Code Refactoring
  - Add more proper interfaces when interacting with downloaded repos.
  - Add some tests.
  - Make classes for modular for maintenance.


- Design and implement logic for parsing out (code, test) pairs
  - Input: Git Repo OR (non_test_methods.json, test_methods.json)
  - Output: (code, test) pairs.
  - Mechanism for detecting scheme that was used (most straightforward: naming + folder structure).


Notes:
  - Make sure to use Python <= 3.11
    - Seems like Python 3.12 is not widely supported yet by external libs. [Got Errors]
  - Current repos for sampling:
    - https://github.com/google/gson (100% Java)



Backlog of important tasks:
  - Take a look at CodeLlama (Meta), Check if someone have used A6000 to train CodeLlama
  - Access the remote machine and figure out some metadata
    - Make sure everything is working. Make sure the code runs on the remote machine
  - Mapping between code and test [IMPORTANT]
    - Name convention: MethodA -> TestMethodA, MethodATest
    - Annotation -> ...
    - Capture the entire signature of the function + all annotation

