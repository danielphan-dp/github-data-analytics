{
  "methodRelations": {
    "com.google.gson.functional.Java17RecordTest$1Allowed.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.getExpectedJson(): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest$14.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.ParameterizedTypesTest$14.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.\u003cinit\u003e(java.lang.Number, java.lang.Number[], java.util.List, java.util.List[], java.util.List, java.util.List[]): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.writeTo(com.google.protobuf.CodedOutputStream): void": [
      "com.google.protobuf.CodedOutputStream.writeInt32(int, int): void",
      "com.google.protobuf.GeneratedMessageV3.writeString(com.google.protobuf.CodedOutputStream, int, java.lang.Object): void",
      "com.google.protobuf.UnknownFieldSet.writeTo(com.google.protobuf.CodedOutputStream): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.\u003cinit\u003e(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.maybeForceBuilderInitialization(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$10.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.stream.JsonWriter.getStrictness(): com.google.gson.Strictness": [],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.TreeSet.add(java.lang.Object): boolean",
      "java.util.TreeSet.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest$ParameterizedBase.\u003cinit\u003e(java.lang.Object): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializingNonZeroDecimalPointValuesAsIntegerFails$30(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A$JsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.CustomDeserializerTest$SubType1.\u003cinit\u003e(): void": [
      "com.google.gson.functional.CustomDeserializerTest$MyBase.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$EmployeeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.TypeHierarchyAdapterTest$EmployeeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TypeHierarchyAdapterTest$Employee"
    ],
    "com.google.gson.internal.JavaVersion.getMajorJavaVersion(java.lang.String): int": [
      "com.google.gson.internal.JavaVersion.extractBeginningInt(java.lang.String): int",
      "com.google.gson.internal.JavaVersion.parseDotted(java.lang.String): int"
    ],
    "com.google.gson.functional.MapTest$9.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$4.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.nextName(): java.lang.String": [
      "com.google.gson.internal.bind.JsonTreeReader.nextName(boolean): java.lang.String"
    ],
    "com.example.GenericClasses$GenericClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing$Inner.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomSerializerTest$1.serialize(com.google.gson.common.TestTypes$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [],
    "com.google.gson.stream.JsonWriterTest.testTwoNames(): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.String": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object"
    ],
    "com.google.gson.internal.bind.TypeAdapters$16.read(com.google.gson.stream.JsonReader): java.math.BigDecimal": [
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.internal.NumberLimits.parseBigDecimal(java.lang.String): java.math.BigDecimal",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String"
    ],
    "com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$ArrayOfObjects.getExpectedJson(): java.lang.String",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$ArrayOfObjects.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.equals(java.lang.Object): boolean": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.hasNIdCt(): boolean",
      "com.google.protobuf.GeneratedMessageV3.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.hasContent(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDataList(): java.util.List",
      "java.util.List.equals(java.lang.Object): boolean",
      "com.google.protobuf.UnknownFieldSet.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getNIdCt(): int"
    ],
    "com.google.gson.internal.bind.TypeAdapters$4.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$4.write(com.google.gson.stream.JsonWriter, java.lang.Boolean): void"
    ],
    "com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(com.google.gson.stream.JsonReader): java.util.Date": [
      "com.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition): java.util.Date",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.text.ParsePosition.\u003cinit\u003e(int): void",
      "java.text.DateFormat.parse(java.lang.String): java.util.Date",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "java.util.List.iterator(): java.util.Iterator",
      "java.util.Iterator.next(): java.lang.Object"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.IterableSubject.isNull(): void"
    ],
    "com.google.gson.JsonArrayAsListTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonPrimitive.equals(java.lang.Object): boolean": [
      "java.lang.Number.doubleValue(): double",
      "java.lang.Number.longValue(): long",
      "com.google.gson.JsonPrimitive.getAsBigInteger(): java.math.BigInteger",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive): boolean",
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "java.math.BigInteger.equals(java.lang.Object): boolean",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "java.lang.Double.isNaN(double): boolean"
    ],
    "com.google.gson.functional.FormattingStyleTest.buildExpected(java.lang.String, java.lang.String, boolean): java.lang.String": [
      "java.lang.String.isEmpty(): boolean",
      "java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence): java.lang.String"
    ],
    "com.google.gson.GsonTest$1DummyFactory.\u003cinit\u003e(com.google.gson.GsonTest, com.google.gson.GsonTest$2DummyAdapter): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.buildPartial(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$1.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.internal.ObjectConstructor.construct(): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialized(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$Square.\u003cinit\u003e(int): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$Circle.\u003cinit\u003e(int): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DateTypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testQuotedNumberWithEscape(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.internal.Primitives.unwrap(java.lang.Class): java.lang.Class": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getNumbers(int): long": [
      "com.google.protobuf.Internal$LongList.getLong(int): long"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictUnnecessaryArraySeparators(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.ReadersWritersTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$28.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$28.read(com.google.gson.stream.JsonReader): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag.getDescriptor(): com.google.protobuf.Descriptors$FileDescriptor": [],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.typeadapters.RuntimeTypeAdapterFactory, com.google.gson.TypeAdapter, java.util.Map, java.util.Map): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, int, int, com.google.gson.internal.bind.DefaultDateTypeAdapter$1): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, int, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.stream.JsonWriter.string(java.lang.String): void": [
      "java.lang.String.charAt(int): char",
      "java.lang.String.length(): int",
      "java.io.Writer.write(java.lang.String, int, int): void",
      "java.io.Writer.write(java.lang.String): void",
      "java.io.Writer.write(int): void"
    ],
    "com.google.gson.functional.ConcurrencyTest$MyObject.\u003cinit\u003e(): void": [
      "com.google.gson.functional.ConcurrencyTest$MyObject.\u003cinit\u003e(java.lang.String, java.lang.String, int): void"
    ],
    "com.google.gson.functional.Java17RecordTest.testStaticFieldDeserialization(): void": [
      "com.google.gson.GsonBuilder.excludeFieldsWithModifiers(int[]): com.google.gson.GsonBuilder",
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testByteDeserializationLossy$0(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithBigInteger.getExpectedJson(): java.lang.String",
      "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithBigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization(): void": [
      "com.google.gson.functional.CollectionTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.PrimitiveIntArraySubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(int[]): com.google.common.truth.PrimitiveIntArraySubject",
      "com.google.gson.functional.CollectionTest.toIntArray(java.util.Collection): int[]",
      "com.google.gson.functional.CollectionTest$2.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.example.Main.testConstructorNoArgs(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.it.ShrinkingIT.lambda$testNoSerializedName_NoArgsConstructor$3(java.lang.Class): void": [
      "java.nio.file.Path.equals(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Class.getMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.MixedStreamTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ToNumberPolicyTest.lambda$testNullsAreNeverExpected$8(): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberPolicy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.annotations.JsonAdapter.nullSafe(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parser(): com.google.protobuf.Parser": [],
    "com.google.gson.JsonStreamParser.next(): com.google.gson.JsonElement": [
      "com.google.gson.JsonStreamParser.hasNext(): boolean",
      "java.util.NoSuchElementException.\u003cinit\u003e(): void",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "com.google.gson.internal.Streams.parse(com.google.gson.stream.JsonReader): com.google.gson.JsonElement"
    ],
    "com.google.gson.common.TestTypes$ClassWithSerializedNameFields.getExpectedJson(): java.lang.String": [],
    "com.google.gson.typeadapters.UtcDateTypeAdapter.padInt(java.lang.StringBuilder, int, int): void": [
      "java.lang.String.length(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.lang.Integer.toString(int): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$Truck.\u003cinit\u003e(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.newSerializer(java.lang.String): com.google.gson.JsonSerializer": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$1.\u003cinit\u003e(com.google.gson.functional.TypeAdapterPrecedenceTest, java.lang.String): void"
    ],
    "com.google.gson.internal.ObjectConstructor.construct(): java.lang.Object": [],
    "com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization(): void": [
      "com.google.gson.functional.ParameterizedTypesTest$18.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.gson.functional.ParameterizedTypesTest$18.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$LongToStringTypeAdapterFactory.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$LongToStringTypeAdapterFactory$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testDeepNestingObjects(): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testHasNextEndOfDocument(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.NumberLimitsTest.testJsonPrimitive(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonPrimitive.getAsBigInteger(): java.math.BigInteger",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.getAsBigDecimal(): java.math.BigDecimal",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.lang.String.repeat(int): java.lang.String",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.reflect.TypeToken.hashCode(): int": [],
    "com.google.gson.stream.JsonWriter.push(int): void": [
      "java.util.Arrays.copyOf(int[], int): int[]"
    ],
    "com.google.gson.functional.PrimitiveTest.testShortSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.lang.Short.toString(short): java.lang.String",
      "java.lang.Short.valueOf(short): java.lang.Short",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.CustomDeserializerTest$DataHolder.getData(): java.lang.String",
      "com.google.gson.functional.CustomDeserializerTest$DataHolderWrapper.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest$DataHolder): void",
      "com.google.gson.functional.CustomDeserializerTest$DataHolder.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.CustomDeserializerTest$DataHolderWrapper.getWrappedData(): com.google.gson.functional.CustomDeserializerTest$DataHolder"
    ],
    "com.google.gson.internal.JavaVersion.isJava9OrLater(): boolean": [],
    "com.google.gson.functional.GsonVersionDiagnosticsTest.testAssertionErrorInDeserializationPrintsVersion(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.functional.GsonVersionDiagnosticsTest.ensureAssertionErrorPrintsGsonVersion(java.lang.AssertionError): void"
    ],
    "com.google.gson.protobuf.functional.ProtosWithAnnotationsTest.testProtoWithAnnotations_deserializeUnrecognizedEnumValue(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String",
      "com.google.common.truth.Truth.assertWithMessage(java.lang.String): com.google.common.truth.StandardSubjectBuilder",
      "com.google.common.truth.StandardSubjectBuilder.fail(): void"
    ],
    "com.google.gson.ToNumberPolicy.$values(): com.google.gson.ToNumberPolicy[]": [],
    "com.google.gson.Gson.atomicLongAdapter(com.google.gson.TypeAdapter): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson$4.\u003cinit\u003e(com.google.gson.TypeAdapter): void",
      "com.google.gson.Gson$4.nullSafe(): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.functional.CollectionTest$16.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest$1.\u003cinit\u003e(com.google.gson.internal.bind.util.ISO8601UtilsTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$29.serialize(com.google.gson.common.TestTypes$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.VersioningTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$ClassWithoutNoArgsConstructor.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.UncategorizedTest.testTrailingWhitespace(): void": [
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.functional.UncategorizedTest$1.\u003cinit\u003e(com.google.gson.functional.UncategorizedTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.functional.UncategorizedTest$1.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Ordered.inOrder(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$000(java.lang.Object, java.lang.reflect.AccessibleObject): void": [
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.checkAccessible(java.lang.Object, java.lang.reflect.AccessibleObject): void"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordSupportedHelper.\u003cinit\u003e(): void": [
      "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.\u003cinit\u003e(com.google.gson.internal.reflect.ReflectionHelper$1): void",
      "java.lang.Class.forName(java.lang.String): java.lang.Class",
      "java.lang.Class.getMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method"
    ],
    "com.google.gson.functional.MapTest.testConcurrentSkipListMap(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.concurrent.ConcurrentSkipListMap.get(java.lang.Object): java.lang.Object",
      "com.google.common.truth.MapSubject.containsKey(java.lang.Object): void",
      "com.google.gson.functional.MapTest$20.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$20.getType(): java.lang.reflect.Type",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.MapSubject.hasSize(int): void"
    ],
    "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.util.ArrayList.get(int): java.lang.Object",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.util.ArrayList.size(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.example.GenericClasses$UsingGenericClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getOuterMessage(): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.protobuf.SingleFieldBuilderV3.getMessage(): com.google.protobuf.AbstractMessage"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testTypeTokenTypeVariable$17(): void": [
      "com.google.gson.reflect.TypeTokenTest.createTypeTokenTypeVariable(): void"
    ],
    "com.example.Main.lambda$testUnreferencedConstructorNoArgs$13(com.google.gson.Gson): java.lang.String": [
      "java.lang.Integer.toString(int): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testPutNullKeyFails(): void": [
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTypeAdapterTest$ExceptionTypeAdapter.serialize(java.util.concurrent.atomic.AtomicLong, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "java.lang.IllegalStateException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest.testDeserializeEmptyProto(): void": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.hasCount(): boolean",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertFalse(boolean): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.hasMsg(): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.stream.JsonWriter.isHtmlSafe(): boolean": [],
    "com.google.gson.common.TestTypes$ClassWithBaseCollectionField.\u003cinit\u003e(java.util.Collection): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.example.ClassWithJsonAdapterAnnotation$Factory$1.write(com.google.gson.stream.JsonWriter, com.example.ClassWithJsonAdapterAnnotation$DummyClass): void"
    ],
    "com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean): void": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testSet$2(java.util.List): void": [
      "java.util.List.set(int, java.lang.Object): java.lang.Object",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.EnumTest$InterchangedToString.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.EnumTest$InterchangedToString.$values(): com.google.gson.functional.EnumTest$InterchangedToString[]",
      "com.google.gson.functional.EnumTest$InterchangedToString.\u003cinit\u003e(java.lang.String, int, java.lang.String): void"
    ],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest$3.readNumber(com.google.gson.stream.JsonReader): java.lang.Byte": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testDelegating_SameFactoryClass_OnClassAndField(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$7.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLongArray(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.util.concurrent.atomic.AtomicLongArray.length(): int",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.concurrent.atomic.AtomicLongArray.get(int): long",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$NumberAsStringAdapter.read(com.google.gson.stream.JsonReader): java.lang.Number": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void",
      "java.lang.reflect.Constructor.newInstance(java.lang.Object[]): java.lang.Object"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteNumbers$18(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TypeAdapterPrecedenceTest$Foo": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$Foo.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerializationAndDeserialization(com.google.gson.Gson, java.lang.Class): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$14.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlTypesSupport$2.deserialize(java.util.Date): java.util.Date": [
      "com.google.gson.internal.sql.SqlTypesSupport$2.deserialize(java.util.Date): java.sql.Timestamp"
    ],
    "com.google.gson.ObjectTypeAdapterTest$RuntimeType.\u003cinit\u003e(com.google.gson.ObjectTypeAdapterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo2.\u003cinit\u003e(java.util.List): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonObjectTest.testEqualsHashCodeIgnoringOrder(): void": [
      "java.util.ArrayList.\u003cinit\u003e(java.util.Collection): void",
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Boolean): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.Ordered.inOrder(): void",
      "com.google.gson.JsonObject.keySet(): java.util.Set",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.FieldAttributesTest$Foo.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.JsonPrimitive.getAsFloat(): float": [
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "java.lang.Number.floatValue(): float",
      "java.lang.Float.parseFloat(java.lang.String): float",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String"
    ],
    "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnumSetCollection.\u003cinit\u003e(): void": [
      "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$SetCollection.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.ExposeFieldsTest$ClassWithExposedFields.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ExposeFieldsTest$ClassWithExposedFields.\u003cinit\u003e(java.lang.Integer, java.lang.Integer): void"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.toArray(): java.lang.Object[]": [
      "java.util.ArrayList.toArray(): java.lang.Object[]"
    ],
    "com.google.gson.functional.Java17RecordTest$10LocalRecord.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testObjectMapSerialization(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonParser.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization(): void": [
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes(): void": [
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.Class): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.Java17RecordTest$1Adapter.toString(): java.lang.String": [],
    "com.google.gson.functional.CustomTypeAdaptersTest$Foo.\u003cinit\u003e(int, long): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$Point.hashCode(): int": [],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.setDateFormat(java.lang.String): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.DefaultTypeAdaptersTest$1.\u003cinit\u003e(com.google.gson.functional.DefaultTypeAdaptersTest): void",
      "java.util.Date.\u003cinit\u003e(long): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$5.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.EnumClass.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getIdBytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.deserializeToDate(com.google.gson.stream.JsonReader): java.util.Date": [
      "com.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition): java.util.Date",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.text.ParsePosition.\u003cinit\u003e(int): void",
      "java.text.DateFormat.parse(java.lang.String): java.util.Date",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "java.util.List.iterator(): java.util.Iterator",
      "java.util.Iterator.next(): java.lang.Object"
    ],
    "com.google.gson.it.ShrinkingIT.lambda$test$0(java.lang.StringBuilder, java.lang.String, java.lang.String): void": [
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.access$300(com.google.gson.typeadapters.RuntimeTypeAdapterFactory): java.util.Map",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.entrySet(): java.util.Set",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.access$000(com.google.gson.typeadapters.RuntimeTypeAdapterFactory): boolean",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.access$100(com.google.gson.typeadapters.RuntimeTypeAdapterFactory): java.lang.String",
      "com.google.gson.JsonObject.has(java.lang.String): boolean",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.TypeAdapter.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.Iterator.hasNext(): boolean",
      "java.lang.Class.getName(): java.lang.String",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest$2.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ArrayTest.testMultidimensionalPrimitiveArraysSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$13(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.\u003cinit\u003e(): void": [
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.maybeForceBuilderInitialization(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.getMsg(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testCapitalizedTrueFailWhenStrict(): void": [
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$PartJsonFieldAnnotationAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$PartJsonFieldAnnotationAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part): void"
    ],
    "com.google.gson.internal.LazilyParsedNumber.doubleValue(): double": [
      "java.lang.Double.parseDouble(java.lang.String): double"
    ],
    "com.google.gson.ParameterizedTypeTest$1.\u003cinit\u003e(com.google.gson.ParameterizedTypeTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.JsonPostDeserializer.postDeserialize(java.lang.Object): void": [],
    "com.google.gson.metrics.BagOfPrimitives.hashCode(): int": [
      "java.lang.String.hashCode(): int"
    ],
    "com.google.gson.stream.JsonReaderPathTest$Factory$2.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.stream.JsonReaderPathTest$Factory.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$10.serialize(com.google.gson.functional.ReflectionAccessFilterTest$OtherClass, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$BillingInstrument.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum.$values(): com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum[]": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$4.shouldSkipField(com.google.gson.FieldAttributes): boolean": [],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteDoublesWhenStrict$14(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$500(): com.google.protobuf.Internal$LongList": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.emptyLongList(): com.google.protobuf.Internal$LongList"
    ],
    "com.google.gson.functional.ObjectTest$ClassWithThrowingConstructor.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByJdkUnsafe$Serializer.serialize(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByJdkUnsafe, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.stream.JsonWriter.isLenient(): boolean": [],
    "com.google.gson.stream.JsonWriterTest.testTopLevelValueTypes(): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.JsonParserTest.testParseDeeplyNestedArrays(): void": [
      "com.google.gson.JsonArray.size(): int",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.gson.JsonArray.isEmpty(): boolean",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.JsonParserTest.repeat(java.lang.String, int): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clear(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.functional.CustomDeserializerTest$4.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$Base": [],
    "com.google.gson.internal.sql.SqlTypesGsonTest.testTimestampSerialization(): void": [
      "java.sql.Timestamp.getTime(): long",
      "com.google.gson.GsonBuilder.setDateFormat(java.lang.String): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.util.Locale.getDefault(): java.util.Locale",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.sql.Timestamp.\u003cinit\u003e(long): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.TimeZone.getDefault(): java.util.TimeZone",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.stream.JsonWriter.setFormattingStyle(com.google.gson.FormattingStyle): void": [
      "com.google.gson.FormattingStyle.getNewline(): java.lang.String",
      "com.google.gson.FormattingStyle.usesSpaceAfterSeparators(): boolean",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "java.lang.String.isEmpty(): boolean",
      "com.google.gson.FormattingStyle.getIndent(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientQuotedNonFiniteDoubles(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.isNaN(double): boolean",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.ConstructorConstructor.newDefaultImplementationConstructor(java.lang.reflect.Type, java.lang.Class): com.google.gson.internal.ObjectConstructor": [
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "com.google.gson.internal.ConstructorConstructor$12.\u003cinit\u003e(): void",
      "com.google.gson.internal.ConstructorConstructor$17.\u003cinit\u003e(): void",
      "com.google.gson.internal.ConstructorConstructor$14.\u003cinit\u003e(): void",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.internal.ConstructorConstructor$10.\u003cinit\u003e(): void",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "com.google.gson.internal.ConstructorConstructor$13.\u003cinit\u003e(): void",
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.internal.ConstructorConstructor$18.\u003cinit\u003e(): void",
      "com.google.gson.internal.ConstructorConstructor$15.\u003cinit\u003e(): void",
      "com.google.gson.internal.ConstructorConstructor$16.\u003cinit\u003e(): void",
      "com.google.gson.internal.ConstructorConstructor$11.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Enum"
    ],
    "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory$DummyTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder.getData(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [],
    "com.google.gson.functional.CustomTypeAdaptersTest$2.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue(): void": [
      "com.google.gson.JsonElement.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.setSerializeNulls(boolean): void",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest$SubTypes.values(): com.google.gson.functional.CustomDeserializerTest$SubTypes[]": [
      "[Lcom.google.gson.functional.CustomDeserializerTest$SubTypes;.clone(): java.lang.Object"
    ],
    "com.google.gson.stream.JsonReader.doPeek(): int": [
      "com.google.gson.stream.JsonReader.peekNumber(): int",
      "com.google.gson.stream.JsonReader.consumeNonExecutePrefix(): void",
      "com.google.gson.stream.JsonReader.isLiteral(char): boolean",
      "com.google.gson.stream.JsonReader.peekKeyword(): int",
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean",
      "com.google.gson.stream.JsonReader.nextNonWhitespace(boolean): int",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.checkLenient(): void",
      "com.google.gson.stream.JsonReader.syntaxError(java.lang.String): java.io.IOException"
    ],
    "com.google.gson.functional.JavaUtilTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$5.\u003cinit\u003e(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$FooTypeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CustomTypeAdaptersTest$FooTypeAdapter.serialize(com.google.gson.functional.CustomTypeAdaptersTest$Foo, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.newUninitializedMessageException(com.google.protobuf.Message): com.google.protobuf.UninitializedMessageException",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.isInitialized(): boolean"
    ],
    "com.google.gson.native_test.ReflectionTest.testDefaultConstructor(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.MapTest$23.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.functional.MapTest$23.createInstance(java.lang.reflect.Type): com.google.gson.functional.MapTest$MyMap"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.internal.bind.TypeAdapters$2.write(com.google.gson.stream.JsonWriter, java.util.BitSet): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "java.util.BitSet.get(int): boolean",
      "java.util.BitSet.length(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$PartJsonFieldAnnotationAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.common.TestTypes$ClassWithObjects.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDotPolicySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$StringWrapper.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextString(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$17.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$17.read(com.google.gson.stream.JsonReader): java.math.BigInteger"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$OtherClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateFormatWithMilliseconds(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date, boolean): java.lang.String",
      "java.util.Date.\u003cinit\u003e(long): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.metrics.SerializationBenchmark.timeObjectSerialization(int): void": [
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1LocalRecordDeserialization.i(): int": [],
    "com.example.Main.lambda$testTypeTokenWriteRead$3(com.google.gson.Gson, java.util.function.Supplier): java.lang.String": [
      "java.lang.Object.toString(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "java.util.function.Supplier.get(): java.lang.Object"
    ],
    "com.google.gson.JsonArrayTest.testEqualsNonEmptyArray(): void": [
      "com.google.common.testing.EqualsTester.addEqualityGroup(java.lang.Object[]): com.google.common.testing.EqualsTester",
      "com.google.gson.JsonArray.equals(java.lang.Object): boolean",
      "com.google.common.testing.EqualsTester.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void",
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.common.testing.EqualsTester.testEquals(): com.google.common.testing.EqualsTester",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.stream.JsonReader.fillBuffer(int): boolean": [
      "java.io.Reader.read(char[], int, int): int",
      "java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int): void"
    ],
    "com.google.gson.metrics.PerformanceTest$ExceptionHolder.\u003cinit\u003e(java.lang.String, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$5.construct(): java.lang.Object": [
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.EnumSet.noneOf(java.lang.Class): java.util.EnumSet"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientComments(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api.$values(): com.google.gson.metrics.ParseBenchmark$Api[]": [],
    "com.google.gson.functional.ObjectTest$1.\u003cinit\u003e(com.google.gson.functional.ObjectTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.\u003cinit\u003e(): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(): void"
    ],
    "com.google.gson.DefaultMapJsonSerializerTest$2.\u003cinit\u003e(com.google.gson.DefaultMapJsonSerializerTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing$3.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumWithObfuscatedTest$Gender.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$28.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.BooleanSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$28.getType(): java.lang.reflect.Type",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getData(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.functional.EscapingTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFieldsOrBuilder.getSimplesOrBuilderList(): java.util.List": [],
    "com.google.gson.functional.NumberLimitsTest.lambda$testJsonPrimitive$4(): void": [
      "com.google.gson.JsonPrimitive.getAsBigInteger(): java.math.BigInteger",
      "java.lang.String.repeat(int): java.lang.String",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.GsonBuilderTest$5.createInstance(java.lang.reflect.Type): com.google.gson.GsonBuilderTest$CustomClass3": [
      "com.google.gson.GsonBuilderTest$CustomClass3.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasWidth(): boolean": [],
    "com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isNull(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipObject(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.functional.ObjectTest.testNullSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement): java.lang.String"
    ],
    "com.google.gson.TypeAdapter$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.functional.FormattingStyleTest.testFormat(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.FormattingStyle.withIndent(java.lang.String): com.google.gson.FormattingStyle",
      "com.google.gson.functional.FormattingStyleTest.createInput(): java.util.Map",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.FormattingStyle.withNewline(java.lang.String): com.google.gson.FormattingStyle",
      "com.google.gson.functional.FormattingStyleTest.buildExpected(java.lang.String, java.lang.String, boolean): java.lang.String",
      "com.google.gson.functional.FormattingStyleTest.toJson(java.lang.Object, com.google.gson.FormattingStyle): java.lang.String",
      "com.google.gson.FormattingStyle.withSpaceAfterSeparators(boolean): com.google.gson.FormattingStyle"
    ],
    "com.google.gson.JsonElement.getAsDouble(): double": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolder.\u003cinit\u003e(java.lang.String, java.lang.String): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFieldsOrBuilder.getNameBytes(): com.google.protobuf.ByteString": [],
    "com.google.gson.stream.JsonWriterTest.testPrettyPrintArray(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.setIndent(java.lang.String): void",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.Gson.toJson(com.google.gson.JsonElement): java.lang.String": [
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement, java.lang.Appendable): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.Gson.newBuilder(): com.google.gson.GsonBuilder": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(com.google.gson.Gson): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonObjectAsLongPrimitive$7(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.\u003cclinit\u003e(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$1.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void": [
      "java.lang.Object.hashCode(): int",
      "java.lang.Object.\u003cinit\u003e(): void",
      "org.junit.Assert.assertFalse(boolean): void",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "org.junit.Assert.assertTrue(boolean): void",
      "org.junit.Assert.assertEquals(long, long): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.build(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$DataOrBuilder.hasWidth(): boolean": [],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.setDateFormat(java.lang.String): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.util.Date.\u003cinit\u003e(long): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.GsonBuilder.setDateFormat(int): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.TypeVariableTest$Foo.\u003cinit\u003e(): void": [
      "com.google.gson.functional.TypeVariableTest$Red.\u003cinit\u003e(): void",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.hasData(): boolean": [],
    "com.google.gson.functional.ReflectionAccessFilterTest$14.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.stream.JsonWriterTest.testNameWithoutValue(): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.bind.TypeAdapters$28.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter.newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken, java.lang.Object): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory.\u003cinit\u003e(java.lang.Object, com.google.gson.reflect.TypeToken, boolean, java.lang.Class): void",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class): com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory": [
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class, java.lang.String): com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.functional.PrintFormattingTest.assertContainsNoWhiteSpace(java.lang.String): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.lang.Character.isWhitespace(char): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.String.toCharArray(): char[]"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictVeryLongNumber(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReaderTest.repeat(char, int): java.lang.String",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void"
    ],
    "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.equals(java.lang.Object): boolean": [
      "com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type): boolean"
    ],
    "com.google.gson.JsonArray.addAll(com.google.gson.JsonArray): void": [
      "java.util.ArrayList.addAll(java.util.Collection): boolean"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.getBag(): com.google.gson.common.TestTypes$BagOfPrimitives",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.CustomTypeAdaptersTest$2.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getIntValue(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteFloats$6(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(float): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.MapTest$24.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldNamingPolicy.\u003cclinit\u003e(): void": [
      "com.google.gson.FieldNamingPolicy$4.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.FieldNamingPolicy$2.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.FieldNamingPolicy$7.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.FieldNamingPolicy$5.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.FieldNamingPolicy$3.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.FieldNamingPolicy$1.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.FieldNamingPolicy$6.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.FieldNamingPolicy.$values(): com.google.gson.FieldNamingPolicy[]"
    ],
    "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "java.util.List.add(java.lang.Object): boolean",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.TreeTypeAdapter.newTypeHierarchyFactory(java.lang.Class, java.lang.Object): com.google.gson.TypeAdapterFactory",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest$15.getType(): java.lang.reflect.Type",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.ParameterizedTypesTest$15.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.\u003cinit\u003e(java.lang.Number, java.lang.Number[], java.util.List, java.util.List[], java.util.List, java.util.List[]): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.metrics.PerformanceTest$ClassWithListOfObjects.\u003cinit\u003e(java.lang.String): void": [
      "java.util.ArrayList.\u003cinit\u003e(int): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$JsonElementAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$JsonElementAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$EmployeeAdapter.serialize(com.google.gson.functional.TypeHierarchyAdapterTest$Employee, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonSerializationContext.serialize(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.internal.Streams$AppendableWriter.append(java.lang.CharSequence, int, int): java.lang.Appendable": [
      "com.google.gson.internal.Streams$AppendableWriter.append(java.lang.CharSequence, int, int): java.io.Writer"
    ],
    "com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(com.google.gson.stream.JsonReader): void": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.internal.ConstructorConstructor$2.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, com.google.gson.InstanceCreator, java.lang.reflect.Type): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$Nested.\u003cinit\u003e(): void": [
      "com.google.gson.common.TestTypes$Nested.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives, com.google.gson.common.TestTypes$BagOfPrimitives): void"
    ],
    "com.google.gson.functional.MapTest$29.\u003cinit\u003e(com.google.gson.functional.MapTest, com.google.gson.JsonElement): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$11.\u003cinit\u003e(com.google.gson.GsonTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testBlockAllPartial(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.ReflectionAccessFilterTest$11.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void",
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.gson.functional.ReflectionAccessFilterTest$OtherClass.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.ReflectionAccessFilterTest$10.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void"
    ],
    "com.google.gson.functional.DelegateTypeAdapterTest$StatsTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.functional.DelegateTypeAdapterTest$StatsTypeAdapterFactory, com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonObjectAsBooleanPrimitive$19(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization(): void": [
      "com.google.gson.common.TestTypes$PrimitiveArray.getExpectedJson(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonReaderPathTest$Factory$1.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.stream.JsonReaderPathTest$Factory.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilderForType(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.FormattingStyleTest.testStyleValidations(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.FormattingStyle.withIndent(java.lang.String): com.google.gson.FormattingStyle",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.FormattingStyle.withNewline(java.lang.String): com.google.gson.FormattingStyle"
    ],
    "com.google.gson.JsonDeserializationContext.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type): java.lang.Object": [],
    "com.google.gson.functional.Java17RecordTest$7LocalRecord.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.createGson(com.google.gson.ExclusionStrategy, boolean): com.google.gson.Gson": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.addDeserializationExclusionStrategy(com.google.gson.ExclusionStrategy): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.addSerializationExclusionStrategy(com.google.gson.ExclusionStrategy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasOuterMessage(): boolean": [],
    "com.google.gson.functional.EnumTest$CustomToString.values(): com.google.gson.functional.EnumTest$CustomToString[]": [
      "[Lcom.google.gson.functional.EnumTest$CustomToString;.clone(): java.lang.Object"
    ],
    "com.google.gson.stream.JsonReaderTest.repeat(char, int): java.lang.String": [
      "java.lang.String.\u003cinit\u003e(char[]): void",
      "java.util.Arrays.fill(char[], char): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getNumbersCount(): int": [
      "com.google.protobuf.Internal$LongList.size(): int"
    ],
    "com.google.gson.reflect.TypeToken.equals(java.lang.Object): boolean": [
      "com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type): boolean"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter$Builder.addSerializedEnumValueExtension(com.google.protobuf.Extension): com.google.gson.protobuf.ProtoTypeAdapter$Builder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "java.util.Set.add(java.lang.Object): boolean"
    ],
    "com.google.gson.functional.UncategorizedTest$OperationType.values(): com.google.gson.functional.UncategorizedTest$OperationType[]": [
      "[Lcom.google.gson.functional.UncategorizedTest$OperationType;.clone(): java.lang.Object"
    ],
    "com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances(): void": [
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.common.TestTypes$SubSerializer.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.common.TestTypes$BaseSerializer.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$ClassWithBaseField.\u003cinit\u003e(com.google.gson.common.TestTypes$Base): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.InstanceCreatorTest$6.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.functional.InstanceCreatorTest$6.createInstance(java.lang.reflect.Type): java.util.SortedSet"
    ],
    "com.google.gson.internal.sql.SqlTimestampTypeAdapter.\u003cinit\u003e(com.google.gson.TypeAdapter, com.google.gson.internal.sql.SqlTimestampTypeAdapter$1): void": [
      "com.google.gson.internal.sql.SqlTimestampTypeAdapter.\u003cinit\u003e(com.google.gson.TypeAdapter): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$KeySet.remove(java.lang.Object): boolean": [
      "com.google.gson.internal.LinkedTreeMap.removeInternalByKey(java.lang.Object): com.google.gson.internal.LinkedTreeMap$Node"
    ],
    "com.example.Main.lambda$testSerializedName$7(com.google.gson.Gson): java.lang.String": [
      "java.lang.Integer.toString(int): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.MapTest.testStringKeyDeserialization(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.gson.functional.MapTest$32.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$32.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.Gson$FutureTypeAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.internal.bind.SerializationDelegatingTypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.isInitialized(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getNameThatTestsCaseFormatList(): java.util.List": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getNameThatTestsCaseFormatList(): com.google.protobuf.ProtocolStringList"
    ],
    "com.google.gson.GsonTest$2DummyAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.GsonTest$2DummyAdapter.read(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.buildPartial(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteDoubles$11(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.TypeAdapterTest$3.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.TypeAdapterTest$3.write(com.google.gson.stream.JsonWriter, java.lang.String): void"
    ],
    "com.google.gson.functional.InstanceCreatorTest$3.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.functional.InstanceCreatorTest$3.createInstance(java.lang.reflect.Type): com.google.gson.common.TestTypes$Base"
    ],
    "com.google.gson.internal.LinkedTreeMap$KeySet$1.next(): java.lang.Object": [
      "com.google.gson.internal.LinkedTreeMap$KeySet$1.nextNode(): com.google.gson.internal.LinkedTreeMap$Node"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.reflect.TypeTokenTest$13.\u003cinit\u003e(): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.example.NoSerializedNameMain.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testFormattingInEnUs(): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.assertFormattingAlwaysEmitsUsLocale(java.util.Locale): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory.\u003cinit\u003e(java.lang.Class, java.lang.String): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$6LocalRecord.hashCode(): int": [],
    "com.google.gson.functional.ObjectTest$6.\u003cinit\u003e(com.google.gson.functional.ObjectTest, com.google.gson.functional.ObjectTest$Parent): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$2.\u003cinit\u003e(com.google.gson.functional.NullObjectAndFieldTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$1.\u003cinit\u003e(com.google.gson.functional.TypeAdapterPrecedenceTest, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlTimestampTypeAdapter$1.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.internal.sql.SqlTimestampTypeAdapter.\u003cinit\u003e(com.google.gson.TypeAdapter, com.google.gson.internal.sql.SqlTimestampTypeAdapter$1): void",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.FormattingStyleTest.testFormatCompact(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.FormattingStyleTest.createInput(): java.util.Map",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.FormattingStyleTest.buildExpected(java.lang.String, java.lang.String, boolean): java.lang.String",
      "com.google.gson.functional.FormattingStyleTest.toJson(java.lang.Object, com.google.gson.FormattingStyle): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$7.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(java.lang.String): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, java.lang.String, com.google.gson.internal.bind.DefaultDateTypeAdapter$1): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createFactory(com.google.gson.internal.bind.DefaultDateTypeAdapter): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest.testSerializeEmptyProto(): void": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilder(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.build(): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.metrics.PerformanceTest$1.\u003cinit\u003e(com.google.gson.metrics.PerformanceTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.readIntoField(com.google.gson.stream.JsonReader, java.lang.Object): void": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.reflect.ReflectionHelper.getAccessibleObjectDescription(java.lang.reflect.AccessibleObject, boolean): java.lang.String",
      "java.lang.reflect.Field.set(java.lang.Object, java.lang.Object): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$000(java.lang.Object, java.lang.reflect.AccessibleObject): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonDeserializer$Deserializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testNumberKeyDeserialization(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$33.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.MapTest$33.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.stream.JsonReaderPathTest$Factory.\u003cclinit\u003e(): void": [
      "com.google.gson.stream.JsonReaderPathTest$Factory$1.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory$2.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.$values(): com.google.gson.stream.JsonReaderPathTest$Factory[]"
    ],
    "com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.serializeSpecialFloatingPointValues(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.TypeAdapterTest$3.write(com.google.gson.stream.JsonWriter, java.lang.String): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.EnumTest$Color.valueOf(java.lang.String): com.google.gson.functional.EnumTest$Color": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilderForType(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder": [
      "java.util.ArrayDeque.addFirst(java.lang.Object): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.internal.bind.TypeAdapters$20.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$20.read(com.google.gson.stream.JsonReader): java.lang.StringBuffer"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedNameValuePair(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getSimplesOrBuilder(int): com.google.gson.protobuf.generated.Bag$SimpleProtoOrBuilder": [
      "java.util.List.get(int): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clear(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderSerializer.serialize(com.google.gson.functional.CustomTypeAdaptersTest$DataHolder, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void"
    ],
    "com.google.gson.ObjectTypeAdapterTest.\u003cinit\u003e(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson"
    ],
    "com.google.gson.functional.InstanceCreatorTest$6.createInstance(java.lang.reflect.Type): java.util.SortedSet": [
      "com.google.gson.functional.InstanceCreatorTest$1SubTreeSet.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addDataBuilder(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.protobuf.RepeatedFieldBuilderV3.addBuilder(int, com.google.protobuf.AbstractMessage): com.google.protobuf.AbstractMessage$Builder"
    ],
    "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.getExpectedJson(): java.lang.String": [
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testUnescapingInvalidCharacters(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$4.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.example.Main.runTests(java.util.function.BiConsumer): void": [
      "com.example.Main.testJsonAdapterAnnotation(java.util.function.BiConsumer): void",
      "com.example.Main.testNamedFields(java.util.function.BiConsumer): void",
      "com.example.Main.testConstructorHasArgs(java.util.function.BiConsumer): void",
      "com.example.Main.testUnreferencedConstructorHasArgs(java.util.function.BiConsumer): void",
      "com.example.Main.testEnumSerializedName(java.util.function.BiConsumer): void",
      "com.example.Main.testUnreferencedConstructorNoArgs(java.util.function.BiConsumer): void",
      "com.example.Main.testSerializedName(java.util.function.BiConsumer): void",
      "com.example.Main.testVersionAnnotations(java.util.function.BiConsumer): void",
      "com.example.Main.testTypeTokenWriteRead(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "com.example.Main.testNoJdkUnsafe(java.util.function.BiConsumer): void",
      "com.example.Main.testExposeAnnotation(java.util.function.BiConsumer): void",
      "com.example.Main.testGenericClasses(java.util.function.BiConsumer): void",
      "com.example.Main.testEnum(java.util.function.BiConsumer): void",
      "com.example.Main.testConstructorNoArgs(java.util.function.BiConsumer): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Adapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.InterceptorTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.Streams.\u003cinit\u003e(): void": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$RegisteredUserAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$RegisteredUserAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.annotations.Expose.serialize(): boolean": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$ClassWithIncorrectJsonAdapter.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.internal.bind.SerializationDelegatingTypeAdapter.getSerializationDelegate(): com.google.gson.TypeAdapter": [],
    "com.google.gson.JsonPrimitive.getAsDouble(): double": [
      "java.lang.Number.doubleValue(): double",
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "java.lang.Double.parseDouble(java.lang.String): double",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String"
    ],
    "com.google.gson.common.TestTypes$ClassWithNoFields.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault(): void": [
      "org.junit.Assert.fail(java.lang.String): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.GsonTest.assertDefaultGson(com.google.gson.Gson): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonTest$CustomClass2.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonTest$CustomClass1.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.serialize(com.google.gson.functional.CustomTypeAdaptersTest$StringHolder, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$3.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InstanceCreatorTest$4.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$12.construct(): java.lang.Object": [
      "java.util.ArrayDeque.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.PrimitiveTest.testBooleanDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.lang.Boolean.booleanValue(): boolean",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.common.truth.BooleanSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonStreamParser.\u003cinit\u003e(java.io.Reader): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void"
    ],
    "com.google.gson.functional.SecurityTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clear(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getOuterMessageFieldBuilder(): com.google.protobuf.SingleFieldBuilderV3": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getOuterMessage(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getParentForChildren(): com.google.protobuf.GeneratedMessageV3$BuilderParent",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.isClean(): boolean",
      "com.google.protobuf.SingleFieldBuilderV3.\u003cinit\u003e(com.google.protobuf.AbstractMessage, com.google.protobuf.AbstractMessage$BuilderParent, boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearLongTimestamp(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.testTypeTokenRaw(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$Person.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictNameValueSeparator(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.lambda$testDelegating_SameFactoryInstance$0(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory$Factory, java.lang.reflect.Type): java.lang.Object": [],
    "com.google.gson.functional.CustomDeserializerTest$SubTypes.$values(): com.google.gson.functional.CustomDeserializerTest$SubTypes[]": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getAnotherFieldBytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.hasMsg(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.toBuilder(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.internal.UnsafeAllocator.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.TypeAdapters$30.\u003cinit\u003e(com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapter): void"
    ],
    "com.google.gson.internal.NumberLimits.checkNumberStringLength(java.lang.String): void": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.NumberFormatException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.String.length(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.String.substring(int, int): java.lang.String"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$7.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ToNumberPolicy.values(): com.google.gson.ToNumberPolicy[]": [
      "[Lcom.google.gson.ToNumberPolicy;.clone(): java.lang.Object"
    ],
    "com.google.gson.functional.Java17RecordTest$11LocalRecord.\u003cinit\u003e(int, int, double): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$9.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.GsonTest$9.serialize(com.google.gson.GsonTest$CustomClass2, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$1.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$5.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest$1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter$CustomAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$PrivateRecord.i(): int": [],
    "com.google.gson.functional.CollectionTest.testSetDeserialization(): void": [
      "com.google.gson.functional.CollectionTest$20.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "java.util.Set.size(): int",
      "com.google.gson.functional.CollectionTest$20.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isAnyOf(java.lang.Object, java.lang.Object, java.lang.Object[]): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.internal.UnsafeAllocatorInstantiationTest.lambda$testInterfaceInstantiation$0(): void": [
      "com.google.gson.internal.UnsafeAllocator.newInstance(java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.MapTest.newMap(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.util.Map": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, java.lang.Appendable): void": [
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter): void",
      "com.google.gson.internal.Streams.writerForAppendable(java.lang.Appendable): java.io.Writer",
      "com.google.gson.Gson.newJsonWriter(java.io.Writer): com.google.gson.stream.JsonWriter",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.push(java.lang.Object): void": [
      "java.util.Arrays.copyOf(int[], int): int[]",
      "java.util.Arrays.copyOf(java.lang.Object[], int): java.lang.Object[]"
    ],
    "com.google.gson.functional.CollectionTest$HasArrayListField.\u003cinit\u003e(): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization(): void": [
      "com.google.gson.functional.VersioningTest.gsonWithVersion(double): com.google.gson.Gson",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void": [
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User2": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User2.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearNameThatTestsCaseFormat(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.onChanged(): void"
    ],
    "com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace(): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.common.TestTypes$Nested.\u003cinit\u003e(): void",
      "com.google.gson.common.TestTypes$PrimitiveArray.\u003cinit\u003e(): void",
      "com.google.gson.functional.PrintFormattingTest.assertContainsNoWhiteSpace(java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$ClassWithTransientFields.\u003cinit\u003e(): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ToNumberPolicyTest.fromStringLenient(java.lang.String): com.google.gson.stream.JsonReader": [
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader"
    ],
    "com.google.gson.functional.FieldNamingTest.testIdentity(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.FieldNamingTest.getGsonWithNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.FieldNamingTest$TestNames.\u003cinit\u003e(): void"
    ],
    "com.google.gson.MixedStreamTest$Car.equals(java.lang.Object): boolean": [
      "java.lang.String.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.interceptors.InterceptorTest.testCollection(): void": [
      "com.google.gson.interceptors.InterceptorTest$2.\u003cinit\u003e(com.google.gson.interceptors.InterceptorTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.gson.interceptors.InterceptorTest$2.getType(): java.lang.reflect.Type",
      "java.util.Collection.iterator(): java.util.Iterator"
    ],
    "com.google.gson.internal.bind.TypeAdapters$32.\u003cinit\u003e(java.lang.Class, java.lang.Class, com.google.gson.TypeAdapter): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearMsg(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getMsg(): java.lang.String"
    ],
    "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder": [
      "com.google.gson.GsonBuilder.setFieldNamingStrategy(com.google.gson.FieldNamingStrategy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.TypeVariableTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Character): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.Throwable): void": [
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.functional.Java17RecordTest$9LocalRecord.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonSerializer(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonSerializer.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.internal.sql.SqlTypesGsonTest.testDefaultSqlDateDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.DefaultTypeAdaptersTest.assertEqualsDate(java.util.Date, int, int, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.internal.LinkedTreeMap.rebalance(com.google.gson.internal.LinkedTreeMap$Node, boolean): void": [
      "java.lang.Math.max(int, int): int",
      "java.lang.AssertionError.\u003cinit\u003e(): void",
      "com.google.gson.internal.LinkedTreeMap.rotateRight(com.google.gson.internal.LinkedTreeMap$Node): void",
      "com.google.gson.internal.LinkedTreeMap.rotateLeft(com.google.gson.internal.LinkedTreeMap$Node): void"
    ],
    "com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.gson.JsonPrimitive.equals(java.lang.Object): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.InstanceCreator.createInstance(java.lang.reflect.Type): java.lang.Object": [],
    "com.google.gson.internal.PreJava9DateFormatProvider.getUSDateFormat(int): java.text.DateFormat": [
      "java.text.SimpleDateFormat.\u003cinit\u003e(java.lang.String, java.util.Locale): void",
      "com.google.gson.internal.PreJava9DateFormatProvider.getDateFormatPattern(int): java.lang.String"
    ],
    "com.google.gson.Gson.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(boolean): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.CollectionTest$9.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilder.setDateFormat(java.lang.String): com.google.gson.GsonBuilder": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory.\u003cinit\u003e(java.lang.Object): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$CustomTypeToken.\u003cinit\u003e(): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapterTest$3.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapterTest$3.read(com.google.gson.stream.JsonReader): java.lang.String"
    ],
    "com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields(): void": [
      "com.google.gson.ExposeAnnotationExclusionStrategyTest.createFieldAttributes(java.lang.String): java.lang.reflect.Field",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.Gson$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.Gson$1.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize2dArray(): void": [
      "com.google.common.truth.ObjectArraySubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "com.google.gson.functional.StreamingTypeAdaptersTest$6.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.functional.CustomDeserializerTest$3.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapterTest$2.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapterTest$2.read(com.google.gson.stream.JsonReader): java.lang.Integer"
    ],
    "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.\u003cinit\u003e(com.google.gson.internal.LinkedTreeMap): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "java.util.ArrayList.add(java.lang.Object): boolean",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "com.google.gson.functional.ArrayTest$1.\u003cinit\u003e(com.google.gson.functional.ArrayTest): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ArrayTest$1.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.FormattingStyleTest.createInput(): java.util.Map": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.stream.JsonWriterTest.testPrettyPrintObject(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.setIndent(java.lang.String): void",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getId(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testStringNullIsNotNull(): void": [
      "com.google.gson.stream.JsonReaderTest.assertUnexpectedStructureError(java.lang.IllegalStateException, java.lang.String, java.lang.String, java.lang.String): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithoutDefaultConstructor.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithStaticField.hashCode(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testTwoNames(): void": [
      "com.google.gson.internal.bind.JsonTreeWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearId(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getId(): java.lang.String"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$EmployeeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.TypeHierarchyAdapterTest$EmployeeAdapter.serialize(com.google.gson.functional.TypeHierarchyAdapterTest$Employee, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.close(int, int, char): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter$1.flush(): void": [
      "java.lang.AssertionError.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$Node.getKey(): java.lang.Object": [],
    "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithUrlField.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientUnnecessaryArraySeparators(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.stream.JsonReaderTest.testUnescapingTruncatedCharacters(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.getBag(): com.google.gson.common.TestTypes$BagOfPrimitives",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.CustomTypeAdaptersTest$4.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getIntValue(): int"
    ],
    "com.google.gson.stream.JsonReaderPathTest.arrayOfArrays(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testDeeplyNestedArrays(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$9LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.EnumTest$InterchangedToString.$values(): com.google.gson.functional.EnumTest$InterchangedToString[]": [],
    "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.String): void"
    ],
    "com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.serializeSpecialFloatingPointValues(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testRuntimeTypeAdapter(): void": [
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$CreditCard.\u003cinit\u003e(java.lang.String, int): void",
      "org.junit.Assert.assertTrue(boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.build(): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.newUninitializedMessageException(com.google.protobuf.Message): com.google.protobuf.UninitializedMessageException",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.isInitialized(): boolean"
    ],
    "com.google.gson.internal.bind.TypeAdapters$34$1.\u003cinit\u003e(com.google.gson.internal.bind.TypeAdapters$34, java.lang.Class): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum.valueOf(java.lang.String): com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.stream.JsonWriterTest.testNonFiniteNumbersWhenLenient(): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.EnumTest$CustomToString.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.stream.JsonReaderTest.assertNotANumber(java.lang.String): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.interceptors.InterceptorTest.testDirectInvocationOfTypeAdapter(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithStaticField.\u003cclinit\u003e(): void": [],
    "com.google.gson.stream.JsonToken.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.CustomTypeAdaptersTest$10.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "java.lang.Byte.valueOf(byte): java.lang.Byte"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField$Factory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField$Factory, com.google.gson.TypeAdapter): void",
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void": [
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$1.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.buildPartial(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat"
    ],
    "com.google.gson.functional.EnumTest.testEnumSet(): void": [
      "com.google.common.truth.IterableSubject.doesNotContain(java.lang.Object): void",
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.Ordered.inOrder(): void",
      "java.util.EnumSet.of(java.lang.Enum, java.lang.Enum): java.util.EnumSet",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.EnumTest$6.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.EnumTest$6.\u003cinit\u003e(com.google.gson.functional.EnumTest): void"
    ],
    "com.google.gson.stream.JsonReader.beginObject(): void": [
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.doPeek(): int",
      "com.google.gson.stream.JsonReader.push(int): void"
    ],
    "com.google.gson.GsonBuilderTest$3.read(com.google.gson.stream.JsonReader): com.google.gson.GsonBuilderTest$CustomClass1": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.ArrayTypeAdapter.\u003cinit\u003e(com.google.gson.Gson, com.google.gson.TypeAdapter, java.lang.Class): void": [
      "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.\u003cinit\u003e(com.google.gson.Gson, com.google.gson.TypeAdapter, java.lang.reflect.Type): void",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.hasYear(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testInvalidDatePattern(): void": [
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(java.lang.String): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base"
    ],
    "com.google.gson.FieldNamingPolicy$5.translateName(java.lang.reflect.Field): java.lang.String": [
      "java.lang.String.toLowerCase(java.util.Locale): java.lang.String",
      "java.lang.reflect.Field.getName(): java.lang.String",
      "com.google.gson.FieldNamingPolicy$5.separateCamelCase(java.lang.String, char): java.lang.String"
    ],
    "com.google.gson.functional.InstanceCreatorTest$4.createInstance(java.lang.reflect.Type): java.util.List": [
      "com.google.gson.functional.InstanceCreatorTest$1SubArrayList.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void"
    ],
    "com.google.gson.JsonPrimitive.getAsShort(): short": [
      "java.lang.Number.shortValue(): short",
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String",
      "java.lang.Short.parseShort(java.lang.String): short"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.hasContent(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.hasCount(): boolean": [],
    "com.google.gson.ToNumberPolicy$2.readNumber(com.google.gson.stream.JsonReader): java.lang.Number": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.newUninitializedMessageException(com.google.protobuf.Message): com.google.protobuf.UninitializedMessageException",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.isInitialized(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.maybeForceBuilderInitialization(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.access$1500(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3"
    ],
    "com.google.gson.GsonTest$1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api$4.newParser(): com.google.gson.metrics.ParseBenchmark$Parser": [
      "com.google.gson.metrics.ParseBenchmark$GsonSkipParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$BaseStringAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$BillingInstrumentWrapper.\u003cinit\u003e(com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$BillingInstrument): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.equals(java.lang.Object): boolean": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.equals(java.lang.Object): boolean",
      "com.google.protobuf.GeneratedMessageV3.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasOuterMessage(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasInnerMessage2(): boolean",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasId(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage1(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getOuterMessage(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasInnerMessage1(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage2(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.protobuf.UnknownFieldSet.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getId(): java.lang.String"
    ],
    "com.example.ClassWithJsonAdapterAnnotation.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson$3.read(com.google.gson.stream.JsonReader): java.lang.Number": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.stream.JsonReader.nextNull(): void"
    ],
    "com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.util.SortedSet.first(): java.lang.Object",
      "com.google.common.truth.ClassSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Class): com.google.common.truth.ClassSubject",
      "com.google.gson.functional.InstanceCreatorTest$7.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.InstanceCreatorTest$7.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.InstanceCreatorTest$6.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.JsonArray.size(): int": [
      "java.util.ArrayList.size(): int"
    ],
    "com.google.gson.internal.bind.TypeAdapters$9.read(com.google.gson.stream.JsonReader): java.util.concurrent.atomic.AtomicBoolean": [
      "java.util.concurrent.atomic.AtomicBoolean.\u003cinit\u003e(boolean): void",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean"
    ],
    "com.google.gson.functional.GsonVersionDiagnosticsTest.ensureAssertionErrorPrintsGsonVersion(java.lang.AssertionError): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.lang.AssertionError.getMessage(): java.lang.String",
      "com.google.common.truth.StringSubject.matches(java.util.regex.Pattern): void",
      "java.lang.String.substring(int, int): java.lang.String",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.String.indexOf(java.lang.String): int"
    ],
    "com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement): java.lang.String"
    ],
    "com.google.gson.functional.NamingPolicyTest$UpperCaseNamingStrategy.translateName(java.lang.reflect.Field): java.lang.String": [
      "java.lang.String.toUpperCase(java.util.Locale): java.lang.String",
      "java.lang.reflect.Field.getName(): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$3.read(com.google.gson.stream.JsonReader): java.lang.Boolean": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.Boolean.parseBoolean(java.lang.String): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$6.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$CreditCard.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$BillingInstrument.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$7.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest$Base.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.UnsafeAllocator$4.newInstance(java.lang.Class): java.lang.Object": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.primitiveDefaults(): java.util.Map"
    ],
    "com.google.gson.GsonTypeAdapterTest$ExceptionTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.util.concurrent.atomic.AtomicLong": [
      "java.lang.IllegalStateException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testBlockAllJavaExtendingJdkClass(): void": [
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.functional.ReflectionAccessFilterTest$ClassExtendingJdkClass.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter$Builder.addSerializedNameExtension(com.google.protobuf.Extension): com.google.gson.protobuf.ProtoTypeAdapter$Builder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "java.util.Set.add(java.lang.Object): boolean"
    ],
    "com.google.gson.internal.bind.DateTypeAdapter.\u003cinit\u003e(): void": [
      "java.text.DateFormat.getDateTimeInstance(int, int, java.util.Locale): java.text.DateFormat",
      "java.util.Locale.equals(java.lang.Object): boolean",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.internal.PreJava9DateFormatProvider.getUSDateTimeFormat(int, int): java.text.DateFormat",
      "java.util.Locale.getDefault(): java.util.Locale",
      "com.google.gson.internal.JavaVersion.isJava9OrLater(): boolean",
      "java.util.List.add(java.lang.Object): boolean",
      "java.text.DateFormat.getDateTimeInstance(int, int): java.text.DateFormat",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrintFormattingTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization(): void": [
      "java.util.Collection.size(): int",
      "com.google.gson.functional.CollectionTest$17.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.IterableSubject.contains(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.functional.CollectionTest$17.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.sql.SqlTypesGsonTest.testDefaultSqlTimeDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.DefaultTypeAdaptersTest.assertEqualsTime(java.util.Date, int, int, int): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest$1.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilderTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.InterceptorFactory$InterceptorAdapter.\u003cinit\u003e(com.google.gson.TypeAdapter, com.google.gson.interceptors.Intercept): void": [
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.Throwable): void",
      "java.lang.Class.getDeclaredConstructor(java.lang.Class[]): java.lang.reflect.Constructor",
      "com.google.gson.interceptors.Intercept.postDeserialize(): java.lang.Class",
      "java.lang.reflect.Constructor.newInstance(java.lang.Object[]): java.lang.Object",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest$Roshambo.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing.lambda$test$5(): void": [
      "com.google.gson.reflect.TypeTokenTest$1Enclosing$6.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseFrom(java.nio.ByteBuffer): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseFrom(com.google.protobuf.CodedInputStream): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ClassWithParameterizedBaseFields.\u003cinit\u003e(com.google.gson.functional.MoreSpecificTypeSerializationTest$ParameterizedBase): void",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ParameterizedSub.\u003cinit\u003e(java.lang.Object, java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter$1.\u003cinit\u003e(com.google.gson.ToNumberStrategy): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$5.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientUnquotedNames(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipDouble(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type): java.lang.reflect.Type": [
      "com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type, java.util.Map): java.lang.reflect.Type",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$3.read(com.google.gson.stream.JsonReader): com.google.gson.functional.TypeAdapterPrecedenceTest$Foo": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$Foo.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String"
    ],
    "com.google.gson.functional.InheritanceTest.testSubClassSerialization(): void": [
      "com.google.gson.functional.InheritanceTest$SubTypeOfNested.getExpectedJson(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.InheritanceTest$SubTypeOfNested.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives, com.google.gson.common.TestTypes$BagOfPrimitives): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory, com.google.gson.TypeAdapter): void"
    ],
    "com.google.gson.functional.GsonVersionDiagnosticsTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.GsonVersionDiagnosticsTest$1.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.GsonVersionDiagnosticsTest$TestType): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonArrayAsByteWrapper$18(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$2.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeToken.toString(): java.lang.String": [
      "com.google.gson.internal.$Gson$Types.typeToString(java.lang.reflect.Type): java.lang.String"
    ],
    "com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization(): void": [
      "com.google.gson.GsonBuilder.disableHtmlEscaping(): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.GsonVersionDiagnosticsTest.lambda$testAssertionErrorInDeserializationPrintsVersion$1(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.DoubleSubject.isNotEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.IntegerSubject.isNull(): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Truck.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.StreamingTypeAdaptersTest.usePersonNameAdapter(): void",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Person.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$6.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrintFormattingTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Document.values(): com.google.gson.metrics.ParseBenchmark$Document[]": [
      "[Lcom.google.gson.metrics.ParseBenchmark$Document;.clone(): java.lang.Object"
    ],
    "com.google.gson.native_test.ReflectionTest$1.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.native_test.ReflectionTest$1.createInstance(java.lang.reflect.Type): com.google.gson.native_test.ReflectionTest$ClassWithoutDefaultConstructor"
    ],
    "com.google.gson.functional.CustomSerializerTest$1.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CustomSerializerTest$1.serialize(com.google.gson.common.TestTypes$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.writeTo(com.google.protobuf.CodedOutputStream): void": [
      "com.google.protobuf.GeneratedMessageV3.writeString(com.google.protobuf.CodedOutputStream, int, java.lang.Object): void",
      "com.google.protobuf.LazyStringList.getRaw(int): java.lang.Object",
      "com.google.protobuf.UnknownFieldSet.writeTo(com.google.protobuf.CodedOutputStream): void",
      "com.google.protobuf.LazyStringList.size(): int"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter.\u003cinit\u003e(com.google.gson.Gson, com.google.gson.ToNumberStrategy, com.google.gson.internal.bind.ObjectTypeAdapter$1): void": [
      "com.google.gson.internal.bind.ObjectTypeAdapter.\u003cinit\u003e(com.google.gson.Gson, com.google.gson.ToNumberStrategy): void"
    ],
    "com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName(): void": [
      "com.google.gson.JsonElement.getAsBoolean(): boolean",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest.testPrivateRecord(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.access$1500(): boolean": [],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$5(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientVeryLongNumber(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.stream.JsonReaderTest.repeat(char, int): java.lang.String",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testSetStrictness(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.getStrictness(): com.google.gson.Strictness"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.JsonNullTest.testDeepCopy(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonNull.deepCopy(): com.google.gson.JsonNull",
      "com.google.common.truth.Subject.isSameInstanceAs(java.lang.Object): void",
      "com.google.gson.JsonNull.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomFieldAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): java.lang.Integer": [
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$1.serialize(com.google.gson.functional.TypeAdapterPrecedenceTest$Foo, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.EnumWithObfuscatedTest$Gender.$values(): com.google.gson.functional.EnumWithObfuscatedTest$Gender[]": [],
    "com.google.gson.functional.DefaultTypeAdaptersTest$MyClassTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Class): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.GsonTest$12.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.GsonTest$12.serialize(com.google.gson.GsonTest$CustomClass2, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.ParameterizedTypeTest.setUp(): void": [
      "com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): java.lang.reflect.ParameterizedType"
    ],
    "com.google.gson.internal.LinkedTreeMap.keySet(): java.util.Set": [
      "com.google.gson.internal.LinkedTreeMap$KeySet.\u003cinit\u003e(com.google.gson.internal.LinkedTreeMap): void"
    ],
    "com.google.gson.functional.EnumTest$MyEnumTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.EnumTest$MyEnumTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.EnumTest$Roshambo"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictNonExecutePrefix(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.GsonBuilder.addSerializationExclusionStrategy(com.google.gson.ExclusionStrategy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.stream.JsonReaderTest.testBomIgnoredAsFirstCharacterOfDocument(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization(): void": [
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "com.google.common.truth.ObjectArraySubject.asList(): com.google.common.truth.IterableSubject"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Deserializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getName(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.JsonObject.equals(java.lang.Object): boolean": [
      "com.google.gson.internal.LinkedTreeMap.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C$JsonAdapterFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.Java17RecordTest$3LocalRecord.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.locationString(): java.lang.String": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$ObjectWithField.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest$SubTypes.valueOf(java.lang.String): com.google.gson.functional.CustomDeserializerTest$SubTypes": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.example.Main$3.\u003cinit\u003e(): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$34$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.isInstance(java.lang.Object): boolean",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.hasNext(): boolean": [
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken"
    ],
    "com.google.gson.FieldNamingPolicy.separateCamelCase(java.lang.String, char): java.lang.String": [
      "java.lang.Character.isUpperCase(char): boolean",
      "java.lang.StringBuilder.length(): int",
      "java.lang.String.charAt(int): char",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.String.length(): int",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.functional.EnumTest$InterchangedToString.valueOf(java.lang.String): com.google.gson.functional.EnumTest$InterchangedToString": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.getDescriptor(): com.google.protobuf.Descriptors$EnumDescriptor": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDescriptor(): com.google.protobuf.Descriptors$Descriptor",
      "com.google.protobuf.Descriptors$Descriptor.getEnumTypes(): java.util.List"
    ],
    "com.google.gson.functional.EnumTest.testEnumClassWithFields(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.example.Main.lambda$testUnreferencedConstructorHasArgs$15(com.google.gson.Gson): java.lang.String": [
      "java.lang.Integer.toString(int): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date, boolean, java.util.TimeZone): java.lang.String": [
      "java.util.TimeZone.getRawOffset(): int",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.util.GregorianCalendar.\u003cinit\u003e(java.util.TimeZone, java.util.Locale): void",
      "java.util.TimeZone.getOffset(long): int",
      "java.util.Calendar.getTimeInMillis(): long",
      "java.lang.String.length(): int",
      "java.util.Calendar.get(int): int",
      "java.lang.Math.abs(int): int",
      "java.lang.StringBuilder.\u003cinit\u003e(int): void",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.util.Calendar.setTime(java.util.Date): void",
      "com.google.gson.internal.bind.util.ISO8601Utils.padInt(java.lang.StringBuilder, int, int): void"
    ],
    "com.google.gson.internal.GsonBuildConfig.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonObjectAsBigInteger$24(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.toString(): java.lang.String": [],
    "com.google.gson.functional.ExposeFieldsTest$ClassWithNoExposedFields.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveCharacterTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$SimpleProto"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.access$300(com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.MixedStreamTest.testReaderDoesNotMutateState(): void": [
      "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.isLenient(): boolean",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.stream.JsonReader.setLenient(boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization(): void": [
      "com.google.gson.common.TestTypes$PrimitiveArray.getExpectedJson(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$PrimitiveArray.\u003cinit\u003e(long[]): void"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testIterationOrder(): void": [
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.values(): java.util.Collection",
      "com.google.gson.internal.LinkedTreeMap.keySet(): java.util.Set",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "com.google.gson.internal.LinkedTreeMapTest.assertIterationOrder(java.lang.Iterable, java.lang.Object[]): void"
    ],
    "com.google.gson.it.ShrinkingIT.test(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.it.ShrinkingIT.runTest(java.lang.String, com.google.gson.it.ShrinkingIT$TestAction): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.String.join(java.lang.CharSequence, java.lang.CharSequence[]): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.RawSerializationTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$ClassWithPrivateField.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.equals(java.lang.Object): boolean": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getNumbersList(): java.util.List",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getName(): java.lang.String",
      "com.google.protobuf.GeneratedMessageV3.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getSimplesList(): java.util.List",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.hasName(): boolean",
      "java.lang.String.equals(java.lang.Object): boolean",
      "java.util.List.equals(java.lang.Object): boolean",
      "com.google.protobuf.UnknownFieldSet.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.functional.Java17RecordTest$6LocalRecord.\u003cclinit\u003e(): void": [
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.common.TestTypes$ClassWithBaseArrayField.\u003cinit\u003e(com.google.gson.common.TestTypes$Base[]): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ExposeAnnotationExclusionStrategyTest.createFieldAttributes(java.lang.String): java.lang.reflect.Field": [
      "java.lang.Class.getField(java.lang.String): java.lang.reflect.Field"
    ],
    "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.build(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$DummyClass.toString(): java.lang.String": [],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest$Foo2.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper.isAnyPlatformType(java.lang.Class): boolean": [
      "java.lang.String.startsWith(java.lang.String): boolean",
      "com.google.gson.internal.ReflectionAccessFilterHelper.isAndroidType(java.lang.String): boolean",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.metrics.PerformanceTest.testDeserializeExposedClasses(): void": [
      "java.lang.System.currentTimeMillis(): long",
      "java.io.PrintStream.printf(java.lang.String, java.lang.Object[]): java.io.PrintStream",
      "com.google.gson.metrics.PerformanceTest.buildJsonForClassWithList(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Long.valueOf(long): java.lang.Long"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientSingleQuotedNames(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.getExpectedJson(com.google.gson.ParameterizedTypeFixtures$MyParameterizedType): java.lang.String": [
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.internal.Primitives.unwrap(java.lang.Class): java.lang.Class",
      "java.lang.Class.isPrimitive(): boolean",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Class.isArray(): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Factory$1.read(com.google.gson.stream.JsonReader): com.example.ClassWithJsonAdapterAnnotation$DummyClass": [
      "com.example.ClassWithJsonAdapterAnnotation$DummyClass.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization.$values(): com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization[]": [],
    "com.google.gson.native_test.Java17RecordReflectionTest$PrivateRecord.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.NumberTypeAdapter$2.\u003cclinit\u003e(): void": [
      "com.google.gson.stream.JsonToken.values(): com.google.gson.stream.JsonToken[]",
      "com.google.gson.stream.JsonToken.ordinal(): int"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1.\u003cinit\u003e(com.google.gson.native_test.Java17RecordReflectionTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$4LocalRecord.b(): java.lang.Integer": [],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.getExpectedJson(): java.lang.String": [
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.getExpectedJson(java.lang.Object): java.lang.String",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$RegisteredUserAdapter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Computer.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$33.\u003cinit\u003e(java.lang.Class, java.lang.Class, com.google.gson.TypeAdapter): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.createTypeTokenTypeVariable(): void": [
      "com.google.gson.reflect.TypeTokenTest$13.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$1.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CustomTypeAdaptersTest$1.serialize(com.google.gson.common.TestTypes$ClassWithCustomTypeConverter, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.MapTest.testMapDeserializationWithLongKeys(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.MapSubject.containsKey(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$13.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.functional.MapTest$13.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.Java17RecordTest$PublicRecord.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserClassAnnotationAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement): void": [
      "java.util.List.isEmpty(): boolean",
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.internal.bind.JsonTreeWriter.getSerializeNulls(): boolean",
      "java.lang.IllegalStateException.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.peek(): com.google.gson.JsonElement",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.TypeAdapterTest.\u003cclinit\u003e(): void": [
      "com.google.gson.TypeAdapterTest$3.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.ReflectionTest$3.\u003cinit\u003e(com.google.gson.native_test.ReflectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$ArrayOfObjects.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void"
    ],
    "com.google.gson.functional.EnumWithObfuscatedTest$Gender.valueOf(java.lang.String): com.google.gson.functional.EnumWithObfuscatedTest$Gender": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getParserForType(): com.google.protobuf.Parser": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseFrom(com.google.protobuf.CodedInputStream): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum.$values(): com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum[]"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Factory$1.write(com.google.gson.stream.JsonWriter, com.example.ClassWithJsonAdapterAnnotation$DummyClass): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.internal.LinkedTreeMap$EntrySet.size(): int": [],
    "com.google.gson.functional.EnumTest$Color.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.EnumTest$Color.\u003cinit\u003e(java.lang.String, int, java.lang.String, int): void",
      "com.google.gson.functional.EnumTest$Color.$values(): com.google.gson.functional.EnumTest$Color[]"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest.createGson(com.google.gson.ExclusionStrategy, boolean): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest$MyExclusionStrategy.\u003cinit\u003e(java.lang.Class): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.GsonBuilderTest.\u003cclinit\u003e(): void": [
      "com.google.gson.GsonBuilderTest$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.JavaVersion.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonParserParameterizedTest.\u003cinit\u003e(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$ClassWithStaticField.\u003cclinit\u003e(): void": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest$1.shouldSkipClass(java.lang.Class): boolean": [],
    "com.google.gson.internal.Excluder.isInnerClass(java.lang.Class): boolean": [
      "com.google.gson.internal.Excluder.isStatic(java.lang.Class): boolean",
      "java.lang.Class.isMemberClass(): boolean"
    ],
    "com.google.gson.internal.sql.SqlTypesGsonTest.testDefaultSqlTimestampDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.DefaultTypeAdaptersTest.assertEqualsDate(java.util.Date, int, int, int): void",
      "com.google.gson.functional.DefaultTypeAdaptersTest.assertEqualsTime(java.util.Date, int, int, int): void"
    ],
    "com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization(): void": [
      "com.google.gson.functional.MapTest$21.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.MapTest$MyParameterizedMap.\u003cinit\u003e(int): void",
      "com.google.gson.functional.MapTest$MyParameterizedMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.functional.MapTest$21.\u003cinit\u003e(com.google.gson.functional.MapTest): void"
    ],
    "com.google.gson.functional.EnumTest$MyEnum.$values(): com.google.gson.functional.EnumTest$MyEnum[]": [],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest$4.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer2.serialize(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User2, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.Java17RecordTest.testThrowingConstructor(): void": [
      "com.google.common.truth.ThrowableSubject.isSameInstanceAs(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "java.lang.Class.getName(): java.lang.String",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testTypeTokenSubSubClass$15(): void": [
      "com.google.gson.reflect.TypeTokenTest$1SubSubTypeToken1.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void"
    ],
    "com.google.gson.JavaSerializationTest.testNumberIsSerializable(): void": [
      "java.lang.Number.doubleValue(): double",
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.JavaSerializationTest.serializedCopy(java.lang.Object): java.lang.Object",
      "com.google.gson.JavaSerializationTest$3.\u003cinit\u003e(com.google.gson.JavaSerializationTest): void",
      "com.google.gson.JavaSerializationTest$3.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.StreamsTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilderForType(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilder(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.internal.ConstructorConstructor$17.construct(): java.lang.Object": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$7.serialize(java.lang.Boolean, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "java.lang.Boolean.booleanValue(): boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.metrics.NonUploadingCaliperRunner.concat(java.lang.String, java.lang.String[]): java.lang.String[]": [
      "java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int): void"
    ],
    "com.google.gson.GsonTest$6.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.GsonTest$6.serialize(com.google.gson.GsonTest$CustomClass2, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$SimpleProto": [],
    "com.google.gson.functional.SerializedNameTest.testMultipleNamesDeserializedCorrectly(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testDeeplyNestedObjects(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest$1.read(com.google.gson.stream.JsonReader): java.lang.Boolean": [
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearCountryCode5F55(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getCountryCode5F55(): java.lang.String",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.functional.Java17RecordTest.lambda$testReflectionFilterBlockInaccessible$7(com.google.gson.Gson): void": [
      "com.google.gson.functional.Java17RecordTest$PrivateRecord.\u003cinit\u003e(int): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest$PrivateRecord.hashCode(): int": [],
    "com.google.gson.typeadapters.UtcDateTypeAdapter.checkOffset(java.lang.String, int, char): boolean": [
      "java.lang.String.charAt(int): char",
      "java.lang.String.length(): int"
    ],
    "com.google.gson.internal.sql.SqlTimeTypeAdapter.read(com.google.gson.stream.JsonReader): java.sql.Time": [
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.text.DateFormat.parse(java.lang.String): java.util.Date",
      "java.sql.Time.\u003cinit\u003e(long): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "java.util.Date.getTime(): long"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.MapTest$17.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.skipValue(): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextString(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest.testDeserializationWithMultipleTypes(): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.graph.GraphAdapterBuilder.addType(java.lang.reflect.Type): com.google.gson.graph.GraphAdapterBuilder",
      "com.google.gson.graph.GraphAdapterBuilder.\u003cinit\u003e(): void",
      "com.google.gson.graph.GraphAdapterBuilder.registerOn(com.google.gson.GsonBuilder): void"
    ],
    "com.google.gson.functional.Java17RecordTest$9LocalRecord.i(): int": [],
    "com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization(): void": [
      "java.lang.String.startsWith(java.lang.String): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.generateNonExecutableJson(): com.google.gson.GsonBuilder",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing.lambda$test$0(): void": [
      "com.google.gson.reflect.TypeTokenTest$1Enclosing$1.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$2.\u003cinit\u003e(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.VersionExclusionStrategyTest$MockClassBoth.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testEmptyArray(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.example.EnumClassWithSerializedName.\u003cclinit\u003e(): void": [
      "com.example.EnumClassWithSerializedName.\u003cinit\u003e(java.lang.String, int): void",
      "com.example.EnumClassWithSerializedName.$values(): com.example.EnumClassWithSerializedName[]"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$7.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.net.URI.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ObjectTest$6.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.functional.ObjectTest$6.createInstance(java.lang.reflect.Type): com.google.gson.functional.ObjectTest$Parent$Child"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.InnerClassExclusionStrategyTest.\u003cinit\u003e(): void": [
      "com.google.gson.InnerClassExclusionStrategyTest$InnerClass.\u003cinit\u003e(com.google.gson.InnerClassExclusionStrategyTest): void",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.InnerClassExclusionStrategyTest$StaticNestedClass.\u003cinit\u003e(): void",
      "com.google.gson.internal.Excluder.disableInnerClassSerialization(): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.ToNumberPolicy$1.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.ToNumberPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.ToNumberPolicy$1): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasId(): boolean": [],
    "com.google.gson.functional.ParameterizedTypesTest$11.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.FieldNamingTest$TestNames.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$MapClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testReaderDoesNotTreatU2028U2029AsNewline(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$FooJsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo.name(): java.lang.String",
      "java.lang.String.toLowerCase(java.util.Locale): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer.serialize(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$2.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$2.write(com.google.gson.stream.JsonWriter, java.util.BitSet): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$13.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonPrimitive.hashCode(): int": [
      "java.lang.Number.doubleValue(): double",
      "java.lang.Number.longValue(): long",
      "java.lang.Object.hashCode(): int",
      "com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive): boolean",
      "java.lang.Double.doubleToLongBits(double): long",
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testJsonPrimitive$3(): void": [
      "com.google.gson.JsonPrimitive.getAsBigDecimal(): java.math.BigDecimal",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.GsonTest$2DummyAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.GsonTest$2DummyAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement": [
      "com.google.gson.JsonParser.parseReader(java.io.Reader): com.google.gson.JsonElement",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.GsonVersionDiagnosticsTest$TestType.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldNamingPolicy$1.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.FieldNamingPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.FieldNamingPolicy$1): void"
    ],
    "com.google.gson.JsonElement.getAsFloat(): float": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.MockExclusionStrategy.shouldSkipField(com.google.gson.FieldAttributes): boolean": [],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming(): void": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$Foo.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newTypeAdapter(java.lang.String): com.google.gson.TypeAdapter",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.isRecord(java.lang.Class): boolean": [
      "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.isRecord(java.lang.Class): boolean"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$Amount.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.createInstance(java.lang.reflect.Type): com.google.gson.functional.CustomTypeAdaptersTest$StringHolder": [
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolder.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.GsonTest$1DummyAdapter.\u003cinit\u003e(com.google.gson.GsonTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ReflectionAccessFilter$1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.GsonBuildConfigTest.testEnsureGsonBuildConfigGetsUpdatedToMavenVersion(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isNotEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion(): void": [
      "com.google.gson.functional.FieldExclusionTest$Outer$Inner.\u003cinit\u003e(com.google.gson.functional.FieldExclusionTest$Outer, java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.GsonBuilder.disableInnerClassSerialization(): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type): java.lang.reflect.Type": [
      "java.lang.reflect.GenericArrayType.getGenericComponentType(): java.lang.reflect.Type",
      "java.lang.reflect.ParameterizedType.getOwnerType(): java.lang.reflect.Type",
      "java.lang.reflect.ParameterizedType.getRawType(): java.lang.reflect.Type",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type): java.lang.reflect.Type",
      "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.\u003cinit\u003e(java.lang.reflect.Type): void",
      "java.lang.reflect.WildcardType.getUpperBounds(): java.lang.reflect.Type[]",
      "java.lang.reflect.WildcardType.getLowerBounds(): java.lang.reflect.Type[]",
      "java.lang.Class.isArray(): boolean",
      "java.lang.Class.getComponentType(): java.lang.Class",
      "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.\u003cinit\u003e(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): void",
      "com.google.gson.internal.$Gson$Types$WildcardTypeImpl.\u003cinit\u003e(java.lang.reflect.Type[], java.lang.reflect.Type[]): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [],
    "com.google.gson.internal.Excluder.clone(): java.lang.Object": [
      "com.google.gson.internal.Excluder.clone(): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.GsonBuilderTest$3.write(com.google.gson.stream.JsonWriter, com.google.gson.GsonBuilderTest$CustomClass1): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.equals(java.lang.Object): boolean": [
      "com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type): boolean"
    ],
    "com.google.gson.ParameterizedTypeTest$2.\u003cinit\u003e(com.google.gson.ParameterizedTypeTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.PerformanceTest$ClassWithListOfObjects.\u003cinit\u003e(): void": [
      "com.google.gson.metrics.PerformanceTest$ClassWithListOfObjects.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.common.TestTypes$CrazyLongTypeAdapter.serialize(java.lang.Long, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "java.lang.Long.longValue(): long",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Long.valueOf(long): java.lang.Long"
    ],
    "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.append(java.lang.StringBuilder, java.util.Collection): java.lang.StringBuilder": [
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.Iterator.hasNext(): boolean",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Collection.iterator(): java.util.Iterator"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictUnquotedStringsWithSkipValue(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.internal.UnsafeAllocatorInstantiationTest.testInterfaceInstantiation(): void": [
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.functional.EnumTest$Roshambo.$values(): com.google.gson.functional.EnumTest$Roshambo[]": [],
    "com.google.gson.FieldNamingPolicy$3.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.FieldNamingPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.FieldNamingPolicy$1): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$12.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.lang.Number.floatValue(): float",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.JsonSerializationContext.serialize(java.lang.Object): com.google.gson.JsonElement": [],
    "com.google.gson.functional.JsonParserTest$1.\u003cinit\u003e(com.google.gson.functional.JsonParserTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization(): void": [
      "com.google.gson.functional.CollectionTest$3.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.PrimitiveIntArraySubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(int[]): com.google.common.truth.PrimitiveIntArraySubject",
      "com.google.gson.functional.CollectionTest$3.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.CollectionTest.toIntArray(java.util.Collection): int[]"
    ],
    "com.google.gson.internal.bind.TypeAdapters$7.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.lang.Number.intValue(): int"
    ],
    "com.google.gson.stream.JsonReaderPathTest.skipObjectEnd(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.FieldNamingPolicy$4.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.FieldNamingPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.FieldNamingPolicy$1): void"
    ],
    "com.google.gson.JsonElement.toString(): java.lang.String": [
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void",
      "com.google.gson.internal.Streams.write(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData.\u003cinit\u003e(java.util.Map, java.util.List): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NamingPolicyTest$1.translateName(java.lang.reflect.Field): java.lang.String": [],
    "com.google.gson.functional.GsonVersionDiagnosticsTest$1.read(com.google.gson.stream.JsonReader): com.google.gson.functional.GsonVersionDiagnosticsTest$TestType": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonReaderPathTest$Factory$1.create(java.lang.String): com.google.gson.stream.JsonReader": [
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.Gson.fromJson(java.io.Reader, java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "com.google.gson.Gson.fromJson(java.io.Reader, com.google.gson.reflect.TypeToken): java.lang.Object"
    ],
    "com.google.gson.reflect.TypeTokenTest$1.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.createAccumulator(): java.lang.Object": [
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.createAccumulator(): java.lang.Object[]"
    ],
    "com.google.gson.internal.TroubleshootingGuide.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.nextNonWhitespace(boolean): int": [
      "java.io.EOFException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipToEndOfLine(): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.skipTo(java.lang.String): boolean",
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean",
      "com.google.gson.stream.JsonReader.locationString(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.checkLenient(): void",
      "com.google.gson.stream.JsonReader.syntaxError(java.lang.String): java.io.IOException"
    ],
    "com.google.gson.functional.TypeVariableTest.testBasicTypeVariables(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.TypeVariableTest$Blue.\u003cinit\u003e(boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.getSerializedSize(): int": [
      "com.google.protobuf.UnknownFieldSet.getSerializedSize(): int",
      "com.google.protobuf.CodedOutputStream.computeInt32Size(int, int): int",
      "com.google.protobuf.GeneratedMessageV3.computeStringSize(int, java.lang.Object): int"
    ],
    "com.google.gson.functional.FieldExclusionTest.setUp(): void": [
      "com.google.gson.functional.FieldExclusionTest$Outer.\u003cinit\u003e(): void"
    ],
    "com.example.ClassWithAdapter.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest.testDeserializationDirectSelfReference(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.graph.GraphAdapterBuilder.addType(java.lang.reflect.Type): com.google.gson.graph.GraphAdapterBuilder",
      "org.junit.Assert.assertSame(java.lang.Object, java.lang.Object): void",
      "com.google.gson.graph.GraphAdapterBuilder.\u003cinit\u003e(): void",
      "com.google.gson.graph.GraphAdapterBuilder.registerOn(com.google.gson.GsonBuilder): void"
    ],
    "com.google.gson.functional.EnumWithObfuscatedTest.testEnumClassWithObfuscated(): void": [
      "java.lang.Class.getEnumConstants(): java.lang.Object[]",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.EnumWithObfuscatedTest$Gender.name(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Class.getField(java.lang.String): java.lang.reflect.Field"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.\u003cinit\u003e(java.lang.Class, java.lang.String, boolean): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$StringHolder.\u003cinit\u003e(java.lang.String): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.common.base.Splitter.on(char): com.google.common.base.Splitter",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.common.base.Splitter.splitToList(java.lang.CharSequence): java.util.List"
    ],
    "com.google.gson.functional.ArrayTest.testArrayOfNullSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializingBigIntegerAsInteger$32(java.lang.String): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.stream.JsonWriterTest.testValueWithoutName(): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Factory.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.InstanceCreator.createInstance(java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.graph.GraphAdapterBuilder$Graph.access$702(com.google.gson.graph.GraphAdapterBuilder$Graph, com.google.gson.graph.GraphAdapterBuilder$Element): com.google.gson.graph.GraphAdapterBuilder$Element",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.graph.GraphAdapterBuilder$Element.access$502(com.google.gson.graph.GraphAdapterBuilder$Element, java.lang.Object): java.lang.Object",
      "com.google.gson.graph.GraphAdapterBuilder$Graph.access$700(com.google.gson.graph.GraphAdapterBuilder$Graph): com.google.gson.graph.GraphAdapterBuilder$Element",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.ThreadLocal.get(): java.lang.Object",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Graph.access$300(com.google.gson.graph.GraphAdapterBuilder$Graph): java.util.Queue": [],
    "com.google.gson.stream.JsonReaderTest.testLenientSingleQuotedStrings(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$6(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.appendObjectsToBuilder(java.lang.StringBuilder, java.lang.Iterable): void": [
      "java.lang.Iterable.iterator(): java.util.Iterator",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.Iterator.hasNext(): boolean",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.toString(java.lang.Number): java.lang.String",
      "java.util.Iterator.next(): java.lang.Object"
    ],
    "com.google.gson.internal.Primitives.wrap(java.lang.Class): java.lang.Class": [],
    "com.google.gson.metrics.ParseBenchmark$Feed.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean": [
      "com.google.gson.annotations.Expose.deserialize(): boolean",
      "java.lang.reflect.Field.isSynthetic(): boolean",
      "com.google.gson.ExclusionStrategy.shouldSkipField(com.google.gson.FieldAttributes): boolean",
      "com.google.gson.internal.Excluder.isInnerClass(java.lang.Class): boolean",
      "com.google.gson.annotations.Expose.serialize(): boolean",
      "com.google.gson.internal.Excluder.isAnonymousOrNonStaticLocal(java.lang.Class): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "java.lang.reflect.Field.getModifiers(): int",
      "java.lang.reflect.Field.getType(): java.lang.Class",
      "java.util.List.isEmpty(): boolean",
      "com.google.gson.internal.Excluder.isValidVersion(com.google.gson.annotations.Since, com.google.gson.annotations.Until): boolean",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.List.iterator(): java.util.Iterator",
      "com.google.gson.FieldAttributes.\u003cinit\u003e(java.lang.reflect.Field): void",
      "java.lang.reflect.Field.getAnnotation(java.lang.Class): java.lang.annotation.Annotation"
    ],
    "com.google.gson.internal.Excluder.isValidUntil(com.google.gson.annotations.Until): boolean": [
      "com.google.gson.annotations.Until.value(): double"
    ],
    "com.google.gson.functional.Java17RecordTest$PublicRecord.i(): int": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterWrappedInNullSafeAsRequested(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization(): void": [
      "com.google.gson.functional.EnumTest$ClassWithEnumFields.getExpectedJson(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.EnumTest$ClassWithEnumFields.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.endObject(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.popStack(): java.lang.Object",
      "com.google.gson.internal.bind.JsonTreeReader.expect(com.google.gson.stream.JsonToken): void"
    ],
    "com.google.gson.DefaultMapJsonSerializerTest.\u003cinit\u003e(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$SubSerializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.common.TestTypes$SubSerializer.serialize(com.google.gson.common.TestTypes$Sub, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.stream.JsonWriterTest.testDoubles(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.InheritanceTest$SubTypeOfNested.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives, com.google.gson.common.TestTypes$BagOfPrimitives): void": [
      "com.google.gson.common.TestTypes$Nested.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives, com.google.gson.common.TestTypes$BagOfPrimitives): void"
    ],
    "com.google.gson.stream.JsonReaderPathTest.skipArrayEnd(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.functional.NamingPolicyTest$UpperCaseNamingStrategy.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$BagOfPrimitiveWrappers.\u003cinit\u003e(java.lang.Long, java.lang.Integer, java.lang.Boolean): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.common.TestTypes$BagOfPrimitiveWrappers.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonObjectTest.testEqualsOnEmptyObject(): void": [
      "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.JsonArray.deepCopy(): com.google.gson.JsonArray": [
      "com.google.gson.JsonElement.deepCopy(): com.google.gson.JsonElement",
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "java.util.ArrayList.isEmpty(): boolean",
      "java.util.ArrayList.size(): int",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.ArrayList.iterator(): java.util.Iterator",
      "com.google.gson.JsonArray.\u003cinit\u003e(int): void"
    ],
    "com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getSimplesList(): java.util.List": [],
    "com.example.UnusedClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.CollectionsDeserializationBenchmark.timeCollectionsStreaming(int): void": [
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.gson.metrics.BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.io.IOException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setOuterMessage(com.google.gson.protobuf.generated.Bag$OuterMessage$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.build(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.protobuf.SingleFieldBuilderV3.setMessage(com.google.protobuf.AbstractMessage): com.google.protobuf.SingleFieldBuilderV3"
    ],
    "com.google.gson.metrics.PerformanceTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.MixedStreamTest$3.\u003cinit\u003e(com.google.gson.MixedStreamTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson$4.write(com.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicLong): void": [
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "java.util.concurrent.atomic.AtomicLong.get(): long"
    ],
    "com.google.gson.GsonBuilderTest$2.\u003cinit\u003e(com.google.gson.GsonBuilderTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NamingPolicyTest$ClassWithDuplicateFields.\u003cinit\u003e(java.lang.Integer, java.lang.Double): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testNonStrictModeParsesUnescapedControlCharacter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.internal.PreJava9DateFormatProvider.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1RecordWithExpose.\u003cinit\u003e(int, int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlTimeTypeAdapter$1.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.internal.sql.SqlTimeTypeAdapter.\u003cinit\u003e(com.google.gson.internal.sql.SqlTimeTypeAdapter$1): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getSerializedSize(): int": [
      "com.google.protobuf.UnknownFieldSet.getSerializedSize(): int",
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getNumbersList(): java.util.List",
      "com.google.protobuf.Internal$LongList.size(): int",
      "com.google.protobuf.Internal$LongList.getLong(int): long",
      "com.google.protobuf.CodedOutputStream.computeMessageSize(int, com.google.protobuf.MessageLite): int",
      "com.google.protobuf.GeneratedMessageV3.computeStringSize(int, java.lang.Object): int",
      "java.util.List.size(): int",
      "com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(long): int"
    ],
    "com.google.gson.internal.JavaVersion.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.JavaVersion.determineMajorJavaVersion(): int"
    ],
    "com.google.gson.functional.Java17RecordTest$PublicRecord.toString(): java.lang.String": [],
    "com.google.gson.functional.StreamingTypeAdaptersTest$7.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.StreamingTypeAdaptersTest$7.read(com.google.gson.stream.JsonReader): com.google.gson.functional.StreamingTypeAdaptersTest$Person"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearData(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.protobuf.RepeatedFieldBuilderV3.clear(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1Adapter.serialize(java.lang.String, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$MyClassTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Class": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.lang.Class.forName(java.lang.String): java.lang.Class",
      "java.io.IOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testStrings(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextString(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType(): void": [
      "com.google.gson.functional.InstanceCreatorTest$1.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.Gson$4.read(com.google.gson.stream.JsonReader): java.util.concurrent.atomic.AtomicLong": [
      "java.util.concurrent.atomic.AtomicLong.\u003cinit\u003e(long): void",
      "java.lang.Number.longValue(): long",
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasHeight(): boolean": [],
    "com.example.ClassWithAdapter$Adapter.write(com.google.gson.stream.JsonWriter, com.example.ClassWithAdapter): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.hasCount(): boolean": [],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter.toString(): java.lang.String": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeInnerMessage2(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.SingleFieldBuilderV3.mergeFrom(com.google.protobuf.AbstractMessage): com.google.protobuf.SingleFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilder(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.TypeAdapter.nullSafe(): com.google.gson.TypeAdapter": [
      "com.google.gson.TypeAdapter$1.\u003cinit\u003e(com.google.gson.TypeAdapter): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType$1.\u003cinit\u003e(java.lang.Class): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.\u003cinit\u003e(java.lang.Class): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$28.read(com.google.gson.stream.JsonReader): com.google.gson.JsonElement": [
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "java.util.Deque.removeLast(): java.lang.Object",
      "com.google.gson.internal.bind.TypeAdapters$28.tryBeginNesting(com.google.gson.stream.JsonReader, com.google.gson.stream.JsonToken): com.google.gson.JsonElement",
      "java.util.Deque.addLast(java.lang.Object): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.TypeAdapters$28.readTerminal(com.google.gson.stream.JsonReader, com.google.gson.stream.JsonToken): com.google.gson.JsonElement",
      "java.util.ArrayDeque.\u003cinit\u003e(): void",
      "java.util.Deque.isEmpty(): boolean",
      "com.google.gson.internal.bind.JsonTreeReader.nextJsonElement(): com.google.gson.JsonElement",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addData(int, com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.addMessage(int, com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.ensureDataIsMutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void",
      "java.util.List.add(int, java.lang.Object): void"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testJavaSerialization(): void": [
      "java.io.ObjectInputStream.\u003cinit\u003e(java.io.InputStream): void",
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "java.io.ObjectOutputStream.close(): void",
      "java.io.ObjectOutputStream.\u003cinit\u003e(java.io.OutputStream): void",
      "java.io.ObjectInputStream.readObject(): java.lang.Object",
      "java.io.ByteArrayOutputStream.toByteArray(): byte[]",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.io.ByteArrayOutputStream.\u003cinit\u003e(): void",
      "java.io.ByteArrayInputStream.\u003cinit\u003e(byte[]): void",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "java.io.ObjectOutputStream.writeObject(java.lang.Object): void",
      "java.util.Collections.singletonMap(java.lang.Object, java.lang.Object): java.util.Map",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.stream.JsonWriter.setIndent(java.lang.String): void": [
      "java.lang.String.isEmpty(): boolean",
      "com.google.gson.FormattingStyle.withIndent(java.lang.String): com.google.gson.FormattingStyle",
      "com.google.gson.stream.JsonWriter.setFormattingStyle(com.google.gson.FormattingStyle): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest$5.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomDeserializerTest$5.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$Base"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$User.\u003cinit\u003e(java.lang.String, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest.testDoubleSubtype(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type): java.lang.reflect.WildcardType"
    ],
    "com.google.gson.stream.JsonReaderTest.testEscapedNewlineNotAllowedInStrictMode(): void": [
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader$1.close(): void": [
      "java.lang.AssertionError.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter": [
      "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter.\u003cinit\u003e(int): void",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clear(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest.testSerializeRepeatedFields(): void": [
      "java.lang.String.contains(java.lang.CharSequence): boolean",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setCount(int): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addSimples(com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setMsg(java.lang.String): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilder(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addNumbers(long): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.build(): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder",
      "org.junit.Assert.assertTrue(boolean): void"
    ],
    "com.google.gson.internal.UnsafeAllocator$1.newInstance(java.lang.Class): java.lang.Object": [
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "com.google.gson.internal.UnsafeAllocator.access$000(java.lang.Class): void"
    ],
    "com.google.gson.JsonObjectAsMapTest.testPutAll(): void": [
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "java.util.Collections.singletonMap(java.lang.Object, java.lang.Object): java.util.Map",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.Map.putAll(java.util.Map): void",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap.get(java.lang.Object): java.lang.Object": [
      "com.google.gson.internal.LinkedTreeMap.findByObject(java.lang.Object): com.google.gson.internal.LinkedTreeMap$Node"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Computer2.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.access$1700(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.DefaultInetAddressTypeAdapterTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson$3.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.lang.Object.toString(): java.lang.String",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.MapTest.testSerializeMaps(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.LinkedHashMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clear(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clear(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.metrics.PerformanceTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testByteSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "java.lang.Byte.toString(byte): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.LinkedTreeMap.replaceInParent(com.google.gson.internal.LinkedTreeMap$Node, com.google.gson.internal.LinkedTreeMap$Node): void": [
      "java.lang.AssertionError.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.InterceptorTest.setUp(): void": [
      "com.google.gson.GsonBuilder.enableComplexMapKeySerialization(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "com.google.gson.interceptors.InterceptorFactory.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.JsonReaderInternalAccess.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest.arrayOf(java.lang.Object[]): java.lang.Object[]",
      "com.google.gson.functional.ParameterizedTypesTest$16.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.functional.ParameterizedTypesTest$16.getType(): java.lang.reflect.Type",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.\u003cinit\u003e(java.lang.Number, java.lang.Number[], java.util.List, java.util.List[], java.util.List, java.util.List[]): void"
    ],
    "com.google.gson.it.ShrinkingIT.lambda$testNoSerializedName_NoArgsConstructor$2(java.lang.reflect.Method): void": [
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object"
    ],
    "com.google.gson.functional.Java17RecordTest$13LocalRecord.hashCode(): int": [],
    "com.google.gson.functional.Java17RecordTest$1LocalRecord.i(): int": [],
    "com.google.gson.internal.bind.JsonElementReaderTest.testEmptyArray(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.functional.UncategorizedTest$BaseTypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder": [
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory",
      "java.util.List.add(java.lang.Object): boolean",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.GsonBuilder.isTypeObjectOrJsonElement(java.lang.reflect.Type): boolean",
      "com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean): void",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.internal.bind.TreeTypeAdapter.newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken, java.lang.Object): com.google.gson.TypeAdapterFactory",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.functional.CollectionTest$13.getType(): java.lang.reflect.Type",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.CollectionTest$13.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.maybeForceBuilderInitialization(): void": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.access$1100(): boolean"
    ],
    "com.google.gson.ObjectTypeAdapterTest.testSerializeObject(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$1.\u003cinit\u003e(): void": [
      "com.google.protobuf.AbstractParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$Roshambo.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.EnumTest$Roshambo$1.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.functional.EnumTest$Roshambo$2.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.functional.EnumTest$Roshambo.$values(): com.google.gson.functional.EnumTest$Roshambo[]",
      "com.google.gson.functional.EnumTest$Roshambo$3.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.EnumTest$InterchangedToString.values(): com.google.gson.functional.EnumTest$InterchangedToString[]": [
      "[Lcom.google.gson.functional.EnumTest$InterchangedToString;.clone(): java.lang.Object"
    ],
    "com.google.gson.it.ShrinkingIT.runTest(java.lang.String, com.google.gson.it.ShrinkingIT$TestAction): void": [
      "com.google.gson.it.ShrinkingIT$TestAction.run(java.lang.Class): void",
      "java.net.URLClassLoader.loadClass(java.lang.String): java.lang.Class",
      "java.net.URLClassLoader.close(): void",
      "java.net.URLClassLoader.\u003cinit\u003e(java.net.URL[], java.lang.ClassLoader): void",
      "java.lang.Throwable.addSuppressed(java.lang.Throwable): void",
      "java.nio.file.Path.toUri(): java.net.URI",
      "java.net.URI.toURL(): java.net.URL"
    ],
    "com.google.gson.functional.MapTest$12.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.stream.JsonReaderPathTest.skipObjectValues(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$29.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomFieldAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Integer): void": [
      "java.lang.Integer.intValue(): int",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.RawSerializationTest$1.\u003cinit\u003e(com.google.gson.functional.RawSerializationTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolder.\u003cinit\u003e(java.lang.String, java.lang.String): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "java.util.Set.add(java.lang.Object): boolean",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "java.util.HashSet.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.Excluder.isAnonymousOrNonStaticLocal(java.lang.Class): boolean": [
      "com.google.gson.internal.Excluder.isStatic(java.lang.Class): boolean",
      "java.lang.Class.isAnonymousClass(): boolean",
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "java.lang.Class.isLocalClass(): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.internal.PreJava9DateFormatProvider.getTimePartOfDateTimePattern(int): java.lang.String": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.bind.ObjectTypeAdapter.newFactory(com.google.gson.ToNumberStrategy): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$8.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.BooleanSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addSimples(int, com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.addMessage(int, com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureSimplesIsMutable(): void",
      "java.util.List.add(int, java.lang.Object): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.serializeSpecialFloatingPointValues(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField$Factory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest.testRecursiveTypeVariablesResolve12(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject"
    ],
    "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicInteger(): void": [
      "java.util.concurrent.atomic.AtomicInteger.get(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.NumberTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.NumberTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1LocalRecordDeserialization.equals(java.lang.Object): boolean": [],
    "com.google.gson.extras.examples.rawcollections.RawCollectionsExample.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonObjectAsBigDecimal$22(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage1OrBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$Manager.\u003cinit\u003e(): void": [
      "com.google.gson.functional.TypeHierarchyAdapterTest$Employee.\u003cinit\u003e(): void"
    ],
    "com.google.gson.LongSerializationPolicy$1.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.LongSerializationPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.LongSerializationPolicy$1): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$16.write(com.google.gson.stream.JsonWriter, java.math.BigDecimal): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.TypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$MyEnum.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.EnumTest$MyEnum.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.functional.EnumTest$MyEnum.$values(): com.google.gson.functional.EnumTest$MyEnum[]"
    ],
    "com.google.gson.functional.ArrayTest.testSingleStringArraySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonWriterTest.testNonFiniteFloats(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.hasId(): boolean": [],
    "com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType(): void": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testPutOverrides(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.LinkedTreeMap.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.StringSubject.isNull(): void",
      "com.google.common.truth.MapSubject.hasSize(int): void"
    ],
    "com.google.gson.interceptors.InterceptorTest.testExceptionsPropagated(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilderForType(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.matches(java.lang.String): void",
      "java.util.Date.\u003cinit\u003e(long): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CustomDeserializerTest$3.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$Base": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$3.shouldSkipField(com.google.gson.FieldAttributes): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.functional.StreamingTypeAdaptersTest$3.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Adapter.read(com.google.gson.stream.JsonReader): com.example.ClassWithJsonAdapterAnnotation$DummyClass": [
      "com.example.ClassWithJsonAdapterAnnotation$DummyClass.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.functional.MapTest$Point.\u003cinit\u003e(int, int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory$Factory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ConcurrencyTest$1.run(): void": [
      "java.util.concurrent.atomic.AtomicBoolean.set(boolean): void",
      "com.google.gson.functional.ConcurrencyTest$MyObject.\u003cinit\u003e(): void",
      "java.util.concurrent.CountDownLatch.countDown(): void",
      "java.util.concurrent.CountDownLatch.await(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest$2.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilderTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Enum): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.example.ClassWithAdapter$Adapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.example.ClassWithAdapter$Adapter.write(com.google.gson.stream.JsonWriter, com.example.ClassWithAdapter): void"
    ],
    "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, com.google.gson.Gson, com.google.gson.reflect.TypeToken, com.google.gson.annotations.JsonAdapter, boolean): com.google.gson.TypeAdapter": [
      "com.google.gson.annotations.JsonAdapter.nullSafe(): boolean",
      "com.google.gson.annotations.JsonAdapter.value(): java.lang.Class",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.createAdapter(com.google.gson.internal.ConstructorConstructor, java.lang.Class): java.lang.Object",
      "com.google.gson.reflect.TypeToken.toString(): java.lang.String",
      "com.google.gson.internal.bind.TreeTypeAdapter.\u003cinit\u003e(com.google.gson.JsonSerializer, com.google.gson.JsonDeserializer, com.google.gson.Gson, com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapterFactory, boolean): void",
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.putFactoryAndGetCurrent(java.lang.Class, com.google.gson.TypeAdapterFactory): com.google.gson.TypeAdapterFactory",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.TypeAdapter.nullSafe(): com.google.gson.TypeAdapter",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.TypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.common.TestTypes$BaseSerializer.\u003cclinit\u003e(): void": [
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.\u003cinit\u003e(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.emptyLongList(): com.google.protobuf.Internal$LongList"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker$1.\u003cinit\u003e(java.lang.reflect.Method): void": [
      "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker.\u003cinit\u003e(com.google.gson.internal.ReflectionAccessFilterHelper$1): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$2.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearInnerMessage2(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.protobuf.SingleFieldBuilderV3.clear(): com.google.protobuf.SingleFieldBuilderV3"
    ],
    "com.google.gson.functional.MapTest$MapClass.addBase(java.lang.String, com.google.gson.common.TestTypes$Base): void": [
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.internal.bind.TypeAdapters$9.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$9.read(com.google.gson.stream.JsonReader): java.util.concurrent.atomic.AtomicBoolean"
    ],
    "com.google.gson.ToNumberPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.ToNumberPolicy$1): void": [
      "com.google.gson.ToNumberPolicy.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonPrimitive.isString(): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.JsonElement.getAsJsonPrimitive(): com.google.gson.JsonPrimitive",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "com.google.gson.LongSerializationPolicy.serialize(java.lang.Long): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsLong(): long",
      "com.google.gson.JsonElement.isJsonPrimitive(): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getNumbers(int): long": [
      "com.google.protobuf.Internal$LongList.getLong(int): long"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gadget.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithStaticField.toString(): java.lang.String": [],
    "com.google.gson.functional.FormattingStyleTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testMapSubclassDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.MapTest$MyMap.get(java.lang.Object): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$23.\u003cinit\u003e(com.google.gson.functional.MapTest): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setInnerMessage2(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.protobuf.SingleFieldBuilderV3.setMessage(com.google.protobuf.AbstractMessage): com.google.protobuf.SingleFieldBuilderV3"
    ],
    "com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.functional.Java17RecordTest$2LocalRecord.hashCode(): int": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$JsonElementAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.JsonElement): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.LinkedTreeMap$Node.getValue(): java.lang.Object": [],
    "com.google.gson.stream.JsonWriter.writeDeferredName(): void": [
      "com.google.gson.stream.JsonWriter.string(java.lang.String): void",
      "com.google.gson.stream.JsonWriter.beforeName(): void"
    ],
    "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.getValue(): int": [],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteDoubles$13(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.PrimitiveTest.testIntSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "java.lang.Integer.toString(int): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.internal.bind.util.ISO8601Utils.padInt(java.lang.StringBuilder, int, int): void": [
      "java.lang.String.length(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.lang.Integer.toString(int): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByInstanceCreator$Serializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByInstanceCreator$Serializer.serialize(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByInstanceCreator, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.LinkedTreeMap.clear(): void": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo2PartTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo2PartTypeAdapterFactory): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void"
    ],
    "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(java.util.Comparator, boolean): void": [
      "com.google.gson.internal.LinkedTreeMap$Node.\u003cinit\u003e(boolean): void",
      "java.util.AbstractMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest$ClassWithStaticFinalField.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.InterceptorTest$4.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.interceptors.InterceptorTest$4.write(com.google.gson.stream.JsonWriter, com.google.gson.interceptors.InterceptorTest$User): void"
    ],
    "com.google.gson.common.MoreAsserts.assertContains(java.util.Collection, java.lang.Object): void": [
      "org.junit.Assert.fail(java.lang.String): void",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Collection.iterator(): java.util.Iterator"
    ],
    "com.google.gson.functional.MapTest$6.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testMissingValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerializationAndDeserialization(java.lang.Class): void": [
      "com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerializationAndDeserialization(com.google.gson.Gson, java.lang.Class): void"
    ],
    "com.google.gson.functional.Java17RecordTest$6LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.isClassJsonAdapterFactory(com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapterFactory): boolean": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.annotations.JsonAdapter.value(): java.lang.Class",
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.createAdapter(com.google.gson.internal.ConstructorConstructor, java.lang.Class): java.lang.Object",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getAnnotation(java.lang.Class): com.google.gson.annotations.JsonAdapter",
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.putFactoryAndGetCurrent(java.lang.Class, com.google.gson.TypeAdapterFactory): com.google.gson.TypeAdapterFactory",
      "java.util.concurrent.ConcurrentMap.get(java.lang.Object): java.lang.Object",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class"
    ],
    "com.google.gson.internal.bind.TypeAdapters$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$1.read(com.google.gson.stream.JsonReader): java.lang.Class"
    ],
    "com.google.gson.functional.EnumTest$Gender.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.ObjectTest$ArrayOfArrays.\u003cinit\u003e(): void",
      "com.google.gson.functional.ObjectTest$ArrayOfArrays.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.\u003cinit\u003e(java.lang.Class): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlTypesSupportTest.testSupported(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.metrics.ParseBenchmark$ReaderUser.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.TypeAdapterTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictUnnecessaryArraySeparatorsWithSkipValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.stream.JsonReader.skipValue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.bind.TypeAdapters$16.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$16.read(com.google.gson.stream.JsonReader): java.math.BigDecimal"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$3.\u003cinit\u003e(com.google.gson.functional.TypeAdapterPrecedenceTest, java.lang.String): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.Streams$AppendableWriter.append(java.lang.CharSequence, int, int): java.io.Writer": [
      "java.lang.Appendable.append(java.lang.CharSequence, int, int): java.lang.Appendable"
    ],
    "com.google.gson.functional.PrimitiveTest.testShortDeserialization(): void": [
      "com.google.common.truth.PrimitiveShortArraySubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Short.valueOf(short): java.lang.Short",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.lang.Short.shortValue(): short",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.Truth.assertThat(short[]): com.google.common.truth.PrimitiveShortArraySubject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder.hasNIdCt(): boolean": [],
    "com.google.gson.DefaultInetAddressTypeAdapterTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeToken.isAssignableFrom(com.google.gson.reflect.TypeToken): boolean": [
      "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type): boolean",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.EnumTest$4.\u003cinit\u003e(com.google.gson.functional.EnumTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$FooJsonAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$FooJsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithStaticField.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection(): void": [
      "com.google.gson.functional.DefaultTypeAdaptersTest$2.getType(): java.lang.reflect.Type",
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.GsonBuilder.setDateFormat(java.lang.String): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.util.Locale.getDefault(): java.util.Locale",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Date.getTime(): long",
      "com.google.gson.functional.DefaultTypeAdaptersTest$2.\u003cinit\u003e(com.google.gson.functional.DefaultTypeAdaptersTest): void",
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.util.TimeZone.getDefault(): java.util.TimeZone",
      "java.util.Date.\u003cinit\u003e(long): void",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testDeserializeMissingSubtype(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "org.junit.Assert.fail(): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateParseWithDefaultTimezone(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition): java.util.Date",
      "java.text.ParsePosition.\u003cinit\u003e(int): void",
      "java.util.GregorianCalendar.getTime(): java.util.Date",
      "java.util.GregorianCalendar.\u003cinit\u003e(int, int, int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.common.TestTypes$StringWrapper.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testNullValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.ComparableSubject.isNull(): void",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.dateAdapter(com.google.gson.TypeAdapterFactory): com.google.gson.TypeAdapter",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createDefaultsAdapterFactory(): com.google.gson.TypeAdapterFactory",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.writeTo(com.google.protobuf.CodedOutputStream): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.protobuf.Internal$LongList.size(): int",
      "com.google.protobuf.CodedOutputStream.writeMessage(int, com.google.protobuf.MessageLite): void",
      "com.google.protobuf.Internal$LongList.getLong(int): long",
      "com.google.protobuf.GeneratedMessageV3.writeString(com.google.protobuf.CodedOutputStream, int, java.lang.Object): void",
      "java.util.List.size(): int",
      "com.google.protobuf.UnknownFieldSet.writeTo(com.google.protobuf.CodedOutputStream): void",
      "com.google.protobuf.CodedOutputStream.writeInt64(int, long): void"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper.isJavaType(java.lang.Class): boolean": [
      "com.google.gson.internal.ReflectionAccessFilterHelper.isJavaType(java.lang.String): boolean",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.common.TestTypes$CrazyLongTypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testDocumentWithCommentEndingInSlash(): void": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testSetLenientFalse(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.getStrictness(): com.google.gson.Strictness",
      "com.google.gson.stream.JsonReader.setLenient(boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimples(int): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.protobuf.RepeatedFieldBuilderV3.getMessage(int): com.google.protobuf.AbstractMessage"
    ],
    "com.google.gson.internal.bind.TypeAdapters$27.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$10.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$10.write(com.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicIntegerArray): void"
    ],
    "com.google.gson.internal.Streams.writerForAppendable(java.lang.Appendable): java.io.Writer": [
      "com.google.gson.internal.Streams$AppendableWriter.\u003cinit\u003e(java.lang.Appendable): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$7.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.ParameterizedTypesTest$6.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.gson.functional.ParameterizedTypesTest$5.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.getExpectedJson(com.google.gson.ParameterizedTypeFixtures$MyParameterizedType): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.\u003cinit\u003e(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.ParameterizedTypesTest$5.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.ParameterizedTypesTest$6.getType(): java.lang.reflect.Type",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testJsonValue(): void": [
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.jsonValue(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types.getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class): java.lang.reflect.Type": [
      "java.lang.Class.getGenericSuperclass(): java.lang.reflect.Type",
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "java.lang.Class.getInterfaces(): java.lang.Class[]",
      "java.lang.Class.getGenericInterfaces(): java.lang.reflect.Type[]",
      "java.lang.Class.getSuperclass(): java.lang.Class",
      "com.google.gson.internal.$Gson$Types.getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class): java.lang.reflect.Type",
      "java.lang.Class.isInterface(): boolean"
    ],
    "com.google.gson.functional.VersioningTest$Version1_2.\u003cinit\u003e(): void": [
      "com.google.gson.functional.VersioningTest$Version1_1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.EnumTest.testEnumToStringReadInterchanged(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseFrom(java.nio.ByteBuffer): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer): java.lang.Object"
    ],
    "com.google.gson.functional.FieldNamingTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [],
    "com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields(): void": [
      "com.google.gson.ExposeAnnotationExclusionStrategyTest.createFieldAttributes(java.lang.String): java.lang.reflect.Field",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.ExposeAnnotationExclusionStrategyTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.internal.Excluder.excludeFieldsWithoutExposeAnnotation(): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$5.serialize(com.google.gson.functional.CustomTypeAdaptersTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken": [
      "com.google.gson.JsonPrimitive.isString(): boolean",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peekStack(): java.lang.Object",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.bind.JsonTreeReader.push(java.lang.Object): void",
      "com.google.gson.stream.MalformedJsonException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.JsonPrimitive.isBoolean(): boolean",
      "java.lang.AssertionError.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "java.util.Iterator.hasNext(): boolean",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.TypeAdapters$33.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.functional.VersioningTest$Version1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$7.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.JsonArrayTest.testNullJsonElementAddition(): void": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.arrayOf(java.lang.Object[]): java.lang.Object[]": [],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest.testJsonAdapterNullSafe(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$WithNullSafe.\u003cinit\u003e(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterSerializerDeserializerTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$8.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.ReflectionAccessFilterTest$8.read(com.google.gson.stream.JsonReader): com.google.gson.functional.ReflectionAccessFilterTest$ClassWithoutNoArgsConstructor"
    ],
    "com.google.gson.stream.JsonReaderPathTest$Factory.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest.testDeserializeRepeatedFieldsProto(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getNumbers(int): long",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getSimples(int): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getCount(): int",
      "org.junit.Assert.assertEquals(long, long): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getMsg(): java.lang.String"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testBigDecimalAdapter$11(com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "java.lang.String.repeat(int): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataCount(): int": [
      "java.util.List.size(): int",
      "com.google.protobuf.RepeatedFieldBuilderV3.getCount(): int"
    ],
    "com.google.gson.functional.ArrayTest$1.\u003cinit\u003e(com.google.gson.functional.ArrayTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$NumberAsStringAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.lang.Object.toString(): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest$1EmptyRecord.toString(): java.lang.String": [],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getSimplesCount(): int": [
      "java.util.List.size(): int"
    ],
    "com.google.gson.functional.NumberLimitsTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$14.write(com.google.gson.stream.JsonWriter, java.lang.Character): void": [
      "java.lang.String.valueOf(java.lang.Object): java.lang.String",
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.\u003cinit\u003e(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$1.\u003cinit\u003e(): void": [
      "com.google.protobuf.AbstractParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setSimples(int, com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "java.util.List.set(int, java.lang.Object): java.lang.Object",
      "com.google.protobuf.RepeatedFieldBuilderV3.setMessage(int, com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureSimplesIsMutable(): void"
    ],
    "com.google.gson.internal.$Gson$Types.typeToString(java.lang.reflect.Type): java.lang.String": [
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ExposeFieldsTest$SomeInterfaceInstanceCreator.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.functional.ExposeFieldsTest$SomeInterfaceInstanceCreator.createInstance(java.lang.reflect.Type): com.google.gson.functional.ExposeFieldsTest$SomeInterface"
    ],
    "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Enum): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.writeDeferredName(): void",
      "com.google.gson.stream.JsonWriter.beforeValue(): void",
      "java.io.Writer.write(java.lang.String): void"
    ],
    "com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonStreamParser.hasNext(): boolean",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.io.CharArrayWriter.toCharArray(): char[]",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonStreamParser.next(): com.google.gson.JsonElement",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.io.CharArrayReader.\u003cinit\u003e(char[]): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.CharArrayWriter.write(char[]): void",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonStreamParser.\u003cinit\u003e(java.io.Reader): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.String.toCharArray(): char[]",
      "java.io.CharArrayWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$4.write(com.google.gson.stream.JsonWriter, java.lang.Boolean): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.lang.Boolean.toString(): java.lang.String"
    ],
    "com.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date): java.lang.String": [
      "com.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date, boolean, java.util.TimeZone): java.lang.String"
    ],
    "com.google.gson.functional.TypeVariableTest$Red.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.lambda$testSetStrictnessNull$0(com.google.gson.stream.JsonReader): void": [
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void"
    ],
    "com.google.gson.functional.Java17RecordTest$12LocalRecord.s(): java.lang.String": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getNameThatTestsCaseFormatBytes(int): com.google.protobuf.ByteString": [
      "com.google.protobuf.LazyStringList.getByteString(int): com.google.protobuf.ByteString"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$User.\u003cinit\u003e(java.lang.String, java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testMixedCaseLiterals(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$6.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.it.ShrinkingIT.lambda$testNoSerializedName_HasArgsConstructor$7(java.lang.Class): void": [
      "java.nio.file.Path.equals(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Class.getMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.example.Main.lambda$testSerializedName$6(com.google.gson.Gson): java.lang.String": [
      "com.example.Main.toJson(com.google.gson.Gson, java.lang.Object): java.lang.String",
      "com.example.ClassWithSerializedName.\u003cinit\u003e(int): void"
    ],
    "com.google.gson.functional.ObjectTest$ClassWithEmptyStringFields.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$UserJsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$User): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.Gson$FutureTypeAdapter.getSerializationDelegate(): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson$FutureTypeAdapter.delegate(): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.functional.MapTest$MyParameterizedMap.\u003cinit\u003e(int): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordSupportedHelper.getCanonicalRecordConstructor(java.lang.Class): java.lang.reflect.Constructor": [
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "java.lang.Class.getDeclaredConstructor(java.lang.Class[]): java.lang.reflect.Constructor",
      "com.google.gson.internal.reflect.ReflectionHelper.access$300(java.lang.ReflectiveOperationException): java.lang.RuntimeException"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setIdBytes(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeVariableTest$Red.\u003cinit\u003e(java.lang.Object): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$5.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldAttributesTest.testModifiers(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.FieldAttributes.hasModifier(int): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$HistoryCourse.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$12.\u003cinit\u003e(com.google.gson.GsonTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.Excluder.clone(): com.google.gson.internal.Excluder": [
      "java.lang.Object.clone(): java.lang.Object",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomFieldAdapter.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldNamingPolicy$6.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.FieldNamingPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.FieldNamingPolicy$1): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testClassWithoutNoArgsConstructor(): void": [
      "com.google.gson.Gson.newBuilder(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.ReflectionAccessFilterTest$7.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.ReflectionAccessFilterTest$8.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.ReflectionAccessFilterTest$9.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void"
    ],
    "com.google.gson.functional.ObjectTest$ArrayOfArrays.getExpectedJson(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormatOrBuilder.getAnotherField(): java.lang.String": [],
    "com.google.gson.stream.JsonReaderPathTest.objectPath(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.close(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing$8.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StringTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonObject.entrySet(): java.util.Set",
      "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.common.truth.Subject.isInstanceOf(java.lang.Class): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.IterableSubject.isEmpty(): void",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Annotations.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$1DummyFactory.hashCode(): int": [
      "java.lang.Object.hashCode(): int"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.getEnumValue(com.google.protobuf.Descriptors$EnumValueDescriptor): java.lang.Object": [
      "com.google.protobuf.Descriptors$EnumValueDescriptor.getName(): java.lang.String",
      "com.google.gson.protobuf.ProtoTypeAdapter.getCustSerializedEnumValue(com.google.protobuf.DescriptorProtos$EnumValueOptions, java.lang.String): java.lang.String",
      "com.google.protobuf.Descriptors$EnumValueDescriptor.getNumber(): int",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.protobuf.Descriptors$EnumValueDescriptor.getOptions(): com.google.protobuf.DescriptorProtos$EnumValueOptions"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getCountryCode5F55Bytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Graph.access$700(com.google.gson.graph.GraphAdapterBuilder$Graph): com.google.gson.graph.GraphAdapterBuilder$Element": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.metrics.CollectionsDeserializationBenchmark.timeCollectionsReflectionStreaming(int): void": [
      "java.lang.reflect.Field.setLong(java.lang.Object, long): void",
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.reflect.Field.getName(): java.lang.String",
      "java.util.List.add(java.lang.Object): boolean",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "java.lang.reflect.Field.setBoolean(java.lang.Object, boolean): void",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.metrics.BagOfPrimitives.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.reflect.Field.set(java.lang.Object, java.lang.Object): void",
      "java.lang.String.equals(java.lang.Object): boolean",
      "java.lang.Class.getDeclaredFields(): java.lang.reflect.Field[]",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "java.lang.reflect.Field.getType(): java.lang.Class",
      "java.lang.reflect.Field.setInt(java.lang.Object, int): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.internal.sql.SqlTimestampTypeAdapter.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.sql.SqlTimestampTypeAdapter$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types$WildcardTypeImpl.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.$Gson$Types.typeToString(java.lang.reflect.Type): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(com.google.gson.stream.JsonReader): java.util.Map": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(com.google.gson.stream.JsonReader): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.internal.ObjectConstructor.construct(): java.lang.Object",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.internal.bind.TypeAdapters$20.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonObjectAsMapTest.testEqualsHashCode(): void": [
      "java.util.Map.equals(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.util.Collections.emptyMap(): java.util.Map",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "java.util.Collections.singletonMap(java.lang.Object, java.lang.Object): java.util.Map",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JavaSerializationTest.testMapIsSerializable(): void": [
      "com.google.gson.JavaSerializationTest.serializedCopy(java.lang.Object): java.lang.Object",
      "com.google.gson.JavaSerializationTest$1.\u003cinit\u003e(com.google.gson.JavaSerializationTest): void",
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.JavaSerializationTest$1.getType(): java.lang.reflect.Type",
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map.keySet(): java.util.Set",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.Ordered.inOrder(): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testPrimitiveFieldAnnotationTakesPrecedenceOverDefault(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GadgetWithPrimitivePart.\u003cinit\u003e(long): void",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.TypeAdapters$3.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$3.write(com.google.gson.stream.JsonWriter, java.lang.Boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getNameThatTestsCaseFormatList(): com.google.protobuf.ProtocolStringList": [
      "com.google.protobuf.LazyStringList.getUnmodifiableView(): com.google.protobuf.LazyStringList"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.toBuilder(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$3.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$3.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A"
    ],
    "com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class[]): java.lang.AssertionError": [
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$28.write(com.google.gson.stream.JsonWriter, com.google.gson.JsonElement): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonArray.iterator(): java.util.Iterator",
      "com.google.gson.JsonElement.isJsonArray(): boolean",
      "com.google.gson.JsonElement.getAsJsonPrimitive(): com.google.gson.JsonPrimitive",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.gson.internal.bind.TypeAdapters$28.write(com.google.gson.stream.JsonWriter, com.google.gson.JsonElement): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.JsonElement.isJsonPrimitive(): boolean",
      "com.google.gson.JsonElement.isJsonObject(): boolean",
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.JsonPrimitive.getAsBoolean(): boolean",
      "java.util.Set.iterator(): java.util.Iterator",
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.JsonObject.entrySet(): java.util.Set",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.gson.JsonPrimitive.isBoolean(): boolean",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.Iterator.hasNext(): boolean"
    ],
    "com.google.gson.JsonPrimitiveTest.testBoolean(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonPrimitive.isBoolean(): boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.JsonPrimitive.getAsBoolean(): boolean"
    ],
    "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite.\u003cinit\u003e(com.google.gson.internal.Streams$1): void": [
      "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.ParameterizedTypeTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.newBuilder(): com.google.gson.protobuf.ProtoTypeAdapter$Builder": [
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.\u003cinit\u003e(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization, com.google.common.base.CaseFormat, com.google.common.base.CaseFormat, com.google.gson.protobuf.ProtoTypeAdapter$1): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$StringWrapper.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.hasOuterMessage(): boolean": [],
    "com.google.gson.GsonTest.testDefaultGsonNewBuilderModification(): void": [
      "com.google.gson.Gson.newBuilder(): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.GsonTest.assertCustomGson(com.google.gson.Gson): void",
      "com.google.gson.GsonTest$7.\u003cinit\u003e(com.google.gson.GsonTest): void",
      "com.google.gson.GsonTest$6.\u003cinit\u003e(com.google.gson.GsonTest): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonTest$5.\u003cinit\u003e(com.google.gson.GsonTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.GsonTest.assertDefaultGson(com.google.gson.Gson): void"
    ],
    "com.google.gson.functional.FormattingStyleTest.testDefault(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.FormattingStyleTest.createInput(): java.util.Map",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.FormattingStyleTest.buildExpected(java.lang.String, java.lang.String, boolean): java.lang.String",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testHelloWorld(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$Node.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testMalformedNumbers(): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.functional.EnumTest$MyEnumTypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedNames(): void": [
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$6.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest.testGenericsPreservation(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.IterableSubject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.ComparableSubject.isInstanceOf(java.lang.Class): void",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getNumbersCount(): int": [
      "com.google.protobuf.Internal$LongList.size(): int"
    ],
    "com.google.gson.JsonArray.getAsDouble(): double": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsDouble(): double"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$B.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CircularReferenceTest$ClassWithSelfReferenceArray.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.UUID.fromString(java.lang.String): java.util.UUID",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$2.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.example.GenericClasses$DummyClass$Adapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.protobuf.InvalidProtocolBufferException.getUnfinishedMessage(): com.google.protobuf.MessageLite",
      "com.google.protobuf.InvalidProtocolBufferException.unwrapIOException(): java.io.IOException",
      "com.google.protobuf.Parser.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger(): void": [
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.common.truth.Truth.assertWithMessage(java.lang.String, java.lang.Object[]): com.google.common.truth.StandardSubjectBuilder",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.JsonPrimitive.equals(java.lang.Object): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.common.truth.StandardSubjectBuilder.that(java.lang.Boolean): com.google.common.truth.BooleanSubject"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.flush(): void": [],
    "com.google.gson.internal.ConstructorConstructor$17.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Annotations.registerAllExtensions(com.google.protobuf.ExtensionRegistryLite): void": [
      "com.google.protobuf.ExtensionRegistryLite.add(com.google.protobuf.ExtensionLite): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setMsg(java.lang.String): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.onChanged(): void"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testNullLabel(): void": [
      "org.junit.Assert.fail(): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class, java.lang.String): com.google.gson.typeadapters.RuntimeTypeAdapterFactory"
    ],
    "com.google.gson.internal.sql.SqlTypesGsonTest.tearDown(): void": [
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$2.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$2.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base): void"
    ],
    "com.google.gson.stream.JsonWriter.close(int, int, char): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.newline(): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonWriter.peek(): int",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "java.io.Writer.write(int): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$FooJsonAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Subclass.\u003cinit\u003e(): void": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest.testHasNext_endOfDocument(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.beginObject(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.internal.bind.JsonTreeReader.endObject(): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.internal.bind.JsonTreeReader.hasNext(): boolean"
    ],
    "com.google.gson.functional.MapTest$4.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilder.setNumberToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration(): void": [
      "com.google.gson.GsonBuilder.setLongSerializationPolicy(com.google.gson.LongSerializationPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.FormattingStyleTest.testCompactToPretty(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.FormattingStyle.withIndent(java.lang.String): com.google.gson.FormattingStyle",
      "com.google.gson.functional.FormattingStyleTest.createInput(): java.util.Map",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.FormattingStyle.withNewline(java.lang.String): com.google.gson.FormattingStyle",
      "com.google.gson.functional.FormattingStyleTest.toJson(java.lang.Object, com.google.gson.FormattingStyle): java.lang.String",
      "com.google.gson.FormattingStyle.withSpaceAfterSeparators(boolean): com.google.gson.FormattingStyle"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.internal.bind.JsonTreeReader.close(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.getDataBytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.LongSerializationPolicyTest.testStringLongSerializationNull(): void": [
      "com.google.gson.GsonBuilder.setLongSerializationPolicy(com.google.gson.LongSerializationPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.LongSerializationPolicy.serialize(java.lang.Long): com.google.gson.JsonElement",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.EnumTest$Roshambo.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByInstanceCreator$Serializer.serialize(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByInstanceCreator, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.example.Main.lambda$testUnreferencedConstructorNoArgs$14(com.google.gson.Gson): java.lang.String": [
      "java.lang.Integer.toString(int): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder.getDataOrBuilderList(): java.util.List": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$ClassExtendingJdkClass.close(): void": [],
    "com.google.gson.functional.RawSerializationTest$3.\u003cinit\u003e(com.google.gson.functional.RawSerializationTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$5.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$7.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.ArrayTypeAdapter$1.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type): java.lang.Class",
      "java.lang.Class.isArray(): boolean",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.internal.bind.ArrayTypeAdapter.\u003cinit\u003e(com.google.gson.Gson, com.google.gson.TypeAdapter, java.lang.Class): void",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "com.google.gson.internal.$Gson$Types.getArrayComponentType(java.lang.reflect.Type): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.EnumTest$ClassWithEnumFields.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.value(double): com.google.gson.stream.JsonWriter": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.StringBuilder.append(double): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.internal.bind.JsonTreeWriter.isLenient(): boolean",
      "java.lang.Double.isInfinite(double): boolean",
      "java.lang.Double.isNaN(double): boolean"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing.lambda$test$6(): void": [
      "com.google.gson.reflect.TypeTokenTest$1Enclosing$7.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getNameBytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.internal.bind.TypeAdapters$26.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.JsonObjectTest.testEntrySet(): void": [
      "java.util.Collections.singleton(java.lang.Object): java.util.Set",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "java.util.Iterator.remove(): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.ArrayDeque.\u003cinit\u003e(java.util.Collection): void",
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Boolean): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "java.util.Deque.getFirst(): java.lang.Object",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.util.Set.iterator(): java.util.Iterator",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonObject.entrySet(): java.util.Set",
      "com.google.gson.JsonObject.size(): int",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.AbstractMap$SimpleEntry.\u003cinit\u003e(java.lang.Object, java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map$Entry.setValue(java.lang.Object): java.lang.Object",
      "java.util.ArrayList.\u003cinit\u003e(java.util.Collection): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.util.Deque.removeFirst(): java.lang.Object",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getNameThatTestsCaseFormatList(): com.google.protobuf.ProtocolStringList": [],
    "com.google.gson.internal.bind.TypeAdapters$6.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "java.lang.Number.shortValue(): short",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.JsonStreamParserTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$13.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "java.lang.Number.doubleValue(): double",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization(): void": [
      "com.google.gson.functional.VersioningTest.gsonWithVersion(double): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.getUnknownFields(): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object": [
      "com.google.gson.TypeAdapter.fromJson(java.io.Reader): java.lang.Object",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.CollectionTest$ObjectWithWildcardCollection.getCollection(): java.util.Collection": [],
    "com.google.gson.internal.bind.JsonElementReaderTest.testBooleans(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeReader.nextBoolean(): boolean",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.common.truth.BooleanSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.FieldNamingTest.getGsonWithNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.FieldNamingTest$TestNames.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "java.util.Map.entrySet(): java.util.Set",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory, java.util.Map, java.util.Map): void",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$2.serialize(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.native_test.ReflectionTest$2.read(com.google.gson.stream.JsonReader): com.google.gson.native_test.ReflectionTest$ClassWithRegisteredAdapter": [
      "com.google.gson.native_test.ReflectionTest$ClassWithRegisteredAdapter.\u003cinit\u003e(int): void",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$LongToStringTypeAdapterFactory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$LongToStringTypeAdapterFactory$1.read(com.google.gson.stream.JsonReader): java.lang.Long"
    ],
    "com.google.gson.ObjectTypeAdapterTest.testSerialize(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence): java.lang.String",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.ObjectTypeAdapterTest$RuntimeType.\u003cinit\u003e(com.google.gson.ObjectTypeAdapterTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type): boolean",
      "java.lang.reflect.Field.getGenericType(): java.lang.reflect.Type",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Class.getDeclaredField(java.lang.String): java.lang.reflect.Field",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$12.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker$1.canAccess(java.lang.reflect.AccessibleObject, java.lang.Object): boolean": [
      "java.lang.Boolean.booleanValue(): boolean",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomConstructor.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.TypeHierarchyAdapterTest$ManagerAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.TypeHierarchyAdapterTest$ManagerAdapter.serialize(com.google.gson.functional.TypeHierarchyAdapterTest$Manager, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.LeniencyTest.testLenientFromJson(): void": [
      "com.google.gson.functional.LeniencyTest$1.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.functional.LeniencyTest$1.\u003cinit\u003e(com.google.gson.functional.LeniencyTest): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "java.util.Collections.singletonList(java.lang.Object): java.util.List"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api.newParser(): com.google.gson.metrics.ParseBenchmark$Parser": [],
    "com.google.gson.internal.LazilyParsedNumberTest.testJavaSerialization(): void": [
      "java.io.ByteArrayInputStream.\u003cinit\u003e(byte[]): void",
      "java.io.ObjectInputStream.\u003cinit\u003e(java.io.InputStream): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "java.io.ObjectOutputStream.close(): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "java.io.ObjectOutputStream.\u003cinit\u003e(java.io.OutputStream): void",
      "java.io.ObjectInputStream.readObject(): java.lang.Object",
      "java.io.ObjectOutputStream.writeObject(java.lang.Object): void",
      "java.io.ByteArrayOutputStream.toByteArray(): byte[]",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void",
      "java.io.ByteArrayOutputStream.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.FieldExclusionTest$NestedClass.toJson(): java.lang.String": [],
    "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, com.google.gson.reflect.TypeToken): java.lang.Object": [
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, com.google.gson.reflect.TypeToken): java.lang.Object"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): java.lang.Integer": [
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.VersionExclusionStrategyTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.PerformanceTest.testDeserializeClasses(): void": [
      "java.lang.System.currentTimeMillis(): long",
      "java.io.PrintStream.printf(java.lang.String, java.lang.Object[]): java.io.PrintStream",
      "com.google.gson.metrics.PerformanceTest.buildJsonForClassWithList(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Long.valueOf(long): java.lang.Long"
    ],
    "com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization(): void": [
      "com.google.common.truth.PrimitiveIntArraySubject.hasLength(int): void",
      "com.google.common.truth.ObjectArraySubject.hasLength(int): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "com.google.common.truth.Truth.assertThat(int[]): com.google.common.truth.PrimitiveIntArraySubject"
    ],
    "com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality(): void": [
      "java.lang.reflect.GenericArrayType.getGenericComponentType(): java.lang.reflect.Type",
      "java.lang.Object.hashCode(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GenericArrayTypeTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.GenericArrayTypeTest$2.\u003cinit\u003e(com.google.gson.GenericArrayTypeTest): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GenericArrayTypeTest$1.\u003cinit\u003e(com.google.gson.GenericArrayTypeTest): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.GenericArrayTypeTest$1.getType(): java.lang.reflect.Type",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.GsonTest$8.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.GsonTest$8.createInstance(java.lang.reflect.Type): com.google.gson.GsonTest$CustomClass3"
    ],
    "com.google.gson.LongSerializationPolicy$2.serialize(java.lang.Long): com.google.gson.JsonElement": [
      "java.lang.Long.toString(): java.lang.String",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.stream.JsonReaderPathTest$Factory.valueOf(java.lang.String): com.google.gson.stream.JsonReaderPathTest$Factory": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.TypeAdapterTest$2.\u003cinit\u003e(com.google.gson.TypeAdapterTest, java.io.IOException): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo2PartTypeAdapterFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$6LocalRecord.s(): java.lang.String": [],
    "com.google.gson.functional.FormattingStyleTest.testFormatPrettySingleLine(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.FormattingStyleTest.createInput(): java.util.Map",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.FormattingStyleTest.buildExpected(java.lang.String, java.lang.String, boolean): java.lang.String",
      "com.google.gson.functional.FormattingStyleTest.toJson(java.lang.Object, com.google.gson.FormattingStyle): java.lang.String",
      "com.google.gson.FormattingStyle.withSpaceAfterSeparators(boolean): com.google.gson.FormattingStyle"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.Parser.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.JsonElement.getAsJsonPrimitive(): com.google.gson.JsonPrimitive": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.isJsonPrimitive(): boolean",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.TypeVariableTest$Foo.equals(java.lang.Object): boolean": [
      "java.util.Map.equals(java.lang.Object): boolean",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "java.lang.Boolean.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.functional.Java17RecordTest$5LocalRecord.s(): java.lang.String": [],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testDatePattern(): void": [
      "java.text.DateFormat.format(java.util.Date): java.lang.String",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.toLiteral(java.lang.String): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.dateAdapter(com.google.gson.TypeAdapterFactory): com.google.gson.TypeAdapter",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(java.lang.String): com.google.gson.TypeAdapterFactory",
      "java.text.SimpleDateFormat.\u003cinit\u003e(java.lang.String): void",
      "java.util.Date.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriter.close(): void": [
      "java.io.Writer.close(): void",
      "java.io.IOException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testTypeTokenSubSubClass$14(): void": [
      "com.google.gson.reflect.TypeTokenTest$12.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.readField(java.lang.Object[], com.google.gson.stream.JsonReader, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField): void": [
      "java.lang.Integer.intValue(): int",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField.readIntoArray(com.google.gson.stream.JsonReader, int, java.lang.Object[]): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.reflect.ReflectionHelper.constructorToString(java.lang.reflect.Constructor): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializingBigDecimalAsBigIntegerFails$34(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter.getSerializationDelegate(): com.google.gson.TypeAdapter": [
      "com.google.gson.internal.bind.TreeTypeAdapter.delegate(): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithRegisteredAdapter.toString(): java.lang.String": [],
    "com.google.gson.internal.ConstructorConstructor$18.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$ClassWithAMap.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.util.TreeMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Document$6.\u003cinit\u003e(): void": [
      "com.fasterxml.jackson.core.type.TypeReference.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeToken.isCapturingTypeVariablesForbidden(): boolean": [
      "java.lang.System.getProperty(java.lang.String): java.lang.String",
      "java.util.Objects.equals(java.lang.Object, java.lang.Object): boolean"
    ],
    "com.google.gson.Gson$FutureTypeAdapter.delegate(): com.google.gson.TypeAdapter": [
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Graph.access$200(com.google.gson.graph.GraphAdapterBuilder$Graph): java.util.Map": [],
    "com.google.gson.functional.Java17RecordTest.testReflectionFilterBlockInaccessible(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.functional.Java17RecordTest$PublicRecord.\u003cinit\u003e(int): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.common.TestTypes$BagOfPrimitives.equals(java.lang.Object): boolean": [
      "com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object): boolean",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getIntValue(): int"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, int): void": [
      "com.google.gson.internal.PreJava9DateFormatProvider.getUSDateFormat(int): java.text.DateFormat",
      "java.util.Locale.equals(java.lang.Object): boolean",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.Locale.getDefault(): java.util.Locale",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.JavaVersion.isJava9OrLater(): boolean",
      "java.util.List.add(java.lang.Object): boolean",
      "java.text.DateFormat.getDateInstance(int): java.text.DateFormat",
      "java.text.DateFormat.getDateInstance(int, java.util.Locale): java.text.DateFormat",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$36.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$8.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.serialize(com.google.gson.ParameterizedTypeFixtures$MyParameterizedType, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.getValue(): java.lang.Object",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.lang.Class.getSimpleName(): java.lang.String",
      "com.google.gson.JsonSerializationContext.serialize(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.beginArray(): com.google.gson.stream.JsonWriter": [
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement): void"
    ],
    "com.google.gson.GsonBuilderTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InstanceCreatorTest$3.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter$1.write(char[], int, int): void": [
      "java.lang.AssertionError.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.nextBoolean(): boolean": [
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.doPeek(): int"
    ],
    "com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserClassAnnotationAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserClassAnnotationAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testNameAsTopLevelValue(): void": [
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.GsonTest.testGetDelegateAdapter(): void": [
      "com.google.gson.GsonTest$2DummyAdapter.\u003cinit\u003e(com.google.gson.GsonTest, int): void",
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "com.google.gson.GsonTest$1DummyFactory.equals(java.lang.Object): boolean",
      "com.google.common.truth.Subject.isNotInstanceOf(java.lang.Class): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.GsonTest$1DummyFactory.\u003cinit\u003e(com.google.gson.GsonTest, com.google.gson.GsonTest$2DummyAdapter): void",
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.example.Main.lambda$testConstructorHasArgs$12(com.google.gson.Gson): java.lang.String": [
      "java.lang.Integer.toString(int): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type, java.util.Map): java.lang.reflect.Type": [
      "java.lang.reflect.GenericArrayType.getGenericComponentType(): java.lang.reflect.Type",
      "com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): java.lang.reflect.ParameterizedType",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type): java.lang.reflect.WildcardType",
      "java.lang.reflect.ParameterizedType.getRawType(): java.lang.reflect.Type",
      "com.google.gson.internal.$Gson$Types.equal(java.lang.Object, java.lang.Object): boolean",
      "java.lang.reflect.WildcardType.getUpperBounds(): java.lang.reflect.Type[]",
      "java.lang.reflect.WildcardType.getLowerBounds(): java.lang.reflect.Type[]",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.$Gson$Types.resolveTypeVariable(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.TypeVariable): java.lang.reflect.Type",
      "java.lang.reflect.ParameterizedType.getOwnerType(): java.lang.reflect.Type",
      "[Ljava.lang.reflect.Type;.clone(): java.lang.Object",
      "java.lang.Class.isArray(): boolean",
      "java.lang.Class.getComponentType(): java.lang.Class",
      "com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type, java.util.Map): java.lang.reflect.Type",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type): java.lang.reflect.WildcardType",
      "com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type): java.lang.reflect.GenericArrayType"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearYear(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.ToNumberPolicyTest.lambda$testDouble$0(com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonDomParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void": [
      "com.google.gson.metrics.ParseBenchmark$GsonDomParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$29.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.MapTest$29.serialize(com.google.gson.common.TestTypes$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [],
    "com.google.gson.functional.GsonVersionDiagnosticsTest$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.GsonVersionDiagnosticsTest$1.read(com.google.gson.stream.JsonReader): com.google.gson.functional.GsonVersionDiagnosticsTest$TestType"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization.valueOf(java.lang.String): com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipInteger(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderSerializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderSerializer.serialize(com.google.gson.functional.CustomTypeAdaptersTest$DataHolder, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "java.util.List.add(java.lang.Object): boolean"
    ],
    "com.google.gson.JsonParser.parseReader(com.google.gson.stream.JsonReader): com.google.gson.JsonElement": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getStrictness(): com.google.gson.Strictness",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "com.google.gson.internal.Streams.parse(com.google.gson.stream.JsonReader): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.MapTest$34.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.VersioningTest$Version1_1.\u003cinit\u003e(): void": [
      "com.google.gson.functional.VersioningTest$Version1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$PrivateRecord.i(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.\u003cclinit\u003e(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.getRecordComponentNames(java.lang.Class): java.lang.String[]": [
      "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.getRecordComponentNames(java.lang.Class): java.lang.String[]"
    ],
    "com.google.gson.GsonTest$TestTypeAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1LocalRecordSerialization.i(): int": [],
    "com.google.gson.internal.bind.TypeAdapters$34.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.internal.bind.TypeAdapters$34$1.\u003cinit\u003e(com.google.gson.internal.bind.TypeAdapters$34, java.lang.Class): void",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.aString(): java.lang.String": [],
    "com.google.gson.functional.Java17RecordTest$12LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.GenericArrayTypeTest$2.\u003cinit\u003e(com.google.gson.GenericArrayTypeTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.lambda$testNameInArray$2(com.google.gson.internal.bind.JsonTreeWriter): void": [
      "com.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.bind.TypeAdapters$2.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$2.read(com.google.gson.stream.JsonReader): java.util.BitSet"
    ],
    "com.google.gson.stream.JsonWriter.peek(): int": [
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.JsonObjectTest.testAddingCharacterProperties(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.gson.JsonElement.getAsCharacter(): char",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonObject.has(java.lang.String): boolean",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.String.valueOf(char): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Character): void"
    ],
    "com.google.gson.JavaSerializationTest.serializedCopy(java.lang.Object): java.lang.Object": [
      "java.io.ByteArrayInputStream.\u003cinit\u003e(byte[]): void",
      "java.io.ObjectInputStream.\u003cinit\u003e(java.io.InputStream): void",
      "java.io.ObjectOutputStream.close(): void",
      "java.io.ObjectOutputStream.\u003cinit\u003e(java.io.OutputStream): void",
      "java.io.ObjectInputStream.readObject(): java.lang.Object",
      "java.io.ObjectOutputStream.writeObject(java.lang.Object): void",
      "java.io.ByteArrayOutputStream.toByteArray(): byte[]",
      "java.io.ByteArrayOutputStream.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testTopLevelValueTypeWithSkipValue(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.example.ClassWithUnreferencedHasArgsConstructor.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest.testStrictnessDefault(): void": [
      "com.google.common.truth.ComparableSubject.isNull(): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Deserializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$D.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory$Factory$1.delegate(): com.google.gson.TypeAdapter",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordNotSupportedHelper.\u003cinit\u003e(): void": [
      "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.\u003cinit\u003e(com.google.gson.internal.reflect.ReflectionHelper$1): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api$6.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.metrics.ParseBenchmark$Api.\u003cinit\u003e(java.lang.String, int, com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testReadEmptyArray(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setMonth(int): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.functional.MapTest.testMapOfMapDeserialization(): void": [
      "com.google.gson.functional.MapTest$27.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.MapTest$27.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.example.ClassWithAdapter$Adapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.internal.bind.TypeAdapters$8.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$8.read(com.google.gson.stream.JsonReader): java.util.concurrent.atomic.AtomicInteger"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$13.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization.values(): com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization[]": [
      "[Lcom.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization;.clone(): java.lang.Object"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateParseSpecialTimezone(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition): java.util.Date",
      "java.util.GregorianCalendar.set(int, int, int, int, int): void",
      "java.text.ParsePosition.\u003cinit\u003e(int): void",
      "java.util.GregorianCalendar.getTime(): java.util.Date",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.internal.bind.util.ISO8601UtilsTest.createUtcCalendar(): java.util.GregorianCalendar"
    ],
    "com.google.gson.internal.$Gson$Types.equal(java.lang.Object, java.lang.Object): boolean": [
      "java.util.Objects.equals(java.lang.Object, java.lang.Object): boolean"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$Base.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseFrom(java.nio.ByteBuffer): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer): java.lang.Object"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.\u003cinit\u003e(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest.testDeserializeListOfLists(): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.graph.GraphAdapterBuilderTest$3.getType(): java.lang.reflect.Type",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "java.util.List.size(): int",
      "com.google.gson.graph.GraphAdapterBuilder.addType(java.lang.reflect.Type): com.google.gson.graph.GraphAdapterBuilder",
      "com.google.gson.graph.GraphAdapterBuilderTest$4.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilderTest): void",
      "com.google.gson.graph.GraphAdapterBuilderTest$4.getType(): java.lang.reflect.Type",
      "com.google.gson.graph.GraphAdapterBuilder.\u003cinit\u003e(): void",
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.graph.GraphAdapterBuilderTest$3.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilderTest): void",
      "org.junit.Assert.assertSame(java.lang.Object, java.lang.Object): void",
      "com.google.gson.graph.GraphAdapterBuilder.registerOn(com.google.gson.GsonBuilder): void",
      "org.junit.Assert.assertEquals(long, long): void"
    ],
    "com.google.gson.functional.CollectionTest.testNullsInListSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.CollectionTest$11.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "com.google.gson.functional.CollectionTest$11.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.lang.Float.isInfinite(float): boolean",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Float.floatValue(): float",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.toBuilder(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.example.TestExecutor.lambda$same$0(java.lang.Object): java.lang.Object": [
      "java.util.Optional.of(java.lang.Object): java.util.Optional",
      "java.util.Optional.get(): java.lang.Object"
    ],
    "com.google.gson.internal.sql.SqlTimestampTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.sql.SqlTimestampTypeAdapter.write(com.google.gson.stream.JsonWriter, java.sql.Timestamp): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testByteDeserializationLossy$1(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(com.google.gson.stream.JsonWriter, java.util.Map): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.StreamingTypeAdaptersTest$3.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$1.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.PerformanceTest.testSerializeExposedClasses(): void": [
      "java.lang.System.currentTimeMillis(): long",
      "java.io.PrintStream.printf(java.lang.String, java.lang.Object[]): java.io.PrintStream",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.metrics.PerformanceTest$ClassWithExposedField.\u003cinit\u003e(java.lang.String): void",
      "java.util.List.add(java.lang.Object): boolean",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.metrics.PerformanceTest$ClassWithListOfObjects.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.Appendable): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$1.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, com.google.gson.InstanceCreator, java.lang.reflect.Type): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.InterceptorTest.testTopLevelClass(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithBigInteger.getExpectedJson(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithBigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilderForType(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.TypeAdapterTest$2.write(com.google.gson.stream.JsonWriter, java.lang.Integer): void": [],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing.test(): void": [
      "com.google.gson.reflect.TypeTokenTest$1Enclosing$8.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.lang.Class.getTypeParameters(): java.lang.reflect.TypeVariable[]",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.System.clearProperty(java.lang.String): java.lang.String",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "java.lang.System.setProperty(java.lang.String, java.lang.String): java.lang.String"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.getCustSerializedEnumValue(com.google.protobuf.DescriptorProtos$EnumValueOptions, java.lang.String): java.lang.String": [
      "com.google.protobuf.DescriptorProtos$EnumValueOptions.getExtension(com.google.protobuf.Extension): java.lang.Object",
      "com.google.protobuf.DescriptorProtos$EnumValueOptions.hasExtension(com.google.protobuf.Extension): boolean",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.stream.JsonReaderTest.testVeryLongQuotedString(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "java.lang.String.\u003cinit\u003e(char[]): void",
      "java.util.Arrays.fill(char[], char): void"
    ],
    "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement": [
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter): void",
      "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$4LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordSupportedHelper.isRecord(java.lang.Class): boolean": [
      "java.lang.Boolean.booleanValue(): boolean",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "com.google.gson.internal.reflect.ReflectionHelper.access$300(java.lang.ReflectiveOperationException): java.lang.RuntimeException"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType.valueOf(java.lang.String): com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.MixedStreamTest$Car.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest$6.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArrayAsListTest.testContains(): void": [
      "com.google.common.truth.IterableSubject.doesNotContain(java.lang.Object): void",
      "java.util.List.contains(java.lang.Object): boolean",
      "com.google.gson.JsonArray.asList(): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.IterableSubject.contains(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.FormattingStyleTest.\u003cclinit\u003e(): void": [
      "java.lang.System.lineSeparator(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing$2.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeVariableTest$Bar.\u003cinit\u003e(): void": [
      "com.google.gson.functional.TypeVariableTest$Bar.\u003cinit\u003e(java.lang.String, java.lang.Integer, boolean): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.util.ISO8601Utils.parseInt(java.lang.String, int, int): int": [
      "java.lang.Character.digit(char, int): int",
      "java.lang.String.charAt(int): char",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.NumberFormatException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.String.length(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.String.substring(int, int): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testLongLargerThanMaxLongThatWrapsAround(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$14.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clear(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$3.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.functional.VersioningTest.testVersionedClassesSerialization(): void": [
      "com.google.gson.functional.VersioningTest.gsonWithVersion(double): com.google.gson.Gson",
      "com.google.gson.functional.VersioningTest$Version1.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.VersioningTest$Version1_1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStringEndingInSlash(): void": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addData(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "java.util.List.add(java.lang.Object): boolean",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.ensureDataIsMutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.addMessage(com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$Course.getId(): com.google.gson.functional.TreeTypeAdaptersTest$Id": [],
    "com.google.gson.common.TestTypes$CrazyLongTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.common.TestTypes$CrazyLongTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Long"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomAccessor.toString(): java.lang.String": [],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming(): void": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$Foo.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newSerializer(java.lang.String): com.google.gson.JsonSerializer",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newDeserializer(java.lang.String): com.google.gson.JsonDeserializer",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.isInitialized(): boolean": [],
    "com.google.gson.functional.TreeTypeAdaptersTest$Course.getStudents(): java.util.List": [],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest.testJsonSerializerDeserializerBasedJsonAdapterOnFields(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Computer.\u003cinit\u003e(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.FieldNamingTest.getGsonWithNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.Gson": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.functional.Java17RecordTest.testUnknownJsonProperty(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.Java17RecordTest$3LocalRecord.\u003cinit\u003e(int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.ensureDataIsMutable(): void": [
      "java.util.ArrayList.\u003cinit\u003e(java.util.Collection): void"
    ],
    "com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.MapTest$10.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.MapTest$10.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeToken.getArray(java.lang.reflect.Type): com.google.gson.reflect.TypeToken": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(java.lang.reflect.Type): void",
      "com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type): java.lang.reflect.GenericArrayType"
    ],
    "com.google.gson.internal.bind.TypeAdapters$15.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapterTest$2.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.TypeAdapterTest$2.write(com.google.gson.stream.JsonWriter, java.lang.Integer): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$28.readTerminal(com.google.gson.stream.JsonReader, com.google.gson.stream.JsonToken): com.google.gson.JsonElement": [
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonToken.ordinal(): int",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.Java17RecordTest$2.shouldSkipClass(java.lang.Class): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFieldsOrBuilder.getName(): java.lang.String": [],
    "com.google.gson.common.TestTypes$Base.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordSupportedHelper.getAccessor(java.lang.Class, java.lang.reflect.Field): java.lang.reflect.Method": [
      "java.lang.reflect.Field.getName(): java.lang.String",
      "java.lang.Class.getMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "com.google.gson.internal.reflect.ReflectionHelper.access$300(java.lang.ReflectiveOperationException): java.lang.RuntimeException"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeInstanceCreator.\u003cinit\u003e(java.lang.Object): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testMapSerializationWithNullValues(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.MapTest$ClassWithAMap.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.JsonElement.isJsonObject(): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getCountryCode5F55(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeInstanceCreator.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeInstanceCreator.createInstance(java.lang.reflect.Type): com.google.gson.ParameterizedTypeFixtures$MyParameterizedType"
    ],
    "com.google.gson.internal.PreJava9DateFormatProvider.getDateFormatPattern(int): java.lang.String": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.it.ShrinkingIT.testUnusedClassRemoved(): void": [
      "java.nio.file.Path.equals(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "org.junit.Assume.assumeTrue(boolean): void",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.internal.LinkedTreeMap$EntrySet$1.next(): java.lang.Object": [
      "com.google.gson.internal.LinkedTreeMap$EntrySet$1.next(): java.util.Map$Entry"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictUnquotedNamesWithSkipValue(): void": [
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.GenericArrayTypeTest.setUp(): void": [
      "com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): java.lang.reflect.ParameterizedType",
      "com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type): java.lang.reflect.GenericArrayType"
    ],
    "com.google.gson.functional.ObjectTest.testDateAsMapObjectField(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.matches(java.lang.String): void",
      "java.util.Date.\u003cinit\u003e(long): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.ObjectTest$HasObjectMap.\u003cinit\u003e(): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.example.Main.lambda$testJsonAdapterAnnotation$24(com.google.gson.Gson): java.lang.String": [
      "com.example.ClassWithJsonAdapterAnnotation.\u003cinit\u003e(int, int, int, int): void",
      "com.example.Main.toJson(com.google.gson.Gson, java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest$10LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testArray(): void": [
      "com.google.gson.JsonElement.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields(): void": [
      "com.google.gson.ExposeAnnotationExclusionStrategyTest.createFieldAttributes(java.lang.String): java.lang.reflect.Field",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomAccessor.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.example.Main.lambda$testEnum$18(com.google.gson.Gson): java.lang.String": [
      "com.example.Main.toJson(com.google.gson.Gson, java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter": [
      "java.util.Objects.requireNonNull(java.lang.Object, java.lang.String): java.lang.Object",
      "com.google.gson.stream.JsonWriter.peek(): int",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.String): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(java.lang.reflect.Field): java.util.List": [
      "java.util.ArrayList.\u003cinit\u003e(int): void",
      "com.google.gson.annotations.SerializedName.value(): java.lang.String",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.FieldNamingStrategy.translateName(java.lang.reflect.Field): java.lang.String",
      "com.google.gson.annotations.SerializedName.alternate(): java.lang.String[]",
      "java.util.Collections.singletonList(java.lang.Object): java.util.List",
      "java.util.Collections.addAll(java.util.Collection, java.lang.Object[]): boolean",
      "java.lang.reflect.Field.getAnnotation(java.lang.Class): java.lang.annotation.Annotation"
    ],
    "com.google.gson.JsonArray.getAsBoolean(): boolean": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsBoolean(): boolean"
    ],
    "com.google.gson.ReflectionAccessFilter$FilterResult.$values(): com.google.gson.ReflectionAccessFilter$FilterResult[]": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDataBytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$1.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextNull(): void"
    ],
    "com.google.gson.stream.JsonReader.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.stream.JsonReader.locationString(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$OuterMessage": [],
    "com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.remove(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonObject.has(java.lang.String): boolean",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1LocalRecordSerialization.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonObjectAsInteger$10(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter.toString(): java.lang.String": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.remove(java.lang.Object): boolean": [
      "java.util.ArrayList.remove(java.lang.Object): boolean"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField.readIntoField(com.google.gson.stream.JsonReader, java.lang.Object): void": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory.\u003cinit\u003e(java.lang.Object, com.google.gson.reflect.TypeToken, boolean, java.lang.Class): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing$9.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.util.ISO8601Utils.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.internal.LinkedTreeMap.removeInternalByKey(java.lang.Object): com.google.gson.internal.LinkedTreeMap$Node": [
      "com.google.gson.internal.LinkedTreeMap.removeInternal(com.google.gson.internal.LinkedTreeMap$Node, boolean): void",
      "com.google.gson.internal.LinkedTreeMap.findByObject(java.lang.Object): com.google.gson.internal.LinkedTreeMap$Node"
    ],
    "com.google.gson.ToNumberPolicy$3.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.ToNumberPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.ToNumberPolicy$1): void"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.typeadapters.UtcDateTypeAdapter.read(com.google.gson.stream.JsonReader): java.util.Date"
    ],
    "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.FormattingStyle.getIndent(): java.lang.String": [],
    "com.google.gson.internal.bind.TypeAdapters$8.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$4.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$2DummyAdapter.\u003cinit\u003e(com.google.gson.GsonTest, int): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapter.fromJson(java.io.Reader): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer2.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer2.serialize(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User2, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.ReadersWritersTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addData(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.ensureDataIsMutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.addMessage(com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonBindParser.\u003cclinit\u003e(): void": [
      "com.google.gson.GsonBuilder.setDateFormat(java.lang.String): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson"
    ],
    "com.google.gson.functional.MapTest$MapWithGeneralMapParameters.\u003cinit\u003e(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.extras.examples.rawcollections.RawCollectionsExample$Event.toString(): java.lang.String": [
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest$1Allowed.toString(): java.lang.String": [],
    "com.google.gson.internal.Excluder.excludeClassInStrategy(java.lang.Class, boolean): boolean": [
      "java.util.Iterator.hasNext(): boolean",
      "com.google.gson.ExclusionStrategy.shouldSkipClass(java.lang.Class): boolean",
      "java.util.List.iterator(): java.util.Iterator",
      "java.util.Iterator.next(): java.lang.Object"
    ],
    "com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization(): void": [
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "com.google.common.truth.ObjectArraySubject.asList(): com.google.common.truth.IterableSubject"
    ],
    "com.google.gson.GsonBuilderTest$4.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.GsonBuilderTest$4.serialize(com.google.gson.GsonBuilderTest$CustomClass2, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$12.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.internal.bind.JsonElementReaderTest.testArray(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextInt(): int",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.serialize(com.google.gson.functional.CustomTypeAdaptersTest$StringHolder, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$8.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlDateTypeAdapter.\u003cinit\u003e(): void": [
      "java.text.SimpleDateFormat.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [],
    "com.google.gson.functional.VersioningTest$SinceUntilMixing.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ConstructorConstructorTest.\u003cinit\u003e(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.util.Collections.emptyMap(): java.util.Map",
      "com.google.gson.internal.ConstructorConstructor.\u003cinit\u003e(java.util.Map, boolean, java.util.List): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$PartJsonFieldAnnotationAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$PartJsonFieldAnnotationAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.getOuterMessage(): com.google.gson.protobuf.generated.Bag$OuterMessage": [],
    "com.google.gson.functional.EnumTest$5.\u003cinit\u003e(com.google.gson.functional.EnumTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setData(int, com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "java.util.List.set(int, java.lang.Object): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data",
      "com.google.protobuf.RepeatedFieldBuilderV3.setMessage(int, com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.ensureDataIsMutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.internal.GsonTypesTest$1D.\u003cinit\u003e(com.google.gson.internal.GsonTypesTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$15.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$15.read(com.google.gson.stream.JsonReader): java.lang.String"
    ],
    "com.google.gson.JsonObjectTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.\u003cclinit\u003e(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$StringWrapper.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CustomDeserializerTest$SubTypes.\u003cinit\u003e(java.lang.String, int, java.lang.reflect.Type): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder",
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder"
    ],
    "com.google.gson.internal.bind.TypeAdapters$16.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type): java.lang.Class": [
      "java.lang.reflect.GenericArrayType.getGenericComponentType(): java.lang.reflect.Type",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.reflect.ParameterizedType.getRawType(): java.lang.reflect.Type",
      "com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type): java.lang.Class",
      "java.lang.reflect.WildcardType.getUpperBounds(): java.lang.reflect.Type[]",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean): void",
      "java.lang.reflect.Array.newInstance(java.lang.Class, int): java.lang.Object",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.AssertionError.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.internal.JavaVersionTest.testUnknownVersionFormat(): void": [
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.JavaVersion.getMajorJavaVersion(java.lang.String): int"
    ],
    "com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.JsonPrimitive.getAsInt(): int",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.JsonPrimitive.getAsDouble(): double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.getAsFloat(): float",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Short.valueOf(short): java.lang.Short",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.JsonPrimitive.getAsByte(): byte",
      "com.google.common.truth.FloatSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonPrimitive.getAsLong(): long",
      "com.google.gson.JsonPrimitive.getAsShort(): short",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Float): com.google.common.truth.FloatSubject",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonPrimitive.getAsBigInteger(): java.math.BigInteger",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.getAsBigDecimal(): java.math.BigDecimal",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.util.Date): void"
    ],
    "com.google.gson.reflect.TypeToken.verifyNoTypeVariable(java.lang.reflect.Type): void": [
      "java.lang.reflect.GenericArrayType.getGenericComponentType(): java.lang.reflect.Type",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "java.lang.reflect.WildcardType.getUpperBounds(): java.lang.reflect.Type[]",
      "java.lang.reflect.TypeVariable.getName(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.reflect.WildcardType.getLowerBounds(): java.lang.reflect.Type[]",
      "com.google.gson.reflect.TypeToken.verifyNoTypeVariable(java.lang.reflect.Type): void",
      "java.lang.reflect.TypeVariable.getGenericDeclaration(): java.lang.reflect.GenericDeclaration",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.reflect.ParameterizedType.getOwnerType(): java.lang.reflect.Type",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.internal.TroubleshootingGuide.createUrl(java.lang.String): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.internal.Streams$AppendableWriter.\u003cinit\u003e(java.lang.Appendable): void": [
      "java.io.Writer.\u003cinit\u003e(): void",
      "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite.\u003cinit\u003e(com.google.gson.internal.Streams$1): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Factory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.getMsg(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.ToNumberPolicy.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.MapTest$30.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.equals(java.lang.Object): boolean": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.hasCount(): boolean",
      "com.google.protobuf.GeneratedMessageV3.equals(java.lang.Object): boolean",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.hasMsg(): boolean",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getCount(): int",
      "com.google.protobuf.UnknownFieldSet.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getMsg(): java.lang.String"
    ],
    "com.google.gson.GsonBuilder.setFormattingStyle(com.google.gson.FormattingStyle): com.google.gson.GsonBuilder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$BuiltInOverwriting.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClassJsonAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.toBuilder(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest.testSubSupertype(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type): java.lang.reflect.WildcardType",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type): java.lang.reflect.WildcardType"
    ],
    "com.google.gson.MixedStreamTest.testReadInvalidState(): void": [
      "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.example.Main.lambda$testJsonAdapterAnnotation$25(com.google.gson.Gson, java.lang.String): java.lang.String": [
      "com.example.ClassWithJsonAdapterAnnotation.toString(): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.hasNext(): boolean": [],
    "com.google.gson.GsonBuilderTest.testSetStrictness(): void": [
      "com.google.gson.stream.JsonWriter.getStrictness(): com.google.gson.Strictness",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.setStrictness(com.google.gson.Strictness): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.newJsonReader(java.io.Reader): com.google.gson.stream.JsonReader",
      "com.google.gson.Gson.newJsonWriter(java.io.Writer): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonReader.getStrictness(): com.google.gson.Strictness"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseFrom(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clear(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clear(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.common.TestTypes$BagOfPrimitives.getIntValue(): int": [],
    "com.google.gson.JsonObjectAsMapTest.testContainsKey(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.util.Map.containsKey(java.lang.Object): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.NumberLimitsTest.testLazilyParsedNumber(): void": [
      "java.math.BigDecimal.intValue(): int",
      "java.io.ObjectOutputStream.\u003cinit\u003e(java.io.OutputStream): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.LazilyParsedNumber.intValue(): int",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.io.OutputStream.nullOutputStream(): java.io.OutputStream",
      "java.lang.String.repeat(int): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$14.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testNullArraysDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "com.google.common.truth.ObjectArraySubject.isNull(): void"
    ],
    "com.google.gson.GsonTest$11.read(com.google.gson.stream.JsonReader): com.google.gson.GsonTest$CustomClass1": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.it.ShrinkingIT.testNoSerializedName_NoArgsConstructorNoJdkUnsafe(): void": [
      "com.google.gson.it.ShrinkingIT.runTest(java.lang.String, com.google.gson.it.ShrinkingIT$TestAction): void"
    ],
    "com.google.gson.ReflectionAccessFilter$4.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [
      "com.google.gson.internal.ReflectionAccessFilterHelper.isAnyPlatformType(java.lang.Class): boolean"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testTypeTokenSubSubClass$16(): void": [
      "com.google.gson.reflect.TypeTokenTest$1SubSubTypeToken2.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void"
    ],
    "com.google.gson.MockExclusionStrategy.shouldSkipClass(java.lang.Class): boolean": [],
    "com.google.gson.stream.JsonReaderPathTest.multipleTopLevelValuesInOneDocument(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assume.assumeTrue(boolean): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String"
    ],
    "com.google.gson.native_test.ReflectionTest.testSerializedName(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.native_test.ReflectionTest$ClassWithSerializedName.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$CEO.\u003cinit\u003e(): void": [
      "com.google.gson.functional.TypeHierarchyAdapterTest$Manager.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$22.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$22.read(com.google.gson.stream.JsonReader): java.net.URI"
    ],
    "com.google.gson.JsonArrayAsListTest.testAdd(): void": [
      "com.google.gson.JsonArray.asList(): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.util.List.add(java.lang.Object): boolean",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.List.add(int, java.lang.Object): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.$Gson$Types.\u003cclinit\u003e(): void": [
      "java.lang.Class.desiredAssertionStatus(): boolean"
    ],
    "com.google.gson.JsonObject.size(): int": [
      "com.google.gson.internal.LinkedTreeMap.size(): int"
    ],
    "com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization(): void": [
      "com.google.gson.functional.VersioningTest.gsonWithVersion(double): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.JsonTreeReader$1.\u003cinit\u003e(): void": [
      "java.io.Reader.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DelegateTypeAdapterTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "com.google.gson.functional.DelegateTypeAdapterTest$StatsTypeAdapterFactory.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InheritanceTest$SubTypeOfNested.appendFields(java.lang.StringBuilder): void": [
      "java.lang.StringBuilder.append(long): java.lang.StringBuilder",
      "com.google.gson.common.TestTypes$Nested.appendFields(java.lang.StringBuilder): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setData(java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.onChanged(): void"
    ],
    "com.google.gson.JsonObjectAsMapTest.testValues(): void": [
      "java.util.Collection.add(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonObject.size(): int",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.Ordered.inOrder(): void",
      "java.util.Map.values(): java.util.Collection",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.util.Collection.remove(java.lang.Object): boolean",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "java.util.ArrayList.\u003cinit\u003e(java.util.Collection): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.Collections.singletonList(java.lang.Object): java.util.List",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$ClassWithCustomTypeConverter": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.JsonElement.getAsInt(): int",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$LongToStringTypeAdapterFactory$1.read(com.google.gson.stream.JsonReader): java.lang.Long": [
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "java.lang.Long.valueOf(long): java.lang.Long"
    ],
    "com.google.gson.functional.MapTest$11.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$8.read(com.google.gson.stream.JsonReader): java.lang.String": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getMonth(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.valueOf(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.forNumber(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type"
    ],
    "com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization(): void": [
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.Java17RecordTest$1Allowed.hashCode(): int": [],
    "com.google.gson.metrics.ParseBenchmark$GsonBindParser.parse(char[], com.google.gson.metrics.ParseBenchmark$Document): void": [
      "java.io.CharArrayReader.\u003cinit\u003e(char[]): void",
      "com.google.gson.metrics.ParseBenchmark$Document.access$700(com.google.gson.metrics.ParseBenchmark$Document): com.google.gson.reflect.TypeToken",
      "com.google.gson.Gson.fromJson(java.io.Reader, com.google.gson.reflect.TypeToken): java.lang.Object"
    ],
    "com.google.gson.internal.bind.TypeAdapters$9.write(com.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicBoolean): void": [
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.util.concurrent.atomic.AtomicBoolean.get(): boolean"
    ],
    "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.\u003cinit\u003e(com.google.gson.internal.bind.MapTypeAdapterFactory, com.google.gson.Gson, java.lang.reflect.Type, com.google.gson.TypeAdapter, java.lang.reflect.Type, com.google.gson.TypeAdapter, com.google.gson.internal.ObjectConstructor): void": [
      "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.\u003cinit\u003e(com.google.gson.Gson, com.google.gson.TypeAdapter, java.lang.reflect.Type): void",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlTypesSupport.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.sql.SqlTypesSupport$1.\u003cinit\u003e(java.lang.Class): void",
      "java.lang.Class.forName(java.lang.String): java.lang.Class",
      "com.google.gson.internal.sql.SqlTypesSupport$2.\u003cinit\u003e(java.lang.Class): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$MyClassTypeAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1Blocked.toString(): java.lang.String": [],
    "com.google.gson.interceptors.InterceptorFactory$InterceptorAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAllowed(): void": [
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.Ordered.inOrder(): void",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseFrom(byte[]): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.Parser.parseFrom(byte[]): java.lang.Object"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testPutNullValue(): void": [
      "com.google.gson.internal.LinkedTreeMap.containsValue(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.LinkedTreeMap.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.internal.LinkedTreeMap.containsKey(java.lang.Object): boolean",
      "com.google.common.truth.StringSubject.isNull(): void",
      "com.google.common.truth.MapSubject.hasSize(int): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.NullObjectAndFieldTest$ObjectWithField": [
      "com.google.gson.JsonDeserializationContext.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.internal.ConstructorConstructor$3.construct(): java.lang.Object": [
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testCharacterUnescaping(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.FormattingStyleTest$1.\u003cinit\u003e(com.google.gson.functional.FormattingStyleTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter.read(com.google.gson.stream.JsonReader): java.util.Date"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.net.URL.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$1.\u003cinit\u003e(): void": [
      "com.google.protobuf.AbstractParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson.doubleAdapter(boolean): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson$1.\u003cinit\u003e(com.google.gson.Gson): void"
    ],
    "com.google.gson.functional.MapTest.testInterfaceTypeMap(): void": [
      "com.google.gson.GsonBuilder.enableComplexMapKeySerialization(): com.google.gson.GsonBuilder",
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.MapTest$MapClass.addSub(java.lang.String, com.google.gson.common.TestTypes$Sub): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$MapClass.addBase(java.lang.String, com.google.gson.common.TestTypes$Base): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.MapTest$MapClass.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1EmptyRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testSerializeCollidingTypeFieldName(): void": [
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class, java.lang.String): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "org.junit.Assert.fail(): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$CreditCard.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonObjectAsBytePrimitive$17(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.InternationalizationTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$Node.hashCode(): int": [
      "java.lang.Object.hashCode(): int"
    ],
    "com.google.gson.internal.bind.TypeAdapters$26.read(com.google.gson.stream.JsonReader): java.util.Calendar": [
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.String.equals(java.lang.Object): boolean",
      "java.util.GregorianCalendar.\u003cinit\u003e(int, int, int, int, int, int): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, com.google.gson.FieldNamingStrategy, com.google.gson.internal.Excluder, com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory, java.util.List): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.VersionExclusionStrategyTest.testNewerVersion(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.internal.Excluder.withVersion(double): com.google.gson.internal.Excluder",
      "com.google.gson.internal.Excluder.excludeClass(java.lang.Class, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Class.getField(java.lang.String): java.lang.reflect.Field"
    ],
    "com.google.gson.reflect.TypeToken.getTypeTokenTypeArgument(): java.lang.reflect.Type": [
      "java.lang.Class.getGenericSuperclass(): java.lang.reflect.Type",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.reflect.ParameterizedType.getRawType(): java.lang.reflect.Type",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type): java.lang.reflect.Type",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.reflect.TypeToken.isCapturingTypeVariablesForbidden(): boolean",
      "com.google.gson.internal.TroubleshootingGuide.createUrl(java.lang.String): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.reflect.TypeToken.verifyNoTypeVariable(java.lang.reflect.Type): void",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.annotations.Since.value(): double": [],
    "com.google.gson.functional.ObjectTest$Superclass2.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearOuterMessage(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.protobuf.SingleFieldBuilderV3.clear(): com.google.protobuf.SingleFieldBuilderV3"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$6.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.example.GenericClasses$GenericClass.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.hasInnerMessage1(): boolean": [],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testObject(): void": [
      "com.google.gson.JsonElement.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper.isAndroidType(java.lang.String): boolean": [
      "java.lang.String.startsWith(java.lang.String): boolean",
      "com.google.gson.internal.ReflectionAccessFilterHelper.isJavaType(java.lang.String): boolean"
    ],
    "com.google.gson.internal.reflect.Java17ReflectionHelperTest$PrincipalImpl.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithRegisteredAdapter.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Element.read(com.google.gson.graph.GraphAdapterBuilder$Graph): void": [
      "com.google.gson.graph.GraphAdapterBuilder$Graph.access$702(com.google.gson.graph.GraphAdapterBuilder$Graph, com.google.gson.graph.GraphAdapterBuilder$Element): com.google.gson.graph.GraphAdapterBuilder$Element",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.graph.GraphAdapterBuilder$Graph.access$700(com.google.gson.graph.GraphAdapterBuilder$Graph): com.google.gson.graph.GraphAdapterBuilder$Element",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.TypeAdapter.fromJsonTree(com.google.gson.JsonElement): java.lang.Object",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.Java17RecordTest$4LocalRecord.a(): java.lang.Integer": [],
    "com.google.gson.stream.JsonReaderTest.testSetStrictnessNull(): void": [
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void"
    ],
    "com.google.gson.JsonObjectAsMapTest.testKeySet(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.util.Collections.singleton(java.lang.Object): java.util.Set",
      "java.util.Map.keySet(): java.util.Set",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.common.truth.Ordered.inOrder(): void",
      "com.google.gson.JsonObject.keySet(): java.util.Set",
      "org.junit.Assert.fail(): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "java.util.Set.add(java.lang.Object): boolean",
      "java.util.Set.remove(java.lang.Object): boolean",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithSerializedName.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.StringBuffer.toString(): java.lang.String"
    ],
    "com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.ExposeFieldsTest$ClassWithNoExposedFields.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.\u003cinit\u003e(): void": [
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.\u003cinit\u003e(java.lang.Number, java.lang.Number[], java.util.List, java.util.List[], java.util.List, java.util.List[]): void"
    ],
    "com.google.gson.ToNumberPolicyTest.lambda$testNullsAreNeverExpected$10(): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberPolicy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDataList(): java.util.List": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setData(int, com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "java.util.List.set(int, java.lang.Object): java.lang.Object",
      "com.google.protobuf.RepeatedFieldBuilderV3.setMessage(int, com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.ensureDataIsMutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.getOuterMessageOrBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder": [],
    "com.google.gson.FieldNamingPolicy$1.translateName(java.lang.reflect.Field): java.lang.String": [
      "java.lang.reflect.Field.getName(): java.lang.String"
    ],
    "com.google.gson.functional.EnumTest$6.\u003cinit\u003e(com.google.gson.functional.EnumTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement, java.lang.Appendable): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.\u003cclinit\u003e(): void": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$1.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$1.\u003cinit\u003e(com.google.gson.functional.DefaultTypeAdaptersTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderPathTest.arrayPath(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.close(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.LinkedTreeMap.get(java.lang.Object): java.lang.Object",
      "java.lang.Integer.toString(int, int): java.lang.String",
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.Random.nextInt(): int",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.util.Random.\u003cinit\u003e(long): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.internal.LinkedTreeMap.containsKey(java.lang.Object): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.internal.UnsafeAllocator.assertInstantiable(java.lang.Class): void": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.ConstructorConstructor.checkInstantiable(java.lang.Class): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testDelegatingAdapterFactory(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory.\u003cinit\u003e(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$6.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.FieldNamingTest.testUpperCamelCase(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.FieldNamingTest.getGsonWithNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.FieldNamingTest$TestNames.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.JsonObject.deepCopy(): com.google.gson.JsonObject": [
      "com.google.gson.JsonElement.deepCopy(): com.google.gson.JsonElement",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.entrySet(): java.util.Set",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Set.iterator(): java.util.Iterator",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A$JsonAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String"
    ],
    "com.google.gson.typeadapters.PostConstructAdapterFactory$PostConstructAdapter.\u003cinit\u003e(com.google.gson.TypeAdapter, java.lang.reflect.Method): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$11.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest$Company.\u003cinit\u003e(java.lang.String): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipValueAtArrayEnd(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.hasMsg(): boolean": [],
    "com.google.gson.functional.CustomSerializerTest$1.\u003cinit\u003e(com.google.gson.functional.CustomSerializerTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testNumberSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.MapTest.testMapDeserializationWithNullValue(): void": [
      "com.google.gson.functional.MapTest$6.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.IntegerSubject.isNull(): void",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "com.google.gson.functional.MapTest$6.getType(): java.lang.reflect.Type",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.example.EnumClass.\u003cclinit\u003e(): void": [
      "com.example.EnumClass.\u003cinit\u003e(java.lang.String, int): void",
      "com.example.EnumClass.$values(): com.example.EnumClass[]"
    ],
    "com.google.gson.it.ShrinkingIT.lambda$testNoSerializedName_NoArgsConstructorNoJdkUnsafe$4(java.lang.reflect.Method): void": [
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object"
    ],
    "com.google.gson.internal.$Gson$Types$WildcardTypeImpl.getUpperBounds(): java.lang.reflect.Type[]": [],
    "com.google.gson.FieldAttributes.getDeclaringClass(): java.lang.Class": [
      "java.lang.reflect.Field.getDeclaringClass(): java.lang.Class"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter.newTypeHierarchyFactory(java.lang.Class, java.lang.Object): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory.\u003cinit\u003e(java.lang.Object, com.google.gson.reflect.TypeToken, boolean, java.lang.Class): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasInnerMessage1(): boolean": [],
    "com.google.gson.GsonTest$8.\u003cinit\u003e(com.google.gson.GsonTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.hasId(): boolean": [],
    "com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.FieldNamingTest.getGsonWithNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.FieldNamingTest$TestNames.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.JsonParserTest$2.\u003cinit\u003e(com.google.gson.functional.JsonParserTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$ClassOverridingEquals.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testBigDecimalAdapter$12(com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Computer.\u003cinit\u003e(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$Square.\u003cinit\u003e(int): void": [
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$Shape.\u003cinit\u003e(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType): void"
    ],
    "com.google.gson.functional.InstanceCreatorTest$6.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest.createGson(com.google.gson.ExclusionStrategy, boolean): com.google.gson.Gson",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest$MyExclusionStrategy.\u003cinit\u003e(java.lang.Class): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.ToNumberPolicyTest.testNullsAreNeverExpected(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonReader.nextString(): java.lang.String": [
      "com.google.gson.stream.JsonReader.nextQuotedValue(char): java.lang.String",
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.nextUnquotedValue(): java.lang.String",
      "com.google.gson.stream.JsonReader.doPeek(): int",
      "java.lang.String.\u003cinit\u003e(char[], int, int): void",
      "java.lang.Long.toString(long): java.lang.String"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing.lambda$test$4(): void": [
      "com.google.gson.reflect.TypeTokenTest$1Enclosing$5.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void"
    ],
    "com.google.gson.functional.UncategorizedTest$OperationType.$values(): com.google.gson.functional.UncategorizedTest$OperationType[]": [],
    "com.example.Main.lambda$testConstructorHasArgs$11(com.google.gson.Gson): java.lang.String": [
      "com.example.Main.toJson(com.google.gson.Gson, java.lang.Object): java.lang.String",
      "com.example.ClassWithHasArgsConstructor.\u003cinit\u003e(int): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$ClassWithObjectsSerializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.NullObjectAndFieldTest$ClassWithObjectsSerializer.serialize(com.google.gson.common.TestTypes$ClassWithObjects, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormatOrBuilder.getNameThatTestsCaseFormatBytes(int): com.google.protobuf.ByteString": [],
    "com.google.gson.FieldNamingPolicyTest$1Dummy.\u003cinit\u003e(com.google.gson.FieldNamingPolicyTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.ClassWithHasArgsConstructor.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$CustomToString.toString(): java.lang.String": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testDoubles(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.JsonObject.getAsJsonArray(java.lang.String): com.google.gson.JsonArray": [
      "com.google.gson.internal.LinkedTreeMap.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.peekStack(): java.lang.Object": [],
    "com.example.EnumClassWithSerializedName.valueOf(java.lang.String): com.example.EnumClassWithSerializedName": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.internal.bind.TypeAdapters$21.read(com.google.gson.stream.JsonReader): java.net.URL": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.String.equals(java.lang.Object): boolean",
      "java.net.URL.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.example.NoSerializedNameMain$TestClassNoArgsConstructor.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ExposeFieldsTest$ClassWithExposedFields.\u003cinit\u003e(java.lang.Integer, java.lang.Integer, long, double, char): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest.testJsonSerializer(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$1.\u003cinit\u003e(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Container.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.internal.Streams.write(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.functional.EnumTest$MyEnum.values(): com.google.gson.functional.EnumTest$MyEnum[]": [
      "[Lcom.google.gson.functional.EnumTest$MyEnum;.clone(): java.lang.Object"
    ],
    "com.google.gson.functional.ReflectionAccessTest.testRestrictiveSecurityManager(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.ReflectionAccessTest$2.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessTest, java.util.concurrent.atomic.AtomicBoolean): void",
      "java.lang.reflect.ReflectPermission.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.functional.ReflectionAccessTest$1.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessTest, java.security.Permission, java.security.Permission): void",
      "java.lang.System.getSecurityManager(): java.lang.SecurityManager",
      "java.lang.RuntimePermission.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "java.util.concurrent.atomic.AtomicBoolean.get(): boolean",
      "com.google.gson.functional.ReflectionAccessTest.loadClassWithDifferentClassLoader(java.lang.Class): java.lang.Class",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.System.setSecurityManager(java.lang.SecurityManager): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.util.concurrent.atomic.AtomicBoolean.\u003cinit\u003e(boolean): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.GsonTest$8.createInstance(java.lang.reflect.Type): com.google.gson.GsonTest$CustomClass3": [
      "com.google.gson.GsonTest$CustomClass3.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.GsonBuilderTest$3.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.GsonBuilderTest$3.read(com.google.gson.stream.JsonReader): com.google.gson.GsonBuilderTest$CustomClass1"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$Shape.\u003cinit\u003e(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testArraysInObjects(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getUnknownFields(): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.functional.JsonParserTest.testDeserializingCustomTree(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.TypeAdapters$8.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$8.write(com.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicInteger): void"
    ],
    "com.google.gson.functional.NamingPolicyTest$ClassWithDuplicateFields.\u003cinit\u003e(java.lang.Double): void": [
      "com.google.gson.functional.NamingPolicyTest$ClassWithDuplicateFields.\u003cinit\u003e(java.lang.Integer, java.lang.Double): void"
    ],
    "com.google.gson.internal.LinkedTreeMap.rotateLeft(com.google.gson.internal.LinkedTreeMap$Node): void": [
      "java.lang.Math.max(int, int): int",
      "com.google.gson.internal.LinkedTreeMap.replaceInParent(com.google.gson.internal.LinkedTreeMap$Node, com.google.gson.internal.LinkedTreeMap$Node): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter.equals(java.lang.Object): boolean": [],
    "com.google.gson.reflect.GenericWithMultiBound.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.getValue(): java.lang.Object": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.isInitialized(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFieldsOrBuilder.getSimples(int): com.google.gson.protobuf.generated.Bag$SimpleProto": [],
    "com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.serializeSpecialFloatingPointValues(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map): boolean": [
      "java.lang.Class.getGenericSuperclass(): java.lang.reflect.Type",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "com.google.gson.reflect.TypeToken.typeEquals(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType, java.util.Map): boolean",
      "java.util.HashMap.\u003cinit\u003e(java.util.Map): void",
      "java.lang.Class.getTypeParameters(): java.lang.reflect.TypeVariable[]",
      "com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type): java.lang.Class",
      "java.lang.reflect.TypeVariable.getName(): java.lang.String",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map): boolean",
      "java.lang.Class.getGenericInterfaces(): java.lang.reflect.Type[]",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseFrom(com.google.protobuf.CodedInputStream): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.buildPartial(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$SimpleProto"
    ],
    "com.google.gson.internal.$Gson$Preconditions.\u003cinit\u003e(): void": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$8.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.ReflectionAccessFilterTest$ClassWithoutNoArgsConstructor): void": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$DataHolder.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderWrapper.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest$DataHolder): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderSerializer.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [],
    "com.google.gson.metrics.ParseBenchmark$Api$5.newParser(): com.google.gson.metrics.ParseBenchmark$Parser": [
      "com.google.gson.metrics.ParseBenchmark$GsonDomParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.stream.JsonReaderTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonArrayAsBigDecimal$21(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api.values(): com.google.gson.metrics.ParseBenchmark$Api[]": [
      "[Lcom.google.gson.metrics.ParseBenchmark$Api;.clone(): java.lang.Object"
    ],
    "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void": [
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(java.util.Comparator, boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getUnknownFields(): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void": [
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.internal.bind.JsonTreeReader.push(java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$PartJsonFieldAnnotationAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest.testPrimitiveJsonNullValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByInstanceCreator.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientSemicolonDelimitedNameValuePair(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.ToNumberPolicy$3.readNumber(com.google.gson.stream.JsonReader): java.lang.Number": [
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Double.valueOf(java.lang.String): java.lang.Double",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "java.lang.Double.isInfinite(): boolean",
      "java.lang.Double.isNaN(): boolean",
      "com.google.gson.stream.MalformedJsonException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.lang.Long.parseLong(java.lang.String): long",
      "com.google.gson.stream.JsonReader.isLenient(): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User2.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNameAsTopLevelValue$1(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.read(com.google.gson.stream.JsonReader): java.util.Date": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.deserialize(java.util.Date): java.util.Date",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter.deserializeToDate(com.google.gson.stream.JsonReader): java.util.Date",
      "com.google.gson.stream.JsonReader.nextNull(): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest$DataHolder.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(com.google.gson.Gson, java.lang.reflect.Field, java.lang.reflect.Method, java.lang.String, com.google.gson.reflect.TypeToken, boolean, boolean): com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField": [
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory, java.lang.String, java.lang.reflect.Field, boolean, java.lang.reflect.Method, com.google.gson.TypeAdapter, com.google.gson.TypeAdapter, boolean, boolean): void",
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, com.google.gson.Gson, com.google.gson.reflect.TypeToken, com.google.gson.annotations.JsonAdapter, boolean): com.google.gson.TypeAdapter",
      "com.google.gson.internal.Primitives.isPrimitive(java.lang.reflect.Type): boolean",
      "java.lang.reflect.Modifier.isFinal(int): boolean",
      "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.\u003cinit\u003e(com.google.gson.Gson, com.google.gson.TypeAdapter, java.lang.reflect.Type): void",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "java.lang.reflect.Modifier.isStatic(int): boolean",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "java.lang.reflect.Field.getModifiers(): int",
      "java.lang.reflect.Field.getAnnotation(java.lang.Class): java.lang.annotation.Annotation"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeInnerMessage1(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.SingleFieldBuilderV3.mergeFrom(com.google.protobuf.AbstractMessage): com.google.protobuf.SingleFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilder(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getParserForType(): com.google.protobuf.Parser": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Computer2.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JavaSerializationTest.testListIsSerializable(): void": [
      "com.google.gson.JavaSerializationTest.serializedCopy(java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JavaSerializationTest$2.\u003cinit\u003e(com.google.gson.JavaSerializationTest): void",
      "com.google.gson.JavaSerializationTest$2.getType(): java.lang.reflect.Type",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral(): void": [
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.io.Reader, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getWidth(): int": [],
    "com.google.gson.it.ShrinkingIT$TestAction.run(java.lang.Class): void": [],
    "com.google.gson.functional.ObjectTest.testInnerClassSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.functional.ObjectTest$Parent.\u003cinit\u003e(): void",
      "com.google.gson.functional.ObjectTest$Parent$Child.\u003cinit\u003e(com.google.gson.functional.ObjectTest$Parent): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ExposeFieldsTest$ClassWithExposedFields.getExpectedJson(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(double): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.FieldAttributesTest.testNullField(): void": [
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.FieldAttributes.\u003cinit\u003e(java.lang.reflect.Field): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseFrom(byte[]): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.Parser.parseFrom(byte[]): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.internal.sql.SqlDateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.sql.Date): void": [
      "java.text.DateFormat.format(java.util.Date): java.lang.String",
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter"
    ],
    "com.example.Main.lambda$testEnumSerializedName$21(com.google.gson.Gson): java.lang.String": [
      "com.example.EnumClassWithSerializedName.toString(): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.internal.bind.MapTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.\u003cinit\u003e(com.google.gson.internal.bind.MapTypeAdapterFactory, com.google.gson.Gson, java.lang.reflect.Type, com.google.gson.TypeAdapter, java.lang.reflect.Type, com.google.gson.TypeAdapter, com.google.gson.internal.ObjectConstructor): void",
      "com.google.gson.internal.bind.MapTypeAdapterFactory.getKeyAdapter(com.google.gson.Gson, java.lang.reflect.Type): com.google.gson.TypeAdapter",
      "com.google.gson.internal.ConstructorConstructor.get(com.google.gson.reflect.TypeToken): com.google.gson.internal.ObjectConstructor",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "com.google.gson.internal.$Gson$Types.getMapKeyAndValueTypes(java.lang.reflect.Type, java.lang.Class): java.lang.reflect.Type[]"
    ],
    "com.google.gson.internal.bind.TypeAdapters$19.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$19.read(com.google.gson.stream.JsonReader): java.lang.StringBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder.hasContent(): boolean": [],
    "com.google.gson.stream.JsonReaderTest.testLongLargerThanMinLongThatWrapsAround(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$700(com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.JsonNullTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.EnumClassWithSerializedName.values(): com.example.EnumClassWithSerializedName[]": [
      "[Lcom.example.EnumClassWithSerializedName;.clone(): java.lang.Object"
    ],
    "com.google.gson.stream.JsonWriter.setHtmlSafe(boolean): void": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getOuterMessageOrBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.functional.CustomSerializerTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictNonExecutePrefixWithSkipValue(): void": [
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.GsonTest$1.translateName(java.lang.reflect.Field): java.lang.String": [],
    "com.google.gson.ToNumberPolicyTest.lambda$testDouble$1(com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.JsonArrayTest.testMixedPrimitiveAddition(): void": [
      "com.google.gson.JsonArray.toString(): java.lang.String",
      "java.math.BigInteger.valueOf(long): java.math.BigInteger",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.JsonArray.add(java.lang.Character): void",
      "com.google.gson.JsonArray.add(java.lang.String): void",
      "com.google.gson.JsonArray.add(java.lang.Boolean): void",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonArray.size(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.stream.JsonReaderTest.testFailWithPositionOverCStyleComment(): void": [
      "com.google.gson.stream.JsonReaderTest.testFailWithPosition(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testExcludeDeserializePrecedence(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.IntegerSubject.isNull(): void",
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$DelegatingAndOverwriting.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.addDeserializationExclusionStrategy(com.google.gson.ExclusionStrategy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$3.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomConstructor.toString(): java.lang.String": [],
    "com.google.gson.GsonTypeAdapterTest$1.\u003cinit\u003e(com.google.gson.GsonTypeAdapterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$DataOrBuilder.getWidth(): int": [],
    "com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.math.BigInteger.toString(): java.lang.String"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$3.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseDelimitedFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.interceptors.InterceptorTest$4.write(com.google.gson.stream.JsonWriter, com.google.gson.interceptors.InterceptorTest$User): void": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.consumeNonExecutePrefix(): void": [
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean",
      "com.google.gson.stream.JsonReader.nextNonWhitespace(boolean): int"
    ],
    "com.google.gson.annotations.JsonAdapter.value(): java.lang.Class": [],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteNumbersWhenStrict$22(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomFieldAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.native_test.ReflectionTest$ClassWithCustomFieldAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): java.lang.Integer"
    ],
    "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.GenericArrayType): boolean": [
      "java.lang.reflect.GenericArrayType.getGenericComponentType(): java.lang.reflect.Type",
      "java.lang.Class.isArray(): boolean",
      "java.lang.Class.getComponentType(): java.lang.Class",
      "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map): boolean",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest.testOverridesDefaultExcluder(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.Gson.\u003cinit\u003e(com.google.gson.internal.Excluder, com.google.gson.FieldNamingStrategy, java.util.Map, boolean, boolean, boolean, boolean, com.google.gson.FormattingStyle, com.google.gson.Strictness, boolean, boolean, com.google.gson.LongSerializationPolicy, java.lang.String, int, int, java.util.List, java.util.List, java.util.List, com.google.gson.ToNumberStrategy, com.google.gson.ToNumberStrategy, java.util.List): void",
      "com.google.gson.Gson.fieldNamingStrategy(): com.google.gson.FieldNamingStrategy",
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.htmlSafe(): boolean",
      "com.google.gson.Gson.serializeNulls(): boolean",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.InterceptorTest$AddressValidator.postDeserialize(java.lang.Object): void": [
      "com.google.gson.interceptors.InterceptorTest$AddressValidator.postDeserialize(com.google.gson.interceptors.InterceptorTest$Address): void"
    ],
    "com.google.gson.JsonPrimitiveTest.testNulls(): void": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Character): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter.i(): int": [],
    "com.google.gson.Gson$2.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.lang.Number.floatValue(): float",
      "com.google.gson.Gson.checkValidFloatingPoint(double): void",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.access$1300(): boolean": [],
    "com.example.ClassWithJsonAdapterAnnotation.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [],
    "com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.lang.Character.charValue(): char"
    ],
    "com.google.gson.functional.EnumWithObfuscatedTest$Gender.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.EnumWithObfuscatedTest$Gender.$values(): com.google.gson.functional.EnumWithObfuscatedTest$Gender[]",
      "com.google.gson.functional.EnumWithObfuscatedTest$Gender.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Parser.parse(char[], com.google.gson.metrics.ParseBenchmark$Document): void": [],
    "com.google.gson.MixedStreamTest.testReadNulls(): void": [
      "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.ToNumberPolicy$1.readNumber(com.google.gson.stream.JsonReader): java.lang.Double": [
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.buildPartial(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest.testSkipValue_atObjectEnd(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.beginObject(): void",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.skipValue(): void"
    ],
    "com.google.gson.functional.DelegateTypeAdapterTest$StatsTypeAdapterFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeInstanceCreator.createInstance(java.lang.reflect.Type): com.google.gson.ParameterizedTypeFixtures$MyParameterizedType": [
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Computer.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder.getDataOrBuilder(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$DataOrBuilder": [],
    "com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization(): void": [
      "com.google.gson.functional.VersioningTest.gsonWithVersion(double): com.google.gson.Gson",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.functional.VersioningTest$SinceUntilMixing.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$StringWrapper.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomAccessor.equals(java.lang.Object): boolean": [],
    "com.google.gson.internal.sql.SqlTypesGsonTest.testNullSerializationAndDeserialization(): void": [
      "com.google.gson.internal.sql.SqlTypesGsonTest.testNullSerializationAndDeserialization(java.lang.Class): void"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.remove(int): java.lang.Object": [
      "java.util.ArrayList.remove(int): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void"
    ],
    "com.google.gson.stream.JsonReader.\u003cclinit\u003e(): void": [
      "com.google.gson.stream.JsonReader$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$ClassExtendingJdkClass.\u003cinit\u003e(): void": [
      "java.io.Reader.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilderTest.testDisableJdkUnsafe(): void": [
      "com.google.gson.GsonBuilder.disableJdkUnsafe(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.EnumTest$Roshambo.defeats(): com.google.gson.functional.EnumTest$Roshambo": [],
    "com.google.gson.typeadapters.UtcDateTypeAdapterTest.testUtcWithJdk7Default(): void": [
      "java.text.SimpleDateFormat.\u003cinit\u003e(java.lang.String, java.util.Locale): void",
      "java.text.SimpleDateFormat.setTimeZone(java.util.TimeZone): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "java.text.SimpleDateFormat.format(java.util.Date): java.lang.String",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Date.getTime(): long",
      "java.util.Date.\u003cinit\u003e(): void",
      "org.junit.Assert.assertEquals(long, long): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testOverrides(): void": [
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.common.MoreAsserts.assertOverridesMethods(java.lang.Class, java.lang.Class, java.util.List): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.native_test.ReflectionTest.testCustomClassAdapter(): void": [
      "com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter.\u003cinit\u003e(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLongArrayWithStringSerializationPolicy(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.util.concurrent.atomic.AtomicLongArray.length(): int",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "java.util.concurrent.atomic.AtomicLongArray.get(int): long",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.GsonBuilder.setLongSerializationPolicy(com.google.gson.LongSerializationPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.TypeAdapters$27.read(com.google.gson.stream.JsonReader): java.util.Locale": [
      "java.util.Locale.\u003cinit\u003e(java.lang.String, java.lang.String, java.lang.String): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.util.Locale.\u003cinit\u003e(java.lang.String, java.lang.String): void",
      "java.util.StringTokenizer.hasMoreElements(): boolean",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.util.Locale.\u003cinit\u003e(java.lang.String): void",
      "java.util.StringTokenizer.\u003cinit\u003e(java.lang.String, java.lang.String): void",
      "java.util.StringTokenizer.nextToken(): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$12.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$12.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictNonFiniteDoublesWithSkipValue(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testPeekLongMaxValue(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault(): void": [
      "org.junit.Assert.fail(java.lang.String): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$12.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setInnerMessage1(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.protobuf.SingleFieldBuilderV3.setMessage(com.google.protobuf.AbstractMessage): com.google.protobuf.SingleFieldBuilderV3"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.Parser.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilderForType(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilderForType(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.FormattingStyleTest.toJson(java.lang.Object, com.google.gson.FormattingStyle): java.lang.String": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.GsonBuilder.setFormattingStyle(com.google.gson.FormattingStyle): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.constructorToString(java.lang.reflect.Constructor): java.lang.String": [
      "java.lang.reflect.Constructor.getDeclaringClass(): java.lang.Class",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Class.getName(): java.lang.String",
      "com.google.gson.internal.reflect.ReflectionHelper.appendExecutableParameters(java.lang.reflect.AccessibleObject, java.lang.StringBuilder): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.maybeForceBuilderInitialization(): void": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.access$000(): boolean"
    ],
    "com.google.gson.reflect.TypeTokenTest$2.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$MyEnumTypeAdapter.serialize(com.google.gson.functional.EnumTest$Roshambo, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.EnumTest$Roshambo.name(): java.lang.String",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.internal.LinkedTreeMap$Node.first(): com.google.gson.internal.LinkedTreeMap$Node": [],
    "com.google.gson.typeadapters.UtcDateTypeAdapter.format(java.util.Date, boolean, java.util.TimeZone): java.lang.String": [
      "java.util.TimeZone.getRawOffset(): int",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.util.GregorianCalendar.\u003cinit\u003e(java.util.TimeZone, java.util.Locale): void",
      "java.util.TimeZone.getOffset(long): int",
      "java.util.Calendar.getTimeInMillis(): long",
      "java.lang.String.length(): int",
      "java.util.Calendar.get(int): int",
      "java.lang.Math.abs(int): int",
      "java.lang.StringBuilder.\u003cinit\u003e(int): void",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.util.Calendar.setTime(java.util.Date): void",
      "com.google.gson.typeadapters.UtcDateTypeAdapter.padInt(java.lang.StringBuilder, int, int): void"
    ],
    "com.google.gson.metrics.PerformanceTest.testByteArraySerialization(): void": [
      "java.io.PrintStream.printf(java.lang.String, java.lang.Object[]): java.io.PrintStream",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$2.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$ClassWithPrivateNoArgsConstructor.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.typeadapters.PostConstructAdapterFactoryTest$MultipleSandwiches.equals(java.lang.Object): boolean": [
      "java.util.List.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest.testAsDoubles(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.setObjectToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.GsonBuilder.setNumberToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.InstanceCreatorTest$1SubArrayList.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(com.google.gson.stream.JsonReader): java.util.Collection": [
      "java.util.Collection.add(java.lang.Object): boolean",
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.ObjectConstructor.construct(): java.lang.Object",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$1.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getContent(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.valueOf(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordNotSupportedHelper.isRecord(java.lang.Class): boolean": [],
    "com.google.gson.functional.ReflectionAccessFilterTest$13.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesOrBuilderList(): java.util.List": [
      "com.google.protobuf.RepeatedFieldBuilderV3.getMessageOrBuilderList(): java.util.List",
      "java.util.Collections.unmodifiableList(java.util.List): java.util.List"
    ],
    "com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.Excluder.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.internal.Excluder.excludeClassChecks(java.lang.Class): boolean",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.internal.Excluder$1.\u003cinit\u003e(com.google.gson.internal.Excluder, boolean, boolean, com.google.gson.Gson, com.google.gson.reflect.TypeToken): void",
      "com.google.gson.internal.Excluder.excludeClassInStrategy(java.lang.Class, boolean): boolean"
    ],
    "com.google.gson.Gson.toJson(java.lang.Object, java.lang.Appendable): void": [
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement, java.lang.Appendable): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, java.lang.Appendable): void"
    ],
    "com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader(): void": [
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.fromJson(java.io.Reader, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.IntegerSubject.isNull(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$4.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$4.read(com.google.gson.stream.JsonReader): java.lang.Boolean"
    ],
    "com.google.gson.stream.JsonWriterTest.testNonFiniteFloatsWhenLenient(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.value(float): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.ArrayTest.testEmptyArraySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.testNumberAsStringDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Number.intValue(): int",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$Derived.\u003cinit\u003e(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$Base.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonPrimitive.getAsByte(): byte": [
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String",
      "java.lang.Byte.parseByte(java.lang.String): byte",
      "java.lang.Number.byteValue(): byte"
    ],
    "com.google.gson.GsonTest$10.\u003cinit\u003e(com.google.gson.GsonTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.String": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object"
    ],
    "com.google.gson.metrics.ParseBenchmark$Content.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$4.run(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "java.util.concurrent.atomic.AtomicReference.set(java.lang.Object): void"
    ],
    "com.google.gson.functional.DelegateTypeAdapterTest$StatsTypeAdapterFactory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object"
    ],
    "com.google.gson.functional.Java17RecordTest$5LocalRecord.hashCode(): int": [],
    "com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.PrimitiveTest.extractElementFromArray(java.lang.String): java.lang.String",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.JsonArrayAsListTest.testIndexOf(): void": [
      "com.google.gson.JsonArray.asList(): java.util.List",
      "java.util.List.lastIndexOf(java.lang.Object): int",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.util.List.indexOf(java.lang.Object): int",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.TypeVariableTest$Bar.\u003cinit\u003e(java.lang.String, java.lang.Integer, boolean): void",
      "java.util.ArrayList.add(java.lang.Object): boolean",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest$MyExclusionStrategy.shouldSkipClass(java.lang.Class): boolean": [],
    "com.google.gson.internal.LazilyParsedNumber.readObject(java.io.ObjectInputStream): void": [
      "java.io.InvalidObjectException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.JsonElement.getAsString(): java.lang.String": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest$12LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.ObjectTest$ClassWithCollectionField.\u003cinit\u003e(): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$9.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization(): void": [
      "java.lang.Long.longValue(): long",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.example.GenericClasses.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter): void": [
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.LazyStringList.isEmpty(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.access$300(com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat): com.google.protobuf.UnknownFieldSet",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.onChanged(): void",
      "com.google.protobuf.LazyStringList.addAll(java.util.Collection): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.ensureNameThatTestsCaseFormatIsMutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.hasAnotherField(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$LongToStringTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$IdTreeTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.TreeTypeAdaptersTest$IdTreeTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TreeTypeAdaptersTest$Id"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setContent(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.getNumber(): int",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.stream.JsonReader.close(): void": [
      "java.io.Reader.close(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$7.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CustomTypeAdaptersTest$7.serialize(java.lang.Boolean, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.GsonTypeAdapterTest$AtomicIntegerTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.util.concurrent.atomic.AtomicInteger": [
      "java.util.concurrent.atomic.AtomicInteger.\u003cinit\u003e(int): void",
      "com.google.gson.JsonElement.getAsInt(): int"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$9.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.functional.ReflectionAccessFilterTest$9.createInstance(java.lang.reflect.Type): com.google.gson.functional.ReflectionAccessFilterTest$ClassWithoutNoArgsConstructor"
    ],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag.registerAllExtensions(com.google.protobuf.ExtensionRegistryLite): void": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.lambda$testDelegating_SameFactoryInstance_OnClassAndField$1(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField$Factory, java.lang.reflect.Type): java.lang.Object": [],
    "com.google.gson.stream.JsonReaderTest.testNullLiteralIsNotAString(): void": [
      "com.google.gson.stream.JsonReaderTest.assertUnexpectedStructureError(java.lang.IllegalStateException, java.lang.String, java.lang.String, java.lang.String): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.EnumTest.testEnumSubclass(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.EnumTest$3.getType(): java.lang.reflect.Type",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.EnumTest$3.\u003cinit\u003e(com.google.gson.functional.EnumTest): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Class): com.google.common.truth.ClassSubject",
      "java.util.EnumSet.allOf(java.lang.Class): java.util.EnumSet",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.ClassSubject.isNotEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$5.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getParentForChildren(): com.google.protobuf.GeneratedMessageV3$BuilderParent",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.isClean(): boolean",
      "com.google.protobuf.RepeatedFieldBuilderV3.\u003cinit\u003e(java.util.List, boolean, com.google.protobuf.AbstractMessage$BuilderParent, boolean): void"
    ],
    "com.google.gson.internal.sql.SqlTimeTypeAdapter.\u003cinit\u003e(): void": [
      "java.text.SimpleDateFormat.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.hasMonth(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.GsonTest$4.\u003cinit\u003e(com.google.gson.GsonTest, java.util.concurrent.atomic.AtomicReference, com.google.gson.Gson): void": [
      "java.lang.Thread.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api$2.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.metrics.ParseBenchmark$Api.\u003cinit\u003e(java.lang.String, int, com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest.testDeserializeProto(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getCount(): int",
      "org.junit.Assert.assertEquals(long, long): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getMsg(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedNameValuePairWithSkipValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$FooTypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.UnsafeAllocatorInstantiationTest$AbstractClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilder.setFieldNamingStrategy(com.google.gson.FieldNamingStrategy): com.google.gson.GsonBuilder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.Java17RecordTest$1Blocked.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ObjectTypeAdapterParameterizedTest.testReadWrite(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter": [
      "com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter.\u003cinit\u003e(int): void",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, int, int): void": [
      "java.text.DateFormat.getDateTimeInstance(int, int, java.util.Locale): java.text.DateFormat",
      "java.util.Locale.equals(java.lang.Object): boolean",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.internal.PreJava9DateFormatProvider.getUSDateTimeFormat(int, int): java.text.DateFormat",
      "java.util.Locale.getDefault(): java.util.Locale",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.JavaVersion.isJava9OrLater(): boolean",
      "java.util.List.add(java.lang.Object): boolean",
      "java.text.DateFormat.getDateTimeInstance(int, int): java.text.DateFormat",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilderTest.assertDefaultGson(com.google.gson.Gson): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilderTest$CustomClass2.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilderTest$CustomClass1.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.example.GenericClasses$DummyClass$Adapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.example.GenericClasses$DummyClass$Adapter.write(com.google.gson.stream.JsonWriter, com.example.GenericClasses$DummyClass): void"
    ],
    "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.listContains(int[]): boolean": [
      "java.util.List.contains(java.lang.Object): boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.CollectionTest$ObjectWithWildcardCollection.\u003cinit\u003e(java.util.Collection): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonObjectTest.testSize(): void": [
      "com.google.gson.JsonObject.size(): int",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonObject.remove(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.JsonElement.getAsBoolean(): boolean": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReader.getPath(): java.lang.String": [
      "com.google.gson.stream.JsonReader.getPath(boolean): java.lang.String"
    ],
    "com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isNull(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFieldsOrBuilder.getNumbersList(): java.util.List": [],
    "com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedNamesWithSkipValue(): void": [
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.JsonArrayAsListTest.testSet(): void": [
      "java.util.List.set(int, java.lang.Object): java.lang.Object",
      "com.google.gson.JsonArray.asList(): java.util.List",
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.TypeAdapters$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$1.write(com.google.gson.stream.JsonWriter, java.lang.Class): void"
    ],
    "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.setContains(float[]): boolean": [
      "java.util.Set.contains(java.lang.Object): boolean",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.functional.PrimitiveTest$1.\u003cinit\u003e(com.google.gson.functional.PrimitiveTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.toBuilder(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void": [
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.maybeForceBuilderInitialization(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.maybeForceBuilderInitialization(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$400(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3"
    ],
    "com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput(): void": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.JsonStreamParser.next(): com.google.gson.JsonElement"
    ],
    "com.google.gson.JavaSerializationTest.\u003cinit\u003e(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.hashCode(): int": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.hasCount(): boolean",
      "java.lang.String.hashCode(): int",
      "java.lang.Object.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getDescriptor(): com.google.protobuf.Descriptors$Descriptor",
      "com.google.protobuf.UnknownFieldSet.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.hasMsg(): boolean",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getCount(): int",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getMsg(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setWidth(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.onChanged(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest.testRecordNull(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest.testOverrides(): void": [
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.common.MoreAsserts.assertOverridesMethods(java.lang.Class, java.lang.Class, java.util.List): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$5.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CustomTypeAdaptersTest$5.serialize(com.google.gson.functional.CustomTypeAdaptersTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.EnumWithObfuscatedTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$Student.\u003cinit\u003e(): void": [
      "com.google.gson.functional.TreeTypeAdaptersTest$Student.\u003cinit\u003e(com.google.gson.functional.TreeTypeAdaptersTest$Id, java.lang.String): void"
    ],
    "com.google.gson.functional.ArrayTest.testMultidimensionalArraysSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.internal.PreJava9DateFormatProvider.getDatePartOfDateTimePattern(int): java.lang.String": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.typeadapters.PostConstructAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.reflect.Method.setAccessible(boolean): void",
      "java.lang.reflect.Method.isAnnotationPresent(java.lang.Class): boolean",
      "java.lang.Class.getDeclaredMethods(): java.lang.reflect.Method[]",
      "com.google.gson.typeadapters.PostConstructAdapterFactory$PostConstructAdapter.\u003cinit\u003e(com.google.gson.TypeAdapter, java.lang.reflect.Method): void",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "java.lang.Class.getSuperclass(): java.lang.Class"
    ],
    "com.google.gson.JsonArrayTest.testCharPrimitiveAddition(): void": [
      "com.google.gson.JsonArray.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.add(java.lang.Character): void",
      "com.google.gson.JsonArray.add(java.lang.String): void"
    ],
    "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void": [
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneSerialize(): void": [
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$4.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void",
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.enableComplexMapKeySerialization(): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$4.getType(): java.lang.reflect.Type",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "org.junit.Assert.fail(): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.functional.MapTest$15.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.lastIndexOf(java.lang.Object): int": [
      "java.util.ArrayList.lastIndexOf(java.lang.Object): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.maybeForceBuilderInitialization(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$800(): com.google.protobuf.Internal$LongList"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testAdd$8(java.util.List): void": [
      "java.util.List.add(java.lang.Object): boolean"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.internal.reflect.Java17ReflectionHelperTest$PrincipalImpl.equals(java.lang.Object): boolean": [
      "java.util.Objects.equals(java.lang.Object, java.lang.Object): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.internal.bind.DateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.util.Date): void": [
      "java.text.DateFormat.format(java.util.Date): java.lang.String",
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$LongToStringTypeAdapterFactory$1.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$500(): com.google.protobuf.Internal$LongList",
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.protobuf.GeneratedMessageV3$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder",
      "com.google.protobuf.RepeatedFieldBuilderV3.clear(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite.length(): int": [],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$BaseIntegerAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$BaseIntegerAdapter.serialize(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.getPath(): java.lang.String": [
      "com.google.gson.internal.bind.JsonTreeReader.getPath(boolean): java.lang.String"
    ],
    "com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.sortedSetContains(char[]): boolean",
      "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.queueContains(long[]): boolean",
      "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.setContains(float[]): boolean",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.listContains(int[]): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializer.serialize(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.bind.ArrayTypeAdapter.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.bind.ArrayTypeAdapter$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.io.Reader, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.ParameterizedTypesTest$10.getType(): java.lang.reflect.Type",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.\u003cinit\u003e(java.lang.Object): void",
      "com.google.gson.functional.ParameterizedTypesTest$10.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.getExpectedJson(): java.lang.String",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeInstanceCreator.\u003cinit\u003e(java.lang.Object): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.PerformanceTest$ClassWithField.\u003cinit\u003e(): void": [
      "com.google.gson.metrics.PerformanceTest$ClassWithField.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.testTypeTokenTypeVariable(): void": [
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "java.lang.reflect.ParameterizedType.getRawType(): java.lang.reflect.Type",
      "java.lang.Class.getTypeParameters(): java.lang.reflect.TypeVariable[]",
      "com.google.common.truth.ObjectArraySubject.asList(): com.google.common.truth.IterableSubject",
      "com.google.gson.reflect.TypeTokenTest$1Enclosing.test(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.reflect.TypeTokenTest$1Enclosing.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.reflect.TypeTokenTest$1Enclosing.testMethodTypeVariable(): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.functional.CustomDeserializerTest$SubTypes.getSubclass(): java.lang.reflect.Type": [],
    "com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$DateTypeAdapter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.sql.Date.\u003cinit\u003e(long): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.util.Date.\u003cinit\u003e(long): void",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.LinkedTreeMap$1.compare(java.lang.Object, java.lang.Object): int": [
      "com.google.gson.internal.LinkedTreeMap$1.compare(java.lang.Comparable, java.lang.Comparable): int"
    ],
    "com.google.gson.stream.JsonReaderTest.testPeekingUnquotedStringsPrefixedWithIntegers(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testBeginArray(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken": [
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): java.lang.reflect.ParameterizedType",
      "com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type): java.lang.Class",
      "java.lang.Class.getTypeParameters(): java.lang.reflect.TypeVariable[]",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.util.Objects.requireNonNull(java.lang.Object, java.lang.String): java.lang.Object",
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.internal.$Gson$Types.requiresOwnerType(java.lang.reflect.Type): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.reflect.TypeVariable.getBounds(): java.lang.reflect.Type[]",
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(java.lang.reflect.Type): void",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api$3.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.metrics.ParseBenchmark$Api.\u003cinit\u003e(java.lang.String, int, com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.JsonArray.asList(): java.util.List": [
      "com.google.gson.internal.NonNullElementWrapperList.\u003cinit\u003e(java.util.ArrayList): void"
    ],
    "com.google.gson.JsonObject.entrySet(): java.util.Set": [
      "com.google.gson.internal.LinkedTreeMap.entrySet(): java.util.Set"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapterTest.testDifferentTimeZones(): void": [
      "java.util.Calendar.getInstance(java.util.TimeZone): java.util.Calendar",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.Calendar.getTime(): java.util.Date",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Date.getTime(): long",
      "java.util.TimeZone.getAvailableIDs(): java.lang.String[]",
      "org.junit.Assert.assertEquals(long, long): void"
    ],
    "com.google.gson.internal.JavaVersionTest.testGetMajorJavaVersion(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.JavaVersion.getMajorJavaVersion(): int",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parser(): com.google.protobuf.Parser": [],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse(): void": [
      "com.google.gson.JsonElement.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.setSerializeNulls(boolean): void",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$9.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.nextLong(): long": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Long.parseLong(java.lang.String): long",
      "java.lang.NumberFormatException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextQuotedValue(char): java.lang.String",
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.nextUnquotedValue(): java.lang.String",
      "com.google.gson.stream.JsonReader.doPeek(): int",
      "java.lang.Double.parseDouble(java.lang.String): double",
      "com.google.gson.stream.JsonReader.locationString(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.String.\u003cinit\u003e(char[], int, int): void"
    ],
    "com.google.gson.reflect.GenericWithBound.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.CustomTypeAdaptersTest$DataHolder": [
      "com.google.gson.functional.CustomTypeAdaptersTest$DataHolder.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.JsonElement.getAsString(): java.lang.String"
    ],
    "com.google.gson.metrics.ParseBenchmark$Content.toString(): java.lang.String": [],
    "com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.generateNonExecutableJson(): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.Gson$3.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.Gson$3.read(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.functional.PrimitiveTest.testDoubleArrayDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.Truth.assertThat(double[]): com.google.common.truth.PrimitiveDoubleArraySubject",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.PrimitiveDoubleArraySubject.hasLength(int): void"
    ],
    "com.google.gson.functional.CollectionTest$3.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest.testThrowingAccessor(): void": [
      "com.google.common.truth.ThrowableSubject.isSameInstanceAs(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.functional.Java17RecordTest$8LocalRecord.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Class.getName(): java.lang.String",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$8.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.example.GenericClasses$GenericUsingGenericClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseDelimitedFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictModeAllowsOtherControlCharacters(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$9.\u003cinit\u003e(java.lang.reflect.Constructor): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.GsonTypesTest$A.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.FormattingStyleTest.testFormatPretty(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.FormattingStyleTest.createInput(): java.util.Map",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.FormattingStyleTest.buildExpected(java.lang.String, java.lang.String, boolean): java.lang.String",
      "com.google.gson.functional.FormattingStyleTest.toJson(java.lang.Object, com.google.gson.FormattingStyle): java.lang.String"
    ],
    "com.google.gson.FieldAttributes.\u003cinit\u003e(java.lang.reflect.Field): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.ObjectTest$Product.\u003cinit\u003e(): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testFailWithPosition(): void": [
      "com.google.gson.stream.JsonReaderTest.testFailWithPosition(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(java.lang.reflect.Type): void"
    ],
    "com.google.gson.LongSerializationPolicy.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest$2.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderPathTest.arrayOfObjects(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String"
    ],
    "com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList(): void": [
      "com.google.gson.functional.PrettyPrintingTest$1.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.functional.PrettyPrintingTest$1.\u003cinit\u003e(com.google.gson.functional.PrettyPrintingTest): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void",
      "com.google.gson.functional.PrettyPrintingTest.print(java.lang.String): void"
    ],
    "com.google.gson.FieldNamingPolicyTest.testSeparateCamelCase(): void": [
      "com.google.gson.FieldNamingPolicy.separateCamelCase(java.lang.String, char): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCaseUnderscorePolicyDeserialiation(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.InstanceCreatorTest$2.createInstance(java.lang.reflect.Type): com.google.gson.common.TestTypes$Base": [
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.internal.UnsafeAllocator$1.\u003cinit\u003e(java.lang.reflect.Method, java.lang.Object): void": [
      "com.google.gson.internal.UnsafeAllocator.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.\u003cinit\u003e(): void": [
      "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives, int): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.access$300(java.lang.ReflectiveOperationException): java.lang.RuntimeException": [
      "com.google.gson.internal.reflect.ReflectionHelper.createExceptionForRecordReflectionException(java.lang.ReflectiveOperationException): java.lang.RuntimeException"
    ],
    "com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.math.BigInteger.toString(): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testDelegatingAdapterFactory_Delayed(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseDelimitedFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.getPreviousPath(): java.lang.String": [
      "com.google.gson.internal.bind.JsonTreeReader.getPath(boolean): java.lang.String"
    ],
    "com.google.gson.functional.ObjectTest.testClassWithDuplicateFields(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.functional.ObjectTest$1.\u003cinit\u003e(com.google.gson.functional.ObjectTest): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.GsonBuilder.addDeserializationExclusionStrategy(com.google.gson.ExclusionStrategy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.functional.StreamingTypeAdaptersTest.usePersonNameAdapter(): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Person.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization(): void": [
      "com.google.gson.functional.ConcurrencyTest$MyObject.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest.testFieldNamingStrategy(): void": [
      "com.google.gson.GsonBuilder.setFieldNamingStrategy(com.google.gson.FieldNamingStrategy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.Java17RecordTest$2LocalRecord.\u003cinit\u003e(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$Foo.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.CollectionsDeserializationBenchmark.timeCollectionsDefault(int): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object"
    ],
    "com.google.gson.GsonTypeAdapterTest$Abstract.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testBlockInaccessibleInterface(): void": [
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.ReflectionAccessFilterTest$14.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonObjectAsFloatPrimitive$15(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$4.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomTypeAdaptersTest$4.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$BagOfPrimitives"
    ],
    "com.google.gson.functional.Java17RecordTest$1Adapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.String": [
      "com.google.gson.JsonElement.getAsString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.internal.$Gson$Types.getSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class): java.lang.reflect.Type": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "java.lang.AssertionError.\u003cinit\u003e(): void",
      "java.lang.reflect.WildcardType.getUpperBounds(): java.lang.reflect.Type[]",
      "com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type): java.lang.reflect.Type",
      "com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean): void",
      "com.google.gson.internal.$Gson$Types.getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class): java.lang.reflect.Type"
    ],
    "com.google.gson.common.TestTypes$ClassWithSerializedNameFields.\u003cinit\u003e(): void": [
      "com.google.gson.common.TestTypes$ClassWithSerializedNameFields.\u003cinit\u003e(int, int): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(com.google.gson.Gson, com.google.gson.reflect.TypeToken, java.lang.Class, boolean, boolean): com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData": [
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.reflect.ReflectionHelper.getAccessibleObjectDescription(java.lang.reflect.AccessibleObject, boolean): java.lang.String",
      "com.google.gson.internal.reflect.ReflectionHelper.getAccessor(java.lang.Class, java.lang.reflect.Field): java.lang.reflect.Method",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "java.lang.reflect.Field.getModifiers(): int",
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "java.lang.reflect.Method.getAnnotation(java.lang.Class): java.lang.annotation.Annotation",
      "java.lang.Class.getGenericSuperclass(): java.lang.reflect.Type",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.reflect.Field.getGenericType(): java.lang.reflect.Type",
      "com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type): java.lang.reflect.Type",
      "java.util.List.iterator(): java.util.Iterator",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(java.lang.reflect.Field): java.util.List",
      "java.lang.reflect.Field.getAnnotation(java.lang.Class): java.lang.annotation.Annotation",
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.includeField(java.lang.reflect.Field, boolean): boolean",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData.\u003cinit\u003e(java.util.Map, java.util.List): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(com.google.gson.Gson, java.lang.reflect.Field, java.lang.reflect.Method, java.lang.String, com.google.gson.reflect.TypeToken, boolean, boolean): com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField",
      "java.util.Map.values(): java.util.Collection",
      "java.lang.Class.getDeclaredFields(): java.lang.reflect.Field[]",
      "java.lang.Class.isInterface(): boolean",
      "com.google.gson.internal.ReflectionAccessFilterHelper.getFilterResult(java.util.List, java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult",
      "java.util.ArrayList.\u003cinit\u003e(java.util.Collection): void",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createDuplicateFieldException(java.lang.Class, java.lang.String, java.lang.reflect.Field, java.lang.reflect.Field): java.lang.IllegalArgumentException",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.internal.reflect.ReflectionHelper.makeAccessible(java.lang.reflect.AccessibleObject): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.Iterator.hasNext(): boolean",
      "java.lang.reflect.Modifier.isStatic(int): boolean",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteDoublesWhenStrict$16(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization(): void": [
      "com.google.gson.functional.VersioningTest$Version1_2.\u003cinit\u003e(): void",
      "com.google.gson.functional.VersioningTest.gsonWithVersion(double): com.google.gson.Gson",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserFieldAnnotationAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse(): void": [
      "com.google.common.truth.MapSubject.doesNotContainKey(java.lang.Object): void",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject"
    ],
    "com.google.gson.JsonSerializationContext.serialize(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement": [],
    "com.google.gson.JsonParserTest.testParseInvalidJson(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.functional.CollectionTest$19.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson.checkValidFloatingPoint(double): void": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(double): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Double.isInfinite(double): boolean",
      "java.lang.Double.isNaN(double): boolean"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.assertEqualsTime(java.util.Date, int, int, int): void": [
      "java.util.Date.getMinutes(): int",
      "java.util.Date.getSeconds(): int",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "java.util.Date.getHours(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.GsonTypesTest$B.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$1.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilder, com.google.gson.internal.ObjectConstructor): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$4.\u003cinit\u003e(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$14.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$14.write(com.google.gson.stream.JsonWriter, java.lang.Character): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.buildPartial(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$SimpleProto"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Serializer.serialize(com.example.ClassWithJsonAdapterAnnotation$DummyClass, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.gson.GsonBuilder.setFieldNamingStrategy(com.google.gson.FieldNamingStrategy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Subject.isNotSameInstanceAs(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilderTest$2.\u003cinit\u003e(com.google.gson.GsonBuilderTest): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.GsonBuilder.setObjectToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void": [
      "com.google.gson.JsonElement.\u003cinit\u003e(): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.promoteNameToValue(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.peekStack(): java.lang.Object",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.gson.internal.bind.JsonTreeReader.expect(com.google.gson.stream.JsonToken): void",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.bind.JsonTreeReader.push(java.lang.Object): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest.testCustomConstructor(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.InvalidProtocolBufferException.getUnfinishedMessage(): com.google.protobuf.MessageLite",
      "com.google.protobuf.InvalidProtocolBufferException.unwrapIOException(): java.io.IOException",
      "com.google.protobuf.Parser.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.internal.sql.SqlDateTypeAdapter.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.sql.SqlDateTypeAdapter$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.UnsafeAllocator$2.\u003cinit\u003e(java.lang.reflect.Method, int): void": [
      "com.google.gson.internal.UnsafeAllocator.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$JacksonStreamParser.parse(char[], com.google.gson.metrics.ParseBenchmark$Document): void": [
      "com.fasterxml.jackson.core.JsonParser.getBooleanValue(): boolean",
      "com.fasterxml.jackson.core.JsonFactoryBuilder.build(): com.fasterxml.jackson.core.JsonFactory",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.fasterxml.jackson.core.JsonFactoryBuilder.configure(com.fasterxml.jackson.core.JsonFactory$Feature, boolean): com.fasterxml.jackson.core.TSFBuilder",
      "com.fasterxml.jackson.core.JsonParser.close(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.fasterxml.jackson.core.JsonParser.getLongValue(): long",
      "com.fasterxml.jackson.core.JsonParser.getText(): java.lang.String",
      "com.fasterxml.jackson.core.JsonParser.getCurrentName(): java.lang.String",
      "java.io.CharArrayReader.\u003cinit\u003e(char[]): void",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.fasterxml.jackson.core.JsonFactoryBuilder.\u003cinit\u003e(): void",
      "com.fasterxml.jackson.core.JsonParser.nextToken(): com.fasterxml.jackson.core.JsonToken",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader): com.fasterxml.jackson.core.JsonParser",
      "com.fasterxml.jackson.core.JsonToken.ordinal(): int"
    ],
    "com.google.gson.functional.NumberLimitsTest.testToNumberPolicy(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.functional.NumberLimitsTest.jsonReader(java.lang.String): com.google.gson.stream.JsonReader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.String.repeat(int): java.lang.String",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testDelegating_SameFactoryClass(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory.\u003cinit\u003e(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory$Factory.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.example.Main$2.\u003cinit\u003e(): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.disable_testCustomDeserializersOfSelf(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$Foo.\u003cinit\u003e(int, long): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.functional.CustomTypeAdaptersTest.createGsonObjectWithFooTypeAdapter(): com.google.gson.Gson",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C$JsonAdapterFactory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String"
    ],
    "com.google.gson.JavaSerializationTest$1.\u003cinit\u003e(com.google.gson.JavaSerializationTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$ClassWithEnumFields.getExpectedJson(): java.lang.String": [],
    "com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.ExposeFieldsTest$ClassWithExposedFields.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ExposeFieldsTest$ClassWithExposedFields.\u003cinit\u003e(java.lang.Integer, java.lang.Integer): void"
    ],
    "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.\u003cinit\u003e(com.google.gson.Gson, java.lang.reflect.Type, com.google.gson.TypeAdapter, com.google.gson.internal.ObjectConstructor): void": [
      "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.\u003cinit\u003e(com.google.gson.Gson, com.google.gson.TypeAdapter, java.lang.reflect.Type): void",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasOuterMessage(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeInnerMessage1(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasInnerMessage2(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasId(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeOuterMessage(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage1(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeInnerMessage2(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getOuterMessage(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.access$1900(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations): com.google.protobuf.UnknownFieldSet",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasInnerMessage1(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage2(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.getExpectedJson(): java.lang.String": [
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.appendObjectsToBuilder(java.lang.StringBuilder, java.util.List[]): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.toString(java.lang.Number): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.appendObjectsToBuilder(java.lang.StringBuilder, java.lang.Iterable): void"
    ],
    "com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization(): void": [
      "java.util.Collection.add(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.CircularReferenceTest$ContainsReferenceToSelfType.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isNotNull(): void"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest$SampleObjectForTest.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.addSerializationExclusionStrategy(com.google.gson.ExclusionStrategy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.GsonTypeAdapterTest$1.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.GsonTypeAdapterTest$Abstract": [
      "java.lang.AssertionError.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTypeAdapterTest$Concrete.\u003cinit\u003e(): void": [
      "com.google.gson.GsonTypeAdapterTest$Abstract.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.lambda$testTwoNames$4(com.google.gson.internal.bind.JsonTreeWriter): void": [
      "com.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type": [],
    "com.google.gson.metrics.PerformanceTest$CollectionEntry.\u003cinit\u003e(): void": [
      "com.google.gson.metrics.PerformanceTest$CollectionEntry.\u003cinit\u003e(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$ClassWithNullWrappedPrimitive.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest$MyExclusionStrategy.shouldSkipField(com.google.gson.FieldAttributes): boolean": [
      "com.google.gson.FieldAttributes.getAnnotation(java.lang.Class): java.lang.annotation.Annotation"
    ],
    "com.google.gson.LongSerializationPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.LongSerializationPolicy$1): void": [
      "com.google.gson.LongSerializationPolicy.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.JavaVersion.isJava9OrLater(): boolean",
      "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker$2.\u003cinit\u003e(): void",
      "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker$1.\u003cinit\u003e(java.lang.reflect.Method): void",
      "java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clear(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testNumberWithOctalPrefix(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteFloatsWhenStrict$9(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(float): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeWriter.close(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.usePersonNameAdapter(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.StreamingTypeAdaptersTest$2.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void"
    ],
    "com.google.gson.functional.CollectionTest$8.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest.testStaticFieldSerialization(): void": [
      "com.google.gson.GsonBuilder.excludeFieldsWithModifiers(int[]): com.google.gson.GsonBuilder",
      "com.google.gson.functional.Java17RecordTest$RecordWithStaticField.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.JsonArray.getAsCharacter(): char": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsCharacter(): char"
    ],
    "com.google.gson.interceptors.InterceptorTest$1.\u003cinit\u003e(com.google.gson.interceptors.InterceptorTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.MixedStreamTest$Car.hashCode(): int": [
      "java.lang.String.hashCode(): int"
    ],
    "com.example.Main.lambda$testGenericClasses$28(com.google.gson.Gson): java.lang.String": [
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.example.Main$3.\u003cinit\u003e(): void",
      "com.example.GenericClasses$GenericUsingGenericClass.toString(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testEscapedNewlineAllowedInDefaultMode(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureSimplesIsMutable(): void": [
      "java.util.ArrayList.\u003cinit\u003e(java.util.Collection): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testInaccessibleNoArgsConstructor(): void": [
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.functional.ReflectionAccessFilterTest$6.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType(): void": [
      "com.google.gson.functional.InstanceCreatorTest$4.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.common.truth.ClassSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.InstanceCreatorTest$5.getType(): java.lang.reflect.Type",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.Class): com.google.common.truth.ClassSubject",
      "com.google.gson.functional.InstanceCreatorTest$5.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getHeight(): int": [],
    "com.google.gson.functional.GsonVersionDiagnosticsTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.GsonVersionDiagnosticsTest$1.\u003cinit\u003e(com.google.gson.functional.GsonVersionDiagnosticsTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.EnumTest$MyEnumTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.EnumTest$Roshambo": [
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.functional.EnumTest$Roshambo.valueOf(java.lang.String): com.google.gson.functional.EnumTest$Roshambo",
      "java.lang.String.substring(int): java.lang.String"
    ],
    "com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass(): void": [
      "com.google.gson.FieldAttributesTest$1.\u003cinit\u003e(com.google.gson.FieldAttributesTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.FieldAttributes.getDeclaredType(): java.lang.reflect.Type",
      "com.google.gson.FieldAttributes.getDeclaredClass(): java.lang.Class",
      "com.google.common.truth.ClassSubject.isAssignableTo(java.lang.Class): void",
      "com.google.gson.FieldAttributesTest$1.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.Class): com.google.common.truth.ClassSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$1.\u003cinit\u003e(): void": [
      "com.google.protobuf.AbstractParser.\u003cinit\u003e(): void"
    ],
    "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.util.function.Supplier.get(): java.lang.Object",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.function.BiConsumer.accept(java.lang.Object, java.lang.Object): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.graph.GraphAdapterBuilder$Factory.access$000(com.google.gson.graph.GraphAdapterBuilder$Factory): java.lang.ThreadLocal",
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "java.lang.ThreadLocal.remove(): void",
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "java.lang.ThreadLocal.set(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.graph.GraphAdapterBuilder$Element.access$500(com.google.gson.graph.GraphAdapterBuilder$Element): java.lang.Object",
      "com.google.gson.graph.GraphAdapterBuilder$Graph.\u003cinit\u003e(java.util.Map, com.google.gson.graph.GraphAdapterBuilder$1): void",
      "com.google.gson.graph.GraphAdapterBuilder$Element.access$602(com.google.gson.graph.GraphAdapterBuilder$Element, com.google.gson.TypeAdapter): com.google.gson.TypeAdapter",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.lang.ThreadLocal.get(): java.lang.Object",
      "com.google.gson.graph.GraphAdapterBuilder$Element.read(com.google.gson.graph.GraphAdapterBuilder$Graph): void",
      "com.google.gson.graph.GraphAdapterBuilder$Graph.access$200(com.google.gson.graph.GraphAdapterBuilder$Graph): java.util.Map",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.HashMap.\u003cinit\u003e(): void",
      "com.google.gson.graph.GraphAdapterBuilder$Element.\u003cinit\u003e(java.lang.Object, java.lang.String, com.google.gson.TypeAdapter, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.JsonObject.keySet(): java.util.Set": [
      "com.google.gson.internal.LinkedTreeMap.keySet(): java.util.Set"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseFrom(java.nio.ByteBuffer): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer): java.lang.Object"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest.testGsonFutureAdapter(): void": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$CyclicBase.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$CyclicSub.\u003cinit\u003e(int): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper.getFilterResult(java.util.List, java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [
      "com.google.gson.ReflectionAccessFilter.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.List.iterator(): java.util.Iterator",
      "java.util.Iterator.next(): java.lang.Object"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ArrayTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.newTypeAdapter(java.lang.String): com.google.gson.TypeAdapter": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$3.\u003cinit\u003e(com.google.gson.functional.TypeAdapterPrecedenceTest, java.lang.String): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.TypeAdapterTest$3.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.TroubleshootingGuide.createUrl(java.lang.String): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.internal.LinkedTreeMap$Node.\u003cinit\u003e(boolean): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.JavaSerializationTest$2.\u003cinit\u003e(com.google.gson.JavaSerializationTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$12.serialize(com.google.gson.GsonTest$CustomClass2, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.Excluder$1.delegate(): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.functional.MapTest$18.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields(): void": [
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ClassWithContainersOfParameterizedBaseFields.\u003cinit\u003e(java.util.Collection, java.util.Map): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ParameterizedSub.\u003cinit\u003e(java.lang.Object, java.lang.Object): void",
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ParameterizedBase.\u003cinit\u003e(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$BagOfPrimitives.hashCode(): int": [
      "java.lang.String.hashCode(): int"
    ],
    "com.google.gson.functional.ObjectTest$1.shouldSkipField(com.google.gson.FieldAttributes): boolean": [],
    "com.google.gson.functional.CollectionTest.testPriorityQueue(): void": [
      "com.google.gson.functional.CollectionTest$8.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.CollectionTest$8.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.util.PriorityQueue.remove(): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.PriorityQueue.size(): int"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo.$values(): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo[]"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken, java.lang.Object): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory.\u003cinit\u003e(java.lang.Object, com.google.gson.reflect.TypeToken, boolean, java.lang.Class): void"
    ],
    "com.google.gson.GsonBuilder.setLenient(): com.google.gson.GsonBuilder": [
      "com.google.gson.GsonBuilder.setStrictness(com.google.gson.Strictness): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonBindParser.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CollectionTest$13.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker.canAccess(java.lang.reflect.AccessibleObject, java.lang.Object): boolean": [],
    "com.google.gson.functional.Java17RecordTest.testMultipleNamesDeserializedCorrectly(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.internal.$Gson$Types.\u003cinit\u003e(): void": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$3.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.stream.JsonReader.skipTo(java.lang.String): boolean": [
      "java.lang.String.charAt(int): char",
      "java.lang.String.length(): int",
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C$JsonAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C$JsonAdapterFactory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C$JsonAdapterFactory): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$ClassWithIncorrectJsonAdapter.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.MapTest$MyMap.\u003cinit\u003e(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void": [
      "java.util.Objects.requireNonNull(java.lang.Object, java.lang.String): java.lang.Object",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$20.write(com.google.gson.stream.JsonWriter, java.lang.StringBuffer): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.lang.StringBuffer.toString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearMonth(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest$Foo1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$NestedGeneric.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$3.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$3.read(com.google.gson.stream.JsonReader): java.lang.Boolean"
    ],
    "com.google.gson.functional.MapTest$14.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newInstance(com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$7.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$7.read(com.google.gson.stream.JsonReader): java.lang.String"
    ],
    "com.google.gson.common.TestTypes$SubSerializer.\u003cclinit\u003e(): void": [
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testDateDeserializationISO8601(): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.assertParsed(java.lang.String, com.google.gson.TypeAdapterFactory): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createDefaultsAdapterFactory(): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.internal.bind.NumberTypeAdapter.getFactory(com.google.gson.ToNumberStrategy): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.NumberTypeAdapter.newFactory(com.google.gson.ToNumberStrategy): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderWrapper.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest$DataHolder): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$7LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.getParserForType(): com.google.protobuf.Parser": [],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$Point.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Calendar.getInstance(): java.util.Calendar",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.InnerClassExclusionStrategyTest$StaticNestedClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$21.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$21.write(com.google.gson.stream.JsonWriter, java.net.URL): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$33.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$JsonElementAdapter.\u003cclinit\u003e(): void": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.serializeSpecialFloatingPointValues(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.functional.PrettyPrintingTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ReflectionAccessFilter$FilterResult.valueOf(java.lang.String): com.google.gson.ReflectionAccessFilter$FilterResult": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Class.getField(java.lang.String): java.lang.reflect.Field"
    ],
    "com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory$DummyTypeAdapterFactory.\u003cinit\u003e(com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory$1): void": [
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory$DummyTypeAdapterFactory.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldAttributesTest.testDeclaringClass(): void": [
      "com.google.gson.FieldAttributes.getDeclaringClass(): java.lang.Class",
      "com.google.common.truth.ClassSubject.isAssignableTo(java.lang.Class): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Class): com.google.common.truth.ClassSubject"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$Point.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$ClassWithObjects.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.util.Date): void": [
      "java.text.DateFormat.format(java.util.Date): java.lang.String",
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$1.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User"
    ],
    "com.google.gson.reflect.TypeTokenTest$1SubSubTypeToken1.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeTokenTest$1SubTypeToken.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$KeySet.contains(java.lang.Object): boolean": [
      "com.google.gson.internal.LinkedTreeMap.containsKey(java.lang.Object): boolean"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest.testDifferentJsonAdaptersForGenericFieldsOfSameRawType(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Container.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addSimplesBuilder(int): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.protobuf.RepeatedFieldBuilderV3.addBuilder(int, com.google.protobuf.AbstractMessage): com.google.protobuf.AbstractMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3"
    ],
    "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter$1.run(): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter$1.run(): java.lang.reflect.Field[]"
    ],
    "com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization(): void": [
      "com.google.gson.GsonBuilder.setLongSerializationPolicy(com.google.gson.LongSerializationPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$9.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.hashCode(): int": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.hasNIdCt(): boolean",
      "java.lang.Object.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDescriptor(): com.google.protobuf.Descriptors$Descriptor",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDataCount(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.hasContent(): boolean",
      "com.google.protobuf.UnknownFieldSet.hashCode(): int",
      "java.util.List.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDataList(): java.util.List",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getNIdCt(): int"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserFieldAnnotationAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFieldsOrBuilder.getSimplesOrBuilder(int): com.google.gson.protobuf.generated.Bag$SimpleProtoOrBuilder": [],
    "com.google.gson.functional.CircularReferenceTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$13.read(com.google.gson.stream.JsonReader): java.lang.Number": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.stream.JsonWriterTest.testStrings(): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.typeadapters.PostConstructAdapterFactory$PostConstructAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder"
    ],
    "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.remove(): void": [
      "java.lang.IllegalStateException.\u003cinit\u003e(): void",
      "com.google.gson.internal.LinkedTreeMap.removeInternal(com.google.gson.internal.LinkedTreeMap$Node, boolean): void"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.ParameterizedTypeFixtures$MyParameterizedType": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.PrimitiveTypeAdapter.adaptType(java.lang.Object, java.lang.Class): java.lang.Object",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type): java.lang.Class",
      "com.google.gson.PrimitiveTypeAdapter.\u003cinit\u003e(): void",
      "com.google.gson.internal.Primitives.isPrimitive(java.lang.reflect.Type): boolean",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonElement.getAsInt(): int",
      "java.lang.Class.getSimpleName(): java.lang.String",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.\u003cinit\u003e(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Element.access$500(com.google.gson.graph.GraphAdapterBuilder$Element): java.lang.Object": [],
    "com.example.Main.lambda$testNamedFields$4(com.google.gson.Gson): java.lang.String": [
      "com.example.ClassWithNamedFields.\u003cinit\u003e(int): void",
      "com.example.Main.toJson(com.google.gson.Gson, java.lang.Object): java.lang.String"
    ],
    "com.example.Main.lambda$testGenericClasses$27(com.google.gson.Gson): java.lang.String": [
      "com.example.GenericClasses$UsingGenericClass.toString(): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.getCanonicalRecordConstructor(java.lang.Class): java.lang.reflect.Constructor": [],
    "com.google.gson.functional.PrettyPrintingTest.testEmptyMapField(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.PrettyPrintingTest$ClassWithMap.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter): void": [
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clear(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.MapTest.testHashMapDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.MapTest$15.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.functional.MapTest$15.getType(): java.lang.reflect.Type",
      "com.google.common.truth.MapSubject.containsKey(java.lang.Object): void",
      "java.util.HashMap.get(java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.MapSubject.hasSize(int): void"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testAdd$6(java.util.List): void": [
      "java.util.List.set(int, java.lang.Object): java.lang.Object",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.util.List.size(): int",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getNameThatTestsCaseFormat(int): java.lang.String": [
      "com.google.protobuf.LazyStringList.get(int): java.lang.Object"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1.write(com.google.gson.stream.JsonWriter, com.google.gson.native_test.Java17RecordReflectionTest$RecordWithRegisteredAdapter): void": [
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.metrics.ParseBenchmark$Item.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithStaticField.\u003cinit\u003e(): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson$4.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.Gson$4.write(com.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicLong): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilderForType(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest$MyExclusionStrategy.\u003cinit\u003e(java.lang.Class): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.nextNull(): void": [
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.doPeek(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.isInitialized(): boolean": [],
    "com.google.gson.functional.PrimitiveTest.testNumberDeserialization(): void": [
      "java.lang.String.valueOf(long): java.lang.String",
      "java.lang.Long.valueOf(java.lang.String): java.lang.Long",
      "java.lang.Number.longValue(): long",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Number.intValue(): int",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(java.lang.String): java.lang.Integer",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.isInitialized(): boolean": [],
    "com.google.gson.CommentsTest.testParseComments(): void": [
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.CommentsTest$1.\u003cinit\u003e(com.google.gson.CommentsTest): void",
      "com.google.common.truth.Ordered.inOrder(): void",
      "com.google.gson.CommentsTest$1.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue(): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedStrings(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void"
    ],
    "com.google.gson.functional.UncategorizedTest$BaseTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.UncategorizedTest$BaseTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.UncategorizedTest$Base"
    ],
    "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(com.google.gson.stream.JsonWriter, java.util.Collection): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Collection.iterator(): java.util.Iterator"
    ],
    "com.google.gson.functional.ObjectTest.testJsonObjectSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordNotSupportedHelper.getRecordComponentNames(java.lang.Class): java.lang.String[]": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.JsonObjectTest.testAddingBooleanProperties(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.gson.JsonElement.getAsBoolean(): boolean",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Boolean): void",
      "com.google.gson.JsonObject.has(java.lang.String): boolean",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.CustomDeserializerTest$DataHolderDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomDeserializerTest$DataHolderDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.CustomDeserializerTest$DataHolder"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$BaseIntegerAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilder.addDeserializationExclusionStrategy(com.google.gson.ExclusionStrategy): com.google.gson.GsonBuilder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.Excluder.withExclusionStrategy(com.google.gson.ExclusionStrategy, boolean, boolean): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonArrayAsNumber$25(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.EnumTest$Color.$values(): com.google.gson.functional.EnumTest$Color[]": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.internal.$Gson$Types.getArrayComponentType(java.lang.reflect.Type): java.lang.reflect.Type": [
      "java.lang.reflect.GenericArrayType.getGenericComponentType(): java.lang.reflect.Type",
      "java.lang.Class.getComponentType(): java.lang.Class"
    ],
    "com.google.gson.functional.CollectionTest$20.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testByteDeserializationLossy$2(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.DefaultMapJsonSerializerTest$1.\u003cinit\u003e(com.google.gson.DefaultMapJsonSerializerTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GenericArrayTypeTest.testNotEquals(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.GenericArrayTypeTest$3.getType(): java.lang.reflect.Type",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "com.google.gson.GenericArrayTypeTest$3.\u003cinit\u003e(com.google.gson.GenericArrayTypeTest): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.newInstance(com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilder.disableInnerClassSerialization(): com.google.gson.GsonBuilder": [
      "com.google.gson.internal.Excluder.disableInnerClassSerialization(): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder.getCountryCode5F55Bytes(): com.google.protobuf.ByteString": [],
    "com.google.gson.native_test.Java17RecordReflectionTest.testSerializedName(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithSerializedName.\u003cinit\u003e(int): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.LazilyParsedNumberTest.testHashCode(): void": [
      "com.google.gson.internal.LazilyParsedNumber.hashCode(): int",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.LinkedTreeMap$Node.setValue(java.lang.Object): java.lang.Object": [
      "java.lang.NullPointerException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithDefaultConstructor.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField$Factory, com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getName(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.common.TestTypes$BaseSerializer.serialize(com.google.gson.common.TestTypes$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataOrBuilder(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$DataOrBuilder": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.protobuf.RepeatedFieldBuilderV3.getMessageOrBuilder(int): com.google.protobuf.MessageOrBuilder"
    ],
    "com.google.gson.functional.CollectionTest.testIssue1107(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "java.util.List.get(int): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setHeight(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.onChanged(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$12.getType(): java.lang.reflect.Type",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$12.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Set.size(): int",
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormatOrBuilder.getAnotherFieldBytes(): com.google.protobuf.ByteString": [],
    "com.google.gson.functional.ExposeFieldsTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$21.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$21.read(com.google.gson.stream.JsonReader): java.net.URL"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$PublicRecord.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1RecordWithExpose.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.MapTest$25.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing(): void": [
      "com.google.gson.JsonParser.parseReader(java.io.Reader): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonObject.remove(java.lang.String): com.google.gson.JsonElement",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$PrivateRecord.hashCode(): int": [],
    "com.google.gson.stream.JsonReaderTest.testSetLenientTrue(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.getStrictness(): com.google.gson.Strictness",
      "com.google.gson.stream.JsonReader.setLenient(boolean): void"
    ],
    "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class": [],
    "com.google.gson.MixedStreamTest$Car.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement": [
      "java.util.ArrayList.get(int): java.lang.Object"
    ],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest.testSuperSubtype(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type): java.lang.reflect.WildcardType",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type): java.lang.reflect.WildcardType"
    ],
    "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.writeDeferredName(): void",
      "com.google.gson.stream.JsonWriter.beforeValue(): void",
      "java.io.Writer.write(java.lang.String): void",
      "java.lang.Long.toString(long): java.lang.String"
    ],
    "com.google.gson.functional.CollectionTest$15.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$23.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$23.read(com.google.gson.stream.JsonReader): java.net.InetAddress"
    ],
    "com.google.gson.JsonElement.isJsonPrimitive(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.buildPartial(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.google.gson.functional.Java17RecordTest$9LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.beginObject(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.nextName(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.endObject(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonDeserializer$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.util.List": [
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.CircularReferenceTest$1.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CircularReferenceTest$1.serialize(com.google.gson.functional.CircularReferenceTest$ClassWithSelfReference, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String": [
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement): java.lang.String"
    ],
    "com.google.gson.internal.sql.SqlTimestampTypeAdapter.read(com.google.gson.stream.JsonReader): java.sql.Timestamp": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "java.sql.Timestamp.\u003cinit\u003e(long): void",
      "java.util.Date.getTime(): long"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipObjectNameUnquoted(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.stream.JsonReader.skipValue(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.SerializedNameTest.\u003cinit\u003e(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictModeFailsToParseUnescapedControlCharacter(): void": [
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.writeTo(com.google.protobuf.CodedOutputStream): void": [
      "com.google.protobuf.CodedOutputStream.writeMessage(int, com.google.protobuf.MessageLite): void",
      "com.google.protobuf.GeneratedMessageV3.writeString(com.google.protobuf.CodedOutputStream, int, java.lang.Object): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getOuterMessage(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.protobuf.UnknownFieldSet.writeTo(com.google.protobuf.CodedOutputStream): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage1(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage2(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.internal.LinkedTreeMap.equal(java.lang.Object, java.lang.Object): boolean": [
      "java.util.Objects.equals(java.lang.Object, java.lang.Object): boolean"
    ],
    "com.google.gson.functional.Java17RecordTest.testFieldExclusionStrategy(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.Java17RecordTest$2.\u003cinit\u003e(com.google.gson.functional.Java17RecordTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.setExclusionStrategies(com.google.gson.ExclusionStrategy[]): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.Java17RecordTest$11LocalRecord.\u003cinit\u003e(int, int, double): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.UncategorizedTest$OperationType.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testNullSafeObject(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClass.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonWriterTest.testNullName(): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.stream.JsonWriterTest.testNonFiniteNumbers(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonObjectAsShortPrimitive$11(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.reflect.TypeTokenTest.testParameterizedFactory_Invalid(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Class.getName(): java.lang.String",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.reflect.TypeToken.getArray(java.lang.reflect.Type): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.stream.JsonReader.nextUnquotedValue(): java.lang.String": [
      "java.lang.Math.max(int, int): int",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.append(char[], int, int): java.lang.StringBuilder",
      "java.lang.StringBuilder.\u003cinit\u003e(int): void",
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean",
      "java.lang.String.\u003cinit\u003e(char[], int, int): void",
      "com.google.gson.stream.JsonReader.checkLenient(): void"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize(): void": [
      "com.google.gson.GsonBuilder.enableComplexMapKeySerialization(): com.google.gson.GsonBuilder",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$5.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$5.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.IterableSubject.contains(java.lang.Object): void",
      "com.google.gson.functional.DefaultTypeAdaptersTest$3.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.functional.DefaultTypeAdaptersTest$3.\u003cinit\u003e(com.google.gson.functional.DefaultTypeAdaptersTest): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest.testJsonSerializerDeserializerBasedJsonAdapterOnClass(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Computer2.\u003cinit\u003e(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User2): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User2.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CustomDeserializerTest$SubType2.\u003cinit\u003e(): void": [
      "com.google.gson.functional.CustomDeserializerTest$MyBase.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testInnerClassDeserialization(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.ObjectTest$Parent.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ObjectTest$6.\u003cinit\u003e(com.google.gson.functional.ObjectTest, com.google.gson.functional.ObjectTest$Parent): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$8.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$8.write(com.google.gson.stream.JsonWriter, java.lang.String): void"
    ],
    "com.google.gson.JsonParser.parse(java.io.Reader): com.google.gson.JsonElement": [
      "com.google.gson.JsonParser.parseReader(java.io.Reader): com.google.gson.JsonElement"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest.testSkipValue_filledJsonObject(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.add(java.lang.Character): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonArray.add(java.lang.String): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.getPath(): java.lang.String",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Boolean): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.bind.JsonTreeReader.skipValue(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testRepeatedName(): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api$3.newParser(): com.google.gson.metrics.ParseBenchmark$Parser": [
      "com.google.gson.metrics.ParseBenchmark$GsonStreamParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$6.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$6.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testDeepNestingArrays(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GadgetWithOptionalPart.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest$Parent$Child.\u003cinit\u003e(com.google.gson.functional.ObjectTest$Parent): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.TreeTypeAdaptersTest$1.\u003cinit\u003e(): void",
      "com.google.gson.functional.TreeTypeAdaptersTest$Id.\u003cinit\u003e(java.lang.String, java.lang.reflect.Type): void",
      "com.google.gson.functional.TreeTypeAdaptersTest$1.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.TreeTypeAdaptersTest$Student.\u003cinit\u003e(com.google.gson.functional.TreeTypeAdaptersTest$Id, java.lang.String): void"
    ],
    "com.google.gson.functional.Java17RecordTest.testPrimitiveDefaultValues(): void": [
      "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.\u003cinit\u003e(java.lang.String, byte, short, int, long, float, double, char, boolean): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.annotations.SerializedName.alternate(): java.lang.String[]": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.\u003cinit\u003e(): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.hasLongTimestamp(): boolean": [],
    "com.google.gson.functional.CollectionTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArrayTest.testNullPrimitiveAddition(): void": [
      "com.google.gson.JsonArray.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonArray.size(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.add(java.lang.Character): void",
      "com.google.gson.JsonArray.add(java.lang.String): void",
      "com.google.gson.JsonArray.add(java.lang.Boolean): void",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement"
    ],
    "com.google.gson.metrics.PerformanceTest.testSerializeClasses(): void": [
      "java.lang.System.currentTimeMillis(): long",
      "java.io.PrintStream.printf(java.lang.String, java.lang.Object[]): java.io.PrintStream",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.metrics.PerformanceTest$ClassWithField.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.metrics.PerformanceTest$ClassWithList.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.Appendable): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientNonExecutePrefix(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$PublicRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.Java17RecordTest$2.\u003cinit\u003e(com.google.gson.functional.Java17RecordTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$3.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CustomTypeAdaptersTest$3.serialize(com.google.gson.common.TestTypes$BagOfPrimitives, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.interceptors.InterceptorTest.testCustomTypeAdapter(): void": [
      "com.google.gson.interceptors.InterceptorTest$4.\u003cinit\u003e(com.google.gson.interceptors.InterceptorTest): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.interceptors.InterceptorFactory.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.InterceptorTest$3.\u003cinit\u003e(com.google.gson.interceptors.InterceptorTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory, com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.getCount(): int": [],
    "com.google.gson.functional.ObjectTest.setUp(): void": [
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.util.Locale.getDefault(): java.util.Locale",
      "java.util.TimeZone.getDefault(): java.util.TimeZone",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Float): com.google.common.truth.FloatSubject",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.FloatSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.PrimitiveTypeAdapter.adaptType(java.lang.Object, java.lang.Class): java.lang.Object": [
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.Throwable): void",
      "java.lang.Class.getConstructor(java.lang.Class[]): java.lang.reflect.Constructor",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.Throwable): void",
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "java.lang.String.charAt(int): char",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.String.length(): int",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "com.google.gson.internal.Primitives.isWrapperType(java.lang.reflect.Type): boolean",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.reflect.Constructor.newInstance(java.lang.Object[]): java.lang.Object",
      "java.lang.Class.getMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "com.google.gson.internal.Primitives.wrap(java.lang.Class): java.lang.Class"
    ],
    "com.google.gson.functional.CollectionTest$19.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CollectionTest$19.serialize(java.util.List, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.JsonElement.isJsonNull(): boolean": [],
    "com.google.gson.interceptors.InterceptorTest.testMapKeyAndValues(): void": [
      "java.util.Map.entrySet(): java.util.Set",
      "com.google.gson.interceptors.InterceptorTest$3.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.gson.interceptors.InterceptorTest$3.\u003cinit\u003e(com.google.gson.interceptors.InterceptorTest): void",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.functional.Java17RecordTest$1RecordWithExpose.hashCode(): int": [],
    "com.google.gson.functional.ReflectionAccessTest$2.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "java.util.concurrent.atomic.AtomicBoolean.set(boolean): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage2(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.SingleFieldBuilderV3.getMessage(): com.google.protobuf.AbstractMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.internal.sql.SqlTimeTypeAdapter$1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization(): void": [
      "java.util.GregorianCalendar.get(int): int",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$MultiParameters.\u003cinit\u003e(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson$2.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.Gson$2.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.MixedStreamTest.\u003cclinit\u003e(): void": [
      "com.google.gson.MixedStreamTest$Car.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.ToNumberPolicy$4.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.ToNumberPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.ToNumberPolicy$1): void"
    ],
    "com.google.gson.JsonArrayTest.testSet(): void": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.gson.JsonArray.set(int, com.google.gson.JsonElement): com.google.gson.JsonElement",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.stream.JsonWriterTest.testNulls(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testPeekLargerThanLongMinValue(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.functional.FieldExclusionTest$Outer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.MoreAsserts.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader": [
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.EnumTest$CustomToString.valueOf(java.lang.String): com.google.gson.functional.EnumTest$CustomToString": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$2.read(com.google.gson.stream.JsonReader): com.google.gson.functional.StreamingTypeAdaptersTest$Person": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Person.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.MapTest$1.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonStreamParserTest.testParseTwoStrings(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonStreamParser.next(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.size(): int": [
      "java.util.ArrayList.size(): int"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomFieldAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.native_test.ReflectionTest$ClassWithCustomFieldAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Integer): void"
    ],
    "com.example.Main.testSerializedName(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.internal.bind.TypeAdapters$23.write(com.google.gson.stream.JsonWriter, java.net.InetAddress): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.net.InetAddress.getHostAddress(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest.testClassReflectionFilter(): void": [
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.gson.functional.Java17RecordTest$1Allowed.\u003cinit\u003e(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.MapTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldNamingPolicyTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldNamingPolicyTest.testUpperCaseFirstLetter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(java.lang.String): java.lang.String"
    ],
    "com.google.gson.FieldAttributesTest.testName(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.FieldAttributes.getName(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.FieldNamingPolicy.values(): com.google.gson.FieldNamingPolicy[]": [
      "[Lcom.google.gson.FieldNamingPolicy;.clone(): java.lang.Object"
    ],
    "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.util.Objects.requireNonNull(java.lang.Object, java.lang.String): java.lang.Object",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.gson.TypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "java.util.List.iterator(): java.util.Iterator",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.isClassJsonAdapterFactory(com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapterFactory): boolean"
    ],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest.testRecursiveTypeVariablesResolve1(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$ClassWithMembers.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilderTest$3.\u003cinit\u003e(com.google.gson.GsonBuilderTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testDeerializeMapOfMaps(): void": [
      "com.google.gson.functional.MapTest$37.getType(): java.lang.reflect.Type",
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$37.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.functional.MapTest.newMap(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.util.Map",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject"
    ],
    "com.google.gson.native_test.ReflectionTest.testGenerics(): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.native_test.ReflectionTest$3.\u003cinit\u003e(com.google.gson.native_test.ReflectionTest): void",
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement": [
      "java.util.List.isEmpty(): boolean",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$23.read(com.google.gson.stream.JsonReader): java.net.InetAddress": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.net.InetAddress.getByName(java.lang.String): java.net.InetAddress"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.anInt(): int": [],
    "com.google.gson.functional.ReflectionAccessTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.Primitives.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.getActualTypeArguments(): java.lang.reflect.Type[]": [
      "[Ljava.lang.reflect.Type;.clone(): java.lang.Object"
    ],
    "com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.internal.Excluder.excludeClass(java.lang.Class, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$ClassWithInitializedMembers.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest$Parent.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonTreeTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteDoublesWhenStrict$15(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.FieldNamingPolicy$5.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.FieldNamingPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.FieldNamingPolicy$1): void"
    ],
    "com.google.gson.stream.JsonReader.skipValue(): void": [
      "com.google.gson.stream.JsonReader.skipUnquotedValue(): void",
      "com.google.gson.stream.JsonReader.skipQuotedValue(char): void",
      "com.google.gson.stream.JsonReader.doPeek(): int",
      "com.google.gson.stream.JsonReader.push(int): void"
    ],
    "com.google.gson.internal.NumberLimits.parseBigInteger(java.lang.String): java.math.BigInteger": [
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.NumberLimits.checkNumberStringLength(java.lang.String): void"
    ],
    "com.google.gson.interceptors.InterceptorTest$4.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.interceptors.InterceptorTest$4.read(com.google.gson.stream.JsonReader): com.google.gson.interceptors.InterceptorTest$User"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.build(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.google.gson.functional.MapTest.testMapOfMapSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization(): void": [
      "com.google.gson.functional.ObjectTest$ClassWithObjectField.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.stream.JsonReaderTest.testFailWithPositionOverQuotedString(): void": [
      "com.google.gson.stream.JsonReaderTest.testFailWithPosition(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getAnotherFieldBytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.common.TestTypes$ClassWithTransientFields.\u003cinit\u003e(): void": [
      "com.google.gson.common.TestTypes$ClassWithTransientFields.\u003cinit\u003e(long): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory.\u003cinit\u003e(java.lang.Object): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testComplexKeysSerialization(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.MapTest$30.getType(): java.lang.reflect.Type",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.functional.MapTest$30.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.functional.MapTest$Point.\u003cinit\u003e(int, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.Java17RecordTest$13LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.graph.GraphAdapterBuilderTest.testSerializeListOfLists(): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.graph.GraphAdapterBuilder.addType(java.lang.reflect.Type): com.google.gson.graph.GraphAdapterBuilder",
      "com.google.gson.graph.GraphAdapterBuilderTest$1.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilderTest): void",
      "com.google.gson.graph.GraphAdapterBuilder.\u003cinit\u003e(): void",
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.gson.graph.GraphAdapterBuilderTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.graph.GraphAdapterBuilderTest$2.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilderTest): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.graph.GraphAdapterBuilderTest$1.getType(): java.lang.reflect.Type",
      "com.google.gson.graph.GraphAdapterBuilder.registerOn(com.google.gson.GsonBuilder): void"
    ],
    "com.google.gson.GsonBuilder.setStrictness(com.google.gson.Strictness): com.google.gson.GsonBuilder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.Gson.serializeNulls(): boolean": [],
    "com.google.gson.PrimitiveTypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.buildPartial(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateParseInvalidDay(): void": [
      "com.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition): java.util.Date",
      "java.text.ParsePosition.\u003cinit\u003e(int): void",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.functional.ArrayTest.testArrayElementsAreArrays(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderPathTest.skipEndOfDocument(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.GsonTypeAdapterTest$AtomicIntegerTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.GsonTypeAdapterTest$AtomicIntegerTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.util.concurrent.atomic.AtomicInteger"
    ],
    "com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$ClassWithTransientFields.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.tearDown(): void": [
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseFrom(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString): java.lang.Object"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker$2.canAccess(java.lang.reflect.AccessibleObject, java.lang.Object): boolean": [],
    "com.google.gson.GsonTest.testNewJsonWriter_Default(): void": [
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.newJsonWriter(java.io.Writer): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.FieldNamingPolicy$3.translateName(java.lang.reflect.Field): java.lang.String": [
      "java.lang.reflect.Field.getName(): java.lang.String",
      "com.google.gson.FieldNamingPolicy$3.upperCaseFirstLetter(java.lang.String): java.lang.String",
      "com.google.gson.FieldNamingPolicy$3.separateCamelCase(java.lang.String, char): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.protobuf.InvalidProtocolBufferException.getUnfinishedMessage(): com.google.protobuf.MessageLite",
      "com.google.protobuf.InvalidProtocolBufferException.unwrapIOException(): java.io.IOException",
      "com.google.protobuf.Parser.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.\u003cinit\u003e(com.google.gson.internal.bind.TreeTypeAdapter, com.google.gson.internal.bind.TreeTypeAdapter$1): void": [
      "com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.\u003cinit\u003e(com.google.gson.internal.bind.TreeTypeAdapter): void"
    ],
    "com.google.gson.GsonBuilderTest$HasTransients.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.metrics.PerformanceTest.testLargeObjectSerializationAndDeserialization(): void": [
      "java.lang.System.currentTimeMillis(): long",
      "java.io.PrintStream.printf(java.lang.String, java.lang.Object[]): java.io.PrintStream",
      "com.google.gson.metrics.PerformanceTest$2.\u003cinit\u003e(com.google.gson.metrics.PerformanceTest): void",
      "com.google.gson.metrics.PerformanceTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.NonUploadingCaliperRunner.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CollectionTest.testObjectCollectionSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getHeight(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasHeight(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setWidth(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasWidth(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasData(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setHeight(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.access$1400(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data): com.google.protobuf.UnknownFieldSet",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getWidth(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.onChanged(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.getInnerMessage1OrBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.hasAnotherField(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseFrom(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString): java.lang.Object"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testArrayFactory$0(): void": [
      "com.google.gson.reflect.TypeToken.getArray(java.lang.reflect.Type): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.functional.PrimitiveCharacterTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Computer.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameDueToBadNamingPolicy(): void": [
      "com.google.gson.GsonBuilder.setFieldNamingStrategy(com.google.gson.FieldNamingStrategy): com.google.gson.GsonBuilder",
      "com.google.gson.functional.NamingPolicyTest$1.\u003cinit\u003e(com.google.gson.functional.NamingPolicyTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.functional.NamingPolicyTest$ClassWithTwoFields.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.extractElementFromArray(java.lang.String): java.lang.String": [
      "java.lang.String.indexOf(int): int",
      "java.lang.String.substring(int, int): java.lang.String"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.DefaultTypeAdaptersTest$MyClassTypeAdapter.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.ClassSubject.isAssignableTo(java.lang.Class): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Class): com.google.common.truth.ClassSubject"
    ],
    "com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.GsonTypeAdapterTest$1.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.GsonTypeAdapterTest$1.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.GsonTypeAdapterTest$Abstract"
    ],
    "com.google.gson.JsonPrimitive.isBoolean(): boolean": [],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteNumbersWhenStrict$23(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.reflect.ReflectionHelper$RecordNotSupportedHelper.\u003cinit\u003e(com.google.gson.internal.reflect.ReflectionHelper$1): void",
      "com.google.gson.internal.reflect.ReflectionHelper$RecordSupportedHelper.\u003cinit\u003e(com.google.gson.internal.reflect.ReflectionHelper$1): void"
    ],
    "com.google.gson.functional.TypeVariableTest$Foo.\u003cinit\u003e(java.lang.Object, java.lang.Object, java.lang.Boolean): void": [
      "com.google.gson.functional.TypeVariableTest$Red.\u003cinit\u003e(java.lang.Object): void",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.Streams$AppendableWriter.append(java.lang.CharSequence): java.lang.Appendable": [
      "com.google.gson.internal.Streams$AppendableWriter.append(java.lang.CharSequence): java.io.Writer"
    ],
    "com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(java.lang.Class, com.google.gson.ReflectionAccessFilter$FilterResult): com.google.gson.internal.ObjectConstructor": [
      "java.lang.Class.getModifiers(): int",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.ConstructorConstructor$7.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.Class.getDeclaredConstructor(java.lang.Class[]): java.lang.reflect.Constructor",
      "com.google.gson.internal.ReflectionAccessFilterHelper.canAccess(java.lang.reflect.AccessibleObject, java.lang.Object): boolean",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.internal.reflect.ReflectionHelper.tryMakeAccessible(java.lang.reflect.Constructor): java.lang.String",
      "com.google.gson.internal.ConstructorConstructor$8.\u003cinit\u003e(java.lang.String): void",
      "java.lang.reflect.Modifier.isPublic(int): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.reflect.Constructor.getModifiers(): int",
      "com.google.gson.internal.ConstructorConstructor$9.\u003cinit\u003e(java.lang.reflect.Constructor): void",
      "java.lang.reflect.Modifier.isAbstract(int): boolean"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$2.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilder.\u003cinit\u003e(): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.util.ArrayDeque.\u003cinit\u003e(): void",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTypeAdapterTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonTypeAdapterTest$ExceptionTypeAdapter.\u003cinit\u003e(): void",
      "com.google.gson.GsonTypeAdapterTest$AtomicIntegerTypeAdapter.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.JsonStreamParserTest.setUp(): void": [
      "com.google.gson.JsonStreamParser.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.JavaVersionTest.testJava9(): void": [
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.JavaVersion.getMajorJavaVersion(java.lang.String): int"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$15.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest$ArrayOfArrays.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void"
    ],
    "com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Locale.getLanguage(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest$1.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "java.util.Deque.removeLast(): java.lang.Object",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.internal.bind.ObjectTypeAdapter.readTerminal(com.google.gson.stream.JsonReader, com.google.gson.stream.JsonToken): java.lang.Object",
      "java.util.Deque.addLast(java.lang.Object): void",
      "com.google.gson.internal.bind.ObjectTypeAdapter.tryBeginNesting(com.google.gson.stream.JsonReader, com.google.gson.stream.JsonToken): java.lang.Object",
      "java.util.ArrayDeque.\u003cinit\u003e(): void",
      "java.util.Deque.isEmpty(): boolean",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.LeniencyTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.setLenient(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.protobuf.functional.ProtosWithAnnotationsTest.testProtoWithAnnotations_serialize(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setInnerMessage1(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addData(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setNIdCt(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setYear(int): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setData(java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setWidth(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setLongTimestamp(long): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setOuterMessage(com.google.gson.protobuf.generated.Bag$OuterMessage$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setContent(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setHeight(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setId(java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setMonth(int): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$9.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.InterceptorFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CollectionTest$1.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap.readObject(java.io.ObjectInputStream): void": [
      "java.io.InvalidObjectException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.Java17RecordTest$9LocalRecord.hashCode(): int": [],
    "com.google.gson.functional.Java17RecordTest.lambda$testReflectionFilterBlockInaccessible$8(com.google.gson.Gson): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.JsonObjectTest.testEqualsNonEmptyObject(): void": [
      "com.google.common.testing.EqualsTester.addEqualityGroup(java.lang.Object[]): com.google.common.testing.EqualsTester",
      "com.google.common.testing.EqualsTester.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void",
      "com.google.common.testing.EqualsTester.testEquals(): com.google.common.testing.EqualsTester",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonObject.equals(java.lang.Object): boolean",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$DelegatingAndOverwriting$DelegatingAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parser(): com.google.protobuf.Parser": [],
    "com.google.gson.native_test.Java17RecordReflectionTest$PrivateRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.stream.JsonWriterTest.testNullStringValue(): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.JsonArrayTest.testIsEmpty(): void": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.gson.JsonArray.remove(int): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.IterableSubject.isNotEmpty(): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.IterableSubject.isEmpty(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.JsonStreamParser.next(): java.lang.Object": [
      "com.google.gson.JsonStreamParser.next(): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClassJsonAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClassJsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClass): void"
    ],
    "com.google.gson.GsonBuilder.generateNonExecutableJson(): com.google.gson.GsonBuilder": [],
    "com.google.gson.stream.JsonReaderPathTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.\u003cinit\u003e(com.google.gson.internal.bind.TreeTypeAdapter): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlTimestampTypeAdapter.\u003cinit\u003e(com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testThrowingDefaultConstructor(): void": [
      "com.google.common.truth.ThrowableSubject.isSameInstanceAs(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.metrics.BagOfPrimitives.getIntValue(): int": [],
    "com.google.gson.JsonNull.equals(java.lang.Object): boolean": [],
    "com.google.gson.JsonPrimitiveTest.testByteEqualsInteger(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.ObjectTest$4.serialize(com.google.gson.common.TestTypes$ClassWithNoFields, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonObject.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$Roshambo.values(): com.google.gson.functional.EnumTest$Roshambo[]": [
      "[Lcom.google.gson.functional.EnumTest$Roshambo;.clone(): java.lang.Object"
    ],
    "com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.gson.functional.MapTest$7.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.MapTest$7.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.FieldAttributes.getAnnotation(java.lang.Class): java.lang.annotation.Annotation": [
      "java.lang.reflect.Field.getAnnotation(java.lang.Class): java.lang.annotation.Annotation"
    ],
    "com.google.gson.internal.sql.SqlTypesGsonTest.setUp(): void": [
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.util.Locale.getDefault(): java.util.Locale",
      "java.util.TimeZone.getDefault(): java.util.TimeZone",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.example.Main.lambda$runTests$0(): com.google.gson.reflect.TypeToken": [
      "com.example.Main$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.appendObjectsToBuilder(java.lang.StringBuilder, java.util.List[]): void": [
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.appendObjectsToBuilder(java.lang.StringBuilder, java.lang.Iterable): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipArray(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void": [
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter$1.close(): void": [
      "java.lang.AssertionError.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$5.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testNullDeserialization(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.GsonBuilderTest.testSetLenient(): void": [
      "com.google.gson.stream.JsonWriter.getStrictness(): com.google.gson.Strictness",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.GsonBuilder.setLenient(): com.google.gson.GsonBuilder",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.newJsonReader(java.io.Reader): com.google.gson.stream.JsonReader",
      "com.google.gson.Gson.newJsonWriter(java.io.Writer): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonReader.getStrictness(): com.google.gson.Strictness"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.native_test.Java17RecordReflectionTest$1.read(com.google.gson.stream.JsonReader): com.google.gson.native_test.Java17RecordReflectionTest$RecordWithRegisteredAdapter"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonStreamParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void": [
      "com.google.gson.metrics.ParseBenchmark$GsonStreamParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [],
    "com.google.gson.functional.GsonVersionDiagnosticsTest.\u003cclinit\u003e(): void": [
      "java.util.regex.Pattern.compile(java.lang.String): java.util.regex.Pattern"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1LocalRecordDeserialization.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.hashCode(): int": [
      "java.lang.Object.hashCode(): int",
      "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.hashCodeOrZero(java.lang.Object): int",
      "java.util.Arrays.hashCode(java.lang.Object[]): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder.getContent(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type": [],
    "com.google.gson.GsonBuilder.serializeSpecialFloatingPointValues(): com.google.gson.GsonBuilder": [],
    "com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.CollectionTest$18.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.CollectionTest$19.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.CollectionTest$18.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getUnknownFields(): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.GsonTest$11.write(com.google.gson.stream.JsonWriter, com.google.gson.GsonTest$CustomClass1): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.GsonTest$1WrappingAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void"
    ],
    "com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject(): void": [
      "com.google.gson.functional.RawSerializationTest$Foo.\u003cinit\u003e(int): void",
      "com.google.gson.functional.RawSerializationTest$Bar.\u003cinit\u003e(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.RawSerializationTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.RawSerializationTest$2.\u003cinit\u003e(com.google.gson.functional.RawSerializationTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage2Builder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage2FieldBuilder(): com.google.protobuf.SingleFieldBuilderV3",
      "com.google.protobuf.SingleFieldBuilderV3.getBuilder(): com.google.protobuf.AbstractMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.equals(java.lang.Object): boolean": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasLongTimestamp(): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getCountryCode5F55(): java.lang.String",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasMonth(): boolean",
      "com.google.protobuf.GeneratedMessageV3.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasYear(): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getLongTimestamp(): long",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getMonth(): int",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasCountryCode5F55(): boolean",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.protobuf.UnknownFieldSet.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getYear(): int"
    ],
    "com.google.gson.GsonBuilderTest$4.\u003cinit\u003e(com.google.gson.GsonBuilderTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest.testSerializeProto(): void": [
      "java.lang.String.contains(java.lang.CharSequence): boolean",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setCount(int): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setMsg(java.lang.String): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilder(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.build(): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "org.junit.Assert.assertTrue(boolean): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest.testCustomFieldAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter.\u003cinit\u003e(int): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields(): void": [
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.common.TestTypes$SubSerializer.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.common.TestTypes$BaseSerializer.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$ClassWithBaseField.\u003cinit\u003e(com.google.gson.common.TestTypes$Base): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$Base.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.aShort(): short": [],
    "com.google.gson.internal.Excluder.isValidVersion(com.google.gson.annotations.Since, com.google.gson.annotations.Until): boolean": [
      "com.google.gson.internal.Excluder.isValidUntil(com.google.gson.annotations.Until): boolean",
      "com.google.gson.internal.Excluder.isValidSince(com.google.gson.annotations.Since): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setLongTimestamp(long): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.functional.Java17RecordTest.lambda$testClassReflectionFilter$4(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.JsonArray.\u003cinit\u003e(): void": [
      "com.google.gson.JsonElement.\u003cinit\u003e(): void",
      "java.util.ArrayList.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapterTest$1.write(com.google.gson.stream.JsonWriter, java.lang.String): void": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.ThreadLocal.remove(): void",
      "java.util.concurrent.ConcurrentMap.putAll(java.util.Map): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.ThreadLocal.set(java.lang.Object): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.Gson$FutureTypeAdapter.setDelegate(com.google.gson.TypeAdapter): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.util.Objects.requireNonNull(java.lang.Object, java.lang.String): java.lang.Object",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.ThreadLocal.get(): java.lang.Object",
      "com.google.gson.Gson$FutureTypeAdapter.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.TypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "java.util.concurrent.ConcurrentMap.get(java.lang.Object): java.lang.Object",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.List.iterator(): java.util.Iterator",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$19.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$19.write(com.google.gson.stream.JsonWriter, java.lang.StringBuilder): void"
    ],
    "com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.EnumTest$4.\u003cinit\u003e(com.google.gson.functional.EnumTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Class): com.google.common.truth.ClassSubject",
      "com.google.gson.functional.EnumTest$4.getType(): java.lang.reflect.Type",
      "java.util.EnumSet.allOf(java.lang.Class): java.util.EnumSet",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.functional.EnumTest$MyEnumTypeAdapter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.ClassSubject.isNotEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject"
    ],
    "com.google.gson.GsonTest.testNewJsonReader_Custom(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.stream.JsonReader.close(): void",
      "com.google.gson.GsonBuilder.setLenient(): com.google.gson.GsonBuilder",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.newJsonReader(java.io.Reader): com.google.gson.stream.JsonReader"
    ],
    "com.google.gson.MixedStreamTest.testWriteInvalidState(): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.JsonObjectTest.testDeepCopy(): void": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonObject.deepCopy(): com.google.gson.JsonObject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.JsonArray.add(java.lang.Number): void": [
      "java.util.ArrayList.add(java.lang.Object): boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$19.construct(): java.lang.Object": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "com.google.gson.internal.UnsafeAllocator.newInstance(java.lang.Class): java.lang.Object",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.internal.bind.TypeAdapters$22.read(com.google.gson.stream.JsonReader): java.net.URI": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.net.URI.\u003cinit\u003e(java.lang.String): void",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.JsonObjectAsMapTest.testViewUpdates(): void": [
      "com.google.gson.JsonObject.size(): int",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonObject.has(java.lang.String): boolean": [
      "com.google.gson.internal.LinkedTreeMap.containsKey(java.lang.Object): boolean"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing.lambda$test$3(): void": [
      "com.google.gson.reflect.TypeTokenTest$1Enclosing$4.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesList(): java.util.List": [
      "com.google.protobuf.RepeatedFieldBuilderV3.getMessageList(): java.util.List",
      "java.util.Collections.unmodifiableList(java.util.List): java.util.List"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapter$1.\u003cclinit\u003e(): void": [
      "com.google.gson.stream.JsonToken.values(): com.google.gson.stream.JsonToken[]",
      "com.google.gson.stream.JsonToken.ordinal(): int"
    ],
    "com.google.gson.interceptors.InterceptorFactory$InterceptorAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.interceptors.JsonPostDeserializer.postDeserialize(java.lang.Object): void"
    ],
    "com.google.gson.stream.MalformedJsonException.\u003cinit\u003e(java.lang.String): void": [
      "java.io.IOException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GadgetWithTwoParts.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$CrazyLongTypeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.common.TestTypes$CrazyLongTypeAdapter.serialize(java.lang.Long, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.protobuf.CodedInputStream.readTag(): int",
      "com.google.protobuf.CodedInputStream.readBytes(): com.google.protobuf.ByteString",
      "java.util.Collections.unmodifiableList(java.util.List): java.util.List",
      "com.google.protobuf.UnknownFieldSet.newBuilder(): com.google.protobuf.UnknownFieldSet$Builder",
      "com.google.protobuf.Internal$LongList.addLong(long): void",
      "com.google.protobuf.Internal$LongList.makeImmutable(): void",
      "com.google.protobuf.CodedInputStream.readMessage(com.google.protobuf.Parser, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.MessageLite",
      "com.google.protobuf.CodedInputStream.readRawVarint32(): int",
      "com.google.protobuf.InvalidProtocolBufferException.setUnfinishedMessage(com.google.protobuf.MessageLite): com.google.protobuf.InvalidProtocolBufferException",
      "com.google.protobuf.CodedInputStream.readInt64(): long",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseUnknownField(com.google.protobuf.CodedInputStream, com.google.protobuf.UnknownFieldSet$Builder, com.google.protobuf.ExtensionRegistryLite, int): boolean",
      "com.google.protobuf.CodedInputStream.popLimit(int): void",
      "com.google.protobuf.InvalidProtocolBufferException.\u003cinit\u003e(java.io.IOException): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.\u003cinit\u003e(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.makeExtensionsImmutable(): void",
      "com.google.protobuf.CodedInputStream.pushLimit(int): int",
      "com.google.protobuf.CodedInputStream.getBytesUntilLimit(): int",
      "com.google.protobuf.UnknownFieldSet$Builder.build(): com.google.protobuf.UnknownFieldSet",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newLongList(): com.google.protobuf.Internal$LongList"
    ],
    "com.google.gson.functional.CollectionTest.testQueueSerialization(): void": [
      "java.util.LinkedList.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "java.util.Queue.add(java.lang.Object): boolean",
      "com.google.gson.functional.CollectionTest$6.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "com.google.gson.functional.CollectionTest$6.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.google.gson.internal.bind.TypeAdapters$34.\u003cinit\u003e(java.lang.Class, com.google.gson.TypeAdapter): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStringAsNumberWithNonDigitExponent(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.functional.InstanceCreatorTest$2.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.functional.InstanceCreatorTest$2.createInstance(java.lang.reflect.Type): com.google.gson.common.TestTypes$Base"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.reflect.ReflectionHelper.isRecord(java.lang.Class): boolean",
      "com.google.gson.internal.ConstructorConstructor.get(com.google.gson.reflect.TypeToken): com.google.gson.internal.ObjectConstructor",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.internal.ReflectionAccessFilterHelper.getFilterResult(java.util.List, java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldReflectionAdapter.\u003cinit\u003e(com.google.gson.internal.ObjectConstructor, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData): void",
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(com.google.gson.Gson, com.google.gson.reflect.TypeToken, java.lang.Class, boolean, boolean): com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.\u003cinit\u003e(java.lang.Class, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData, boolean): void"
    ],
    "com.google.gson.functional.EnumTest$Roshambo$2.defeats(): com.google.gson.functional.EnumTest$Roshambo": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseFrom(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString): java.lang.Object"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.GsonTypesTest$C.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.MockExclusionStrategy.\u003cinit\u003e(boolean, boolean): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters.newFactory(java.lang.Class, java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.TypeAdapters$32.\u003cinit\u003e(java.lang.Class, java.lang.Class, com.google.gson.TypeAdapter): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.hasNIdCt(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type$1.findValueByNumber(int): com.google.protobuf.Internal$EnumLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type$1.findValueByNumber(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordNotSupportedHelper.getAccessor(java.lang.Class, java.lang.reflect.Field): java.lang.reflect.Method": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.hasContent(): boolean": [],
    "com.google.gson.internal.bind.TypeAdapters$32.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.internal.$Gson$Types.declaringClassOf(java.lang.reflect.TypeVariable): java.lang.Class": [
      "java.lang.reflect.TypeVariable.getGenericDeclaration(): java.lang.reflect.GenericDeclaration"
    ],
    "com.google.gson.stream.JsonReader$1.promoteNameToValue(com.google.gson.stream.JsonReader): void": [
      "com.google.gson.stream.JsonReader.access$000(com.google.gson.stream.JsonReader, java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.doPeek(): int",
      "com.google.gson.internal.bind.JsonTreeReader.promoteNameToValue(): void"
    ],
    "com.google.gson.functional.ExposeFieldsTest$ClassWithExposedFields.\u003cinit\u003e(java.lang.Integer, java.lang.Integer): void": [
      "com.google.gson.functional.ExposeFieldsTest$ClassWithExposedFields.\u003cinit\u003e(java.lang.Integer, java.lang.Integer, long, double, char): void"
    ],
    "com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.internal.Excluder.excludeClass(java.lang.Class, boolean): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization(): void": [
      "java.lang.Number.doubleValue(): double",
      "java.lang.Object.toString(): java.lang.String",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Number.shortValue(): short",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.Short.valueOf(short): java.lang.Short",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.lang.Number.intValue(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization(): void": [
      "com.google.gson.GsonBuilder.enableComplexMapKeySerialization(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$8.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void",
      "java.util.Map.keySet(): java.util.Set",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$Point.\u003cinit\u003e(int, int): void",
      "java.util.Map.values(): java.util.Collection",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$8.getType(): java.lang.reflect.Type",
      "java.util.Set.iterator(): java.util.Iterator",
      "java.util.Collection.iterator(): java.util.Iterator"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.isInitialized(): boolean": [],
    "com.google.gson.functional.ObjectTest$ClassWithPrivateNoArgsConstructor.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.annotations.SerializedName.value(): java.lang.String": [],
    "com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped(): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithRegisteredAdapter.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.TypeHierarchyAdapterTest$Company.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getCountryCode5F55(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage2(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest.testJsonDeserializer_JsonSerializerDelegate(): void": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Deserializer.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$3.\u003cinit\u003e(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Container.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$8.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$8.read(com.google.gson.stream.JsonReader): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$25.read(com.google.gson.stream.JsonReader): java.util.Currency": [
      "java.util.Currency.getInstance(java.lang.String): java.util.Currency",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String"
    ],
    "com.google.gson.functional.TypeVariableTest$Blue.equals(java.lang.Object): boolean": [
      "java.lang.Boolean.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.typeadapters.PostConstructAdapterFactoryTest$MultipleSandwiches.\u003cinit\u003e(java.util.List): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Factory$1.\u003cinit\u003e(com.example.ClassWithJsonAdapterAnnotation$Factory): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.hashCode(): int": [
      "java.lang.Object.hashCode(): int"
    ],
    "com.google.gson.functional.Java17RecordTest$1Allowed.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.MapTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clear(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testRuntimeTypeIsBaseType(): void": [
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$BillingInstrument.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testAddAll$9(java.util.List): void": [
      "java.util.List.addAll(int, java.util.Collection): boolean",
      "java.util.Collections.singletonList(java.lang.Object): java.util.List"
    ],
    "com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.functional.MapTest$26.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.functional.MapTest$26.getType(): java.lang.reflect.Type",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDataOrBuilder(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$DataOrBuilder": [
      "java.util.List.get(int): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$OuterMessage": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.equals(java.lang.Object): boolean": [
      "com.google.protobuf.GeneratedMessageV3.equals(java.lang.Object): boolean",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.hasAnotherField(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getNameThatTestsCaseFormatList(): com.google.protobuf.ProtocolStringList",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.protobuf.UnknownFieldSet.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getAnotherField(): java.lang.String"
    ],
    "com.google.gson.GsonTypeAdapterTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getDescriptorForType(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clear(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clear(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getNameBytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testSetStrictnessNull$0(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void"
    ],
    "com.google.gson.JsonParserTest.testParseMixedArray(): void": [
      "com.google.gson.JsonElement.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonElement.isJsonArray(): boolean",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonElement.getAsInt(): int",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.Gson.fromJson(java.io.Reader, com.google.gson.reflect.TypeToken): java.lang.Object": [
      "com.google.gson.Gson.newJsonReader(java.io.Reader): com.google.gson.stream.JsonReader",
      "com.google.gson.Gson.assertFullConsumption(java.lang.Object, com.google.gson.stream.JsonReader): void",
      "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, com.google.gson.reflect.TypeToken): java.lang.Object"
    ],
    "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void": [
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest$2.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.OverrideCoreTypeAdaptersTest$2.write(com.google.gson.stream.JsonWriter, java.lang.String): void"
    ],
    "com.example.ClassWithUnreferencedNoArgsConstructor.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.common.TestTypes$SubSerializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InstanceCreatorTest$1.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.functional.InstanceCreatorTest$1.createInstance(java.lang.reflect.Type): com.google.gson.common.TestTypes$Base"
    ],
    "com.google.gson.GsonTest$13.\u003cinit\u003e(com.google.gson.GsonTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$1.\u003cinit\u003e(): void": [
      "com.google.protobuf.AbstractParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getSerializedSize(): int": [
      "com.google.protobuf.UnknownFieldSet.getSerializedSize(): int",
      "com.google.protobuf.CodedOutputStream.computeInt32Size(int, int): int",
      "com.google.protobuf.CodedOutputStream.computeInt64Size(int, long): int",
      "com.google.protobuf.GeneratedMessageV3.computeStringSize(int, java.lang.Object): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.stream.JsonReaderTest.testLongs(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clear(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink(): void": [
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.keySet(): java.util.Set",
      "java.util.Iterator.remove(): void",
      "com.google.gson.internal.LinkedTreeMap.entrySet(): java.util.Set",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "com.google.gson.internal.LinkedTreeMapTest.assertIterationOrder(java.lang.Iterable, java.lang.Object[]): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.FieldAttributesTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.UnsafeAllocatorInstantiationTest.lambda$testAbstractClassInstantiation$1(): void": [
      "com.google.gson.internal.UnsafeAllocator.newInstance(java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.\u003cclinit\u003e(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type$1.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.$values(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type[]",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.\u003cinit\u003e(java.lang.String, int, int): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.values(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type[]"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$1.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.internal.LinkedTreeMap.containsKey(java.lang.Object): boolean"
    ],
    "com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.CollectionTest$17.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$Nested.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives, com.google.gson.common.TestTypes$BagOfPrimitives): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap.findByObject(java.lang.Object): com.google.gson.internal.LinkedTreeMap$Node": [
      "com.google.gson.internal.LinkedTreeMap.find(java.lang.Object, boolean): com.google.gson.internal.LinkedTreeMap$Node"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.graph.GraphAdapterBuilder$Factory.access$000(com.google.gson.graph.GraphAdapterBuilder$Factory): java.lang.ThreadLocal",
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.util.IdentityHashMap.\u003cinit\u003e(): void",
      "java.lang.ThreadLocal.remove(): void",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.lang.ThreadLocal.set(java.lang.Object): void",
      "com.google.gson.graph.GraphAdapterBuilder$Element.access$400(com.google.gson.graph.GraphAdapterBuilder$Element): java.lang.String",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.graph.GraphAdapterBuilder$Element.write(com.google.gson.stream.JsonWriter): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.graph.GraphAdapterBuilder$Graph.\u003cinit\u003e(java.util.Map, com.google.gson.graph.GraphAdapterBuilder$1): void",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.graph.GraphAdapterBuilder$Graph.nextName(): java.lang.String",
      "java.lang.ThreadLocal.get(): java.lang.Object",
      "java.util.Queue.add(java.lang.Object): boolean",
      "com.google.gson.graph.GraphAdapterBuilder$Graph.access$300(com.google.gson.graph.GraphAdapterBuilder$Graph): java.util.Queue",
      "com.google.gson.graph.GraphAdapterBuilder$Graph.access$200(com.google.gson.graph.GraphAdapterBuilder$Graph): java.util.Map",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.util.Queue.poll(): java.lang.Object",
      "com.google.gson.graph.GraphAdapterBuilder$Element.\u003cinit\u003e(java.lang.Object, java.lang.String, com.google.gson.TypeAdapter, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$3.\u003cinit\u003e(com.google.gson.functional.DefaultTypeAdaptersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson$5.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.Gson$5.read(com.google.gson.stream.JsonReader): java.util.concurrent.atomic.AtomicLongArray"
    ],
    "com.google.gson.JsonArrayTest.testStringPrimitiveAddition(): void": [
      "com.google.gson.JsonArray.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.add(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$17.read(com.google.gson.stream.JsonReader): java.math.BigInteger": [
      "com.google.gson.internal.NumberLimits.parseBigInteger(java.lang.String): java.math.BigInteger",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String"
    ],
    "com.google.gson.functional.MapTest.testConcurrentNavigableMap(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.MapSubject.containsKey(java.lang.Object): void",
      "com.google.gson.functional.MapTest$19.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$19.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "java.util.concurrent.ConcurrentNavigableMap.get(java.lang.Object): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.MapSubject.hasSize(int): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest$1CustomSubclass.\u003cinit\u003e(com.google.gson.internal.bind.JsonTreeReaderTest): void": [
      "com.google.gson.JsonElement.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.getAccessor(java.lang.Class, java.lang.reflect.Field): java.lang.reflect.Method": [
      "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.getAccessor(java.lang.Class, java.lang.reflect.Field): java.lang.reflect.Method"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.nextString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeReader.popStack(): java.lang.Object",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.bind.JsonTreeReader.locationString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.\u003cinit\u003e(): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomFieldAdapter$CustomAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DelegateTypeAdapterTest$1.\u003cinit\u003e(com.google.gson.functional.DelegateTypeAdapterTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter.tryBeginNesting(com.google.gson.stream.JsonReader, com.google.gson.stream.JsonToken): java.lang.Object": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonToken.ordinal(): int",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$8.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormatOrBuilder.getNameThatTestsCaseFormatCount(): int": [],
    "com.google.gson.metrics.SerializationBenchmark.main(java.lang.String[]): void": [
      "com.google.gson.metrics.NonUploadingCaliperRunner.run(java.lang.Class, java.lang.String[]): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory$Factory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory$Factory, com.google.gson.Gson, com.google.gson.reflect.TypeToken): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testInvalidJsonInput(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.dateAdapter(com.google.gson.TypeAdapterFactory): com.google.gson.TypeAdapter": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.TypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testRemoveIndex$11(java.util.List): void": [
      "java.util.List.remove(int): java.lang.Object"
    ],
    "com.google.gson.functional.ReflectionAccessTest$ClassWithPrivateMembers.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearNIdCt(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseFrom(com.google.protobuf.CodedInputStream): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.JsonPrimitiveTest.testAsNumber_Boolean(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testMapDeserializationWithUnquotedIntegerKeys(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.MapTest$12.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.MapSubject.containsKey(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$12.getType(): java.lang.reflect.Type",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.CustomDeserializerTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonTreeTest.testJsonTreeToString(): void": [
      "com.google.gson.functional.JsonTreeTest$SubTypeOfBagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String, float): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory$1.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory"
    ],
    "com.google.gson.ToNumberPolicyTest.lambda$testLongOrDouble$5(com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTypeAdapterTest$ExceptionTypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson.toJson(com.google.gson.JsonElement, java.lang.Appendable): void": [
      "com.google.gson.internal.Streams.writerForAppendable(java.lang.Appendable): java.io.Writer",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter): void",
      "com.google.gson.Gson.newJsonWriter(java.io.Writer): com.google.gson.stream.JsonWriter",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage1(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.SingleFieldBuilderV3.getMessage(): com.google.protobuf.AbstractMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.FormattingStyle.withNewline(java.lang.String): com.google.gson.FormattingStyle": [
      "com.google.gson.FormattingStyle.\u003cinit\u003e(java.lang.String, java.lang.String, boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest$6LocalRecord.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectJsonAdapterType(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$D.\u003cinit\u003e(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.GsonTest$9.\u003cinit\u003e(com.google.gson.GsonTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isNull(): void"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter): void"
    ],
    "com.google.gson.functional.ReadersWritersTest$1.\u003cinit\u003e(com.google.gson.functional.ReadersWritersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest.testCustomAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.native_test.Java17RecordReflectionTest$1.\u003cinit\u003e(com.google.gson.native_test.Java17RecordReflectionTest): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithRegisteredAdapter.\u003cinit\u003e(int): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$SimpleProto"
    ],
    "com.google.gson.functional.CustomDeserializerTest$DataHolderDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.CustomDeserializerTest$DataHolder": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.functional.CustomDeserializerTest$DataHolder.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api.\u003cclinit\u003e(): void": [
      "com.google.gson.metrics.ParseBenchmark$Api$3.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.metrics.ParseBenchmark$Api$1.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.metrics.ParseBenchmark$Api$5.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.metrics.ParseBenchmark$Api$4.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.metrics.ParseBenchmark$Api$2.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.metrics.ParseBenchmark$Api$6.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.metrics.ParseBenchmark$Api.$values(): com.google.gson.metrics.ParseBenchmark$Api[]"
    ],
    "com.google.gson.functional.UncategorizedTest$BaseTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.UncategorizedTest$Base": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.functional.UncategorizedTest$OperationType.valueOf(java.lang.String): com.google.gson.functional.UncategorizedTest$OperationType",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.functional.UncategorizedTest$Derived2.\u003cinit\u003e(): void",
      "com.google.gson.functional.UncategorizedTest$OperationType.ordinal(): int",
      "com.google.gson.functional.UncategorizedTest$Derived1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FormattingStyle.\u003cinit\u003e(java.lang.String, java.lang.String, boolean): void": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.util.Objects.requireNonNull(java.lang.Object, java.lang.String): java.lang.Object",
      "java.lang.String.matches(java.lang.String): boolean",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.stream.JsonReader.nextName(): java.lang.String": [
      "com.google.gson.stream.JsonReader.nextQuotedValue(char): java.lang.String",
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.nextUnquotedValue(): java.lang.String",
      "com.google.gson.stream.JsonReader.doPeek(): int"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testNumbers(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.nextInt(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextLong(): long",
      "com.google.gson.internal.bind.JsonTreeReader.nextDouble(): double",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.toBuilder(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.stream.JsonReader.readEscapeCharacter(): char": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.String.\u003cinit\u003e(char[], int, int): void",
      "com.google.gson.stream.JsonReader.syntaxError(java.lang.String): java.io.IOException"
    ],
    "com.google.gson.common.TestTypes$Base.\u003cclinit\u003e(): void": [
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter": [
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.util.regex.Matcher.matches(): boolean",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.String.equals(java.lang.Object): boolean",
      "java.io.Writer.append(java.lang.CharSequence): java.io.Writer",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.util.regex.Pattern.matcher(java.lang.CharSequence): java.util.regex.Matcher",
      "com.google.gson.stream.JsonWriter.writeDeferredName(): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonWriter.isTrustedNumberType(java.lang.Class): boolean",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonWriter.beforeValue(): void"
    ],
    "com.google.gson.stream.JsonWriter.replaceTop(int): void": [],
    "com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$ClassOverridingEquals.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest$2LocalRecord.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1Adapter.\u003cinit\u003e(): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonParser.parseReader(java.io.Reader): com.google.gson.JsonElement": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.JsonParser.parseReader(com.google.gson.stream.JsonReader): com.google.gson.JsonElement",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$8.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$12LocalRecord.hashCode(): int": [],
    "com.google.gson.functional.CustomTypeAdaptersTest$9.serialize(byte[], java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.\u003cinit\u003e(int): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.metrics.BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testFloatSerialization(): void": [
      "java.lang.Float.toString(float): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.serializeSpecialFloatingPointValues(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testLazilyParsedNumber$10(java.io.ObjectOutputStream): void": [
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "java.io.ObjectOutputStream.writeObject(java.lang.Object): void"
    ],
    "com.google.gson.internal.JavaVersionTest.testJava8(): void": [
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.JavaVersion.getMajorJavaVersion(java.lang.String): int"
    ],
    "com.google.gson.ToNumberPolicyTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$5.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$1.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$1.compare(java.lang.Comparable, java.lang.Comparable): int": [
      "java.lang.Comparable.compareTo(java.lang.Object): int"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$10.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testTypeTokenRaw$18(): void": [
      "com.google.gson.reflect.TypeTokenTest$14.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void"
    ],
    "com.example.Main.lambda$runTests$1(): com.google.gson.reflect.TypeToken": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.getDescriptorForType(): com.google.protobuf.Descriptors$EnumDescriptor": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.getDescriptor(): com.google.protobuf.Descriptors$EnumDescriptor"
    ],
    "com.google.gson.FieldNamingPolicyTest.testLowerCasingLocaleIndependent(): void": [
      "com.google.common.truth.StandardSubjectBuilder.that(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Locale.getDefault(): java.util.Locale",
      "java.lang.String.toLowerCase(java.util.Locale): java.lang.String",
      "java.lang.reflect.Field.getName(): java.lang.String",
      "com.google.common.truth.Truth.assertWithMessage(java.lang.String, java.lang.Object[]): com.google.common.truth.StandardSubjectBuilder",
      "com.google.common.truth.StringSubject.matches(java.lang.String): void",
      "java.lang.Class.getDeclaredField(java.lang.String): java.lang.reflect.Field",
      "java.util.Locale.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.doesNotMatch(java.lang.String): void",
      "com.google.common.truth.Truth.assertWithMessage(java.lang.String): com.google.common.truth.StandardSubjectBuilder",
      "com.google.gson.FieldNamingPolicy.translateName(java.lang.reflect.Field): java.lang.String",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLongWithStringSerializationPolicy(): void": [
      "com.google.gson.GsonBuilder.setLongSerializationPolicy(com.google.gson.LongSerializationPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.util.concurrent.atomic.AtomicLong.get(): long",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$7.read(com.google.gson.stream.JsonReader): com.google.gson.functional.StreamingTypeAdaptersTest$Person": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.common.base.Splitter.on(char): com.google.common.base.Splitter",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.common.base.Splitter.splitToList(java.lang.CharSequence): java.util.List",
      "java.lang.Integer.parseInt(java.lang.String): int",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Person.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.DelegateTypeAdapterTest$StatsTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.functional.DelegateTypeAdapterTest$StatsTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.functional.DelegateTypeAdapterTest$StatsTypeAdapterFactory, com.google.gson.TypeAdapter): void",
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonSerializer$Serializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes(): void": [
      "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Character): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilderForType(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilderForType(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.JsonElement.getAsShort(): short": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.CustomTypeAdaptersTest$1.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder.getDataList(): java.util.List": [],
    "com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationNull(): void": [
      "com.google.gson.GsonBuilder.setLongSerializationPolicy(com.google.gson.LongSerializationPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.LongSerializationPolicy.serialize(java.lang.Long): com.google.gson.JsonElement",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addNumbers(long): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.Internal$LongList.addLong(long): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureNumbersIsMutable(): void"
    ],
    "com.google.gson.functional.NamingPolicyTest$AtName.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonPrimitive.getAsCharacter(): char": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.String.charAt(int): char",
      "java.lang.String.isEmpty(): boolean",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$27.write(com.google.gson.stream.JsonWriter, java.util.Locale): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.util.Locale.toString(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderPathTest$Factory$2.create(java.lang.String): com.google.gson.stream.JsonReader": [
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.Streams.parse(com.google.gson.stream.JsonReader): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.Java17RecordTest$1Adapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.Java17RecordTest$1Adapter.serialize(java.lang.String, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.value(boolean): com.google.gson.stream.JsonWriter": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage1(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.functional.MapTest$21.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteNumbersWhenStrict$24(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.sql.SqlTypesGsonTest.testDefaultSqlTimeSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.sql.Time.\u003cinit\u003e(long): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ExposeFieldsTest$SomeObject.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(int, int): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, int, int, com.google.gson.internal.bind.DefaultDateTypeAdapter$1): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createFactory(com.google.gson.internal.bind.DefaultDateTypeAdapter): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.GsonTest$5.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.GsonTest$5.write(com.google.gson.stream.JsonWriter, com.google.gson.GsonTest$CustomClass1): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DateTypeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CustomTypeAdaptersTest$DateTypeAdapter.serialize(java.util.Date, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.example.Main.lambda$testEnum$19(com.google.gson.Gson): java.lang.String": [
      "com.example.EnumClass.toString(): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addData(int, com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data",
      "com.google.protobuf.RepeatedFieldBuilderV3.addMessage(int, com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.ensureDataIsMutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void",
      "java.util.List.add(int, java.lang.Object): void"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.typeadapters.UtcDateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.util.Date): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$4(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.functional.JavaUtilConcurrentAtomicTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$6.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api$1.newParser(): com.google.gson.metrics.ParseBenchmark$Parser": [
      "com.google.gson.metrics.ParseBenchmark$JacksonStreamParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.functional.GsonVersionDiagnosticsTest.testAssertionErrorInSerializationPrintsVersion(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.functional.GsonVersionDiagnosticsTest.ensureAssertionErrorPrintsGsonVersion(java.lang.AssertionError): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.serializeSpecialFloatingPointValues(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Character): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "java.util.List.iterator(): java.util.Iterator",
      "com.google.gson.internal.reflect.ReflectionHelper.createExceptionForUnexpectedIllegalAccess(java.lang.IllegalAccessException): java.lang.RuntimeException",
      "java.util.Iterator.next(): java.lang.Object"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.matches(java.lang.String): void",
      "java.util.Date.\u003cinit\u003e(long): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$JsonElementAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$JsonElementAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getSerializedSize(): int": [
      "com.google.protobuf.UnknownFieldSet.getSerializedSize(): int",
      "com.google.protobuf.CodedOutputStream.computeMessageSize(int, com.google.protobuf.MessageLite): int",
      "com.google.protobuf.GeneratedMessageV3.computeStringSize(int, java.lang.Object): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getOuterMessage(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage1(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage2(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testDeserializeMissingTypeField(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "org.junit.Assert.fail(): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory"
    ],
    "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest$PrincipalTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest$PrincipalTypeAdapter.write(com.google.gson.stream.JsonWriter, java.security.Principal): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilder(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithRegisteredAdapter.i(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.finalize(java.lang.Object): java.lang.Object": [
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.finalize(java.lang.Object[]): java.lang.Object"
    ],
    "com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.flush(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.functional.JavaUtilTest.testProperties(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Properties.getProperty(java.lang.String): java.lang.String"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter.newFactory(com.google.gson.ToNumberStrategy): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.ObjectTypeAdapter$1.\u003cinit\u003e(com.google.gson.ToNumberStrategy): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilder(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getContent(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.valueOf(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonObjectAsDoubleWrapper$14(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.GsonTest$2DummyAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1LocalRecord.hashCode(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$PublicRecord.toString(): java.lang.String": [],
    "com.google.gson.internal.LinkedTreeMap$EntrySet.\u003cinit\u003e(com.google.gson.internal.LinkedTreeMap): void": [
      "java.util.AbstractSet.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.NumberLimits.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.hashCode(): int": [],
    "com.google.gson.functional.Java17RecordTest$5LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest.testAsBigDecimals(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.setObjectToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.setNumberToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testVeryLongUnquotedString(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "java.lang.String.\u003cinit\u003e(char[]): void",
      "java.util.Arrays.fill(char[], char): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getSimplesOrBuilderList(): java.util.List": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.fromJson(java.io.Reader, java.lang.Class): java.lang.Object",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithRegisteredAdapter.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.protobuf.ProtoTypeAdapter.serialize(com.google.protobuf.Message, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.stream.JsonWriterTest.testBadNestingArray(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Annotations.\u003cclinit\u003e(): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.protobuf.GeneratedMessage$GeneratedExtension.internalInit(com.google.protobuf.Descriptors$FieldDescriptor): void",
      "com.google.protobuf.GeneratedMessage.newFileScopedGeneratedExtension(java.lang.Class, com.google.protobuf.Message): com.google.protobuf.GeneratedMessage$GeneratedExtension",
      "com.google.protobuf.DescriptorProtos.getDescriptor(): com.google.protobuf.Descriptors$FileDescriptor",
      "com.google.protobuf.Descriptors$FileDescriptor.internalBuildGeneratedFileFrom(java.lang.String[], com.google.protobuf.Descriptors$FileDescriptor[]): com.google.protobuf.Descriptors$FileDescriptor",
      "com.google.protobuf.Descriptors$FileDescriptor.getExtensions(): java.util.List"
    ],
    "com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass(): void": [
      "com.google.gson.GsonTypeAdapterTest$Concrete.\u003cinit\u003e(): void",
      "com.google.gson.GsonTypeAdapterTest.assertSerialized(java.lang.String, java.lang.Class, boolean, boolean, java.lang.Object): void"
    ],
    "com.google.gson.functional.EnumWithObfuscatedTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testDelegation(): void": [
      "com.google.gson.functional.ReflectionAccessFilterTest$SuperTestClass.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.ReflectionAccessFilterTest$3.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void",
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.gson.functional.ReflectionAccessFilterTest$OtherClass.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.ReflectionAccessFilterTest$2.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void",
      "com.google.gson.functional.ReflectionAccessFilterTest$SubTestClass.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): java.lang.reflect.ParameterizedType",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.MapTest$24.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$9.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CustomTypeAdaptersTest$9.serialize(byte[], java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.writeDeferredName(): void",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(double): java.lang.StringBuilder",
      "java.lang.Double.toString(double): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonWriter.beforeValue(): void",
      "java.io.Writer.append(java.lang.CharSequence): java.io.Writer",
      "java.lang.Double.isInfinite(double): boolean",
      "java.lang.Double.isNaN(double): boolean"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory, com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testAdd$7(java.util.List): void": [
      "java.util.List.add(int, java.lang.Object): void"
    ],
    "com.google.gson.functional.Java17RecordTest.testEmptyRecord(): void": [
      "com.google.gson.functional.Java17RecordTest$1EmptyRecord.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$2.read(com.google.gson.stream.JsonReader): java.util.BitSet": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "java.util.BitSet.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "java.util.BitSet.set(int): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonToken.ordinal(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.NullObjectAndFieldTest$1.serialize(com.google.gson.functional.NullObjectAndFieldTest$ObjectWithField, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonSerializationContext.serialize(java.lang.Object): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithCustomNames.equals(java.lang.Object): boolean": [],
    "com.google.gson.stream.MalformedJsonException.\u003cinit\u003e(java.lang.Throwable): void": [
      "java.io.IOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String": [
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, java.lang.Appendable): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.internal.bind.NumberTypeAdapter$1.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserClassAnnotationAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.JsonObject.entrySet(): java.util.Set",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.gson.JsonObject.has(java.lang.String): boolean",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.TypeAdapter.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.gson.internal.Streams.write(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String): void",
      "java.util.Iterator.hasNext(): boolean",
      "java.lang.Class.getName(): java.lang.String",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$2.shouldSkipClass(java.lang.Class): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage1FieldBuilder(): com.google.protobuf.SingleFieldBuilderV3": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getParentForChildren(): com.google.protobuf.GeneratedMessageV3$BuilderParent",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.isClean(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage1(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.protobuf.SingleFieldBuilderV3.\u003cinit\u003e(com.google.protobuf.AbstractMessage, com.google.protobuf.AbstractMessage$BuilderParent, boolean): void"
    ],
    "com.google.gson.functional.UncategorizedTest$OperationType.valueOf(java.lang.String): com.google.gson.functional.UncategorizedTest$OperationType": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.net.URI.toASCIIString(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory$Factory, com.google.gson.Gson, com.google.gson.reflect.TypeToken): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$Quantity.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$13.createInstance(java.lang.reflect.Type): com.google.gson.GsonTest$CustomClass3": [
      "com.google.gson.GsonTest$CustomClass3.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.MapTest.testBooleanKeyDeserialization(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$34.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.functional.MapTest$34.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.functional.MapTest.testMapWithQuotes(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization(): void": [
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement",
      "com.google.gson.DefaultMapJsonSerializerTest$2.\u003cinit\u003e(com.google.gson.DefaultMapJsonSerializerTest): void",
      "com.google.gson.JsonElement.isJsonObject(): boolean",
      "com.google.gson.JsonObject.has(java.lang.String): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.DefaultMapJsonSerializerTest$2.getType(): java.lang.reflect.Type",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderDeserializer.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.internal.bind.TypeAdapters$26.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$26.write(com.google.gson.stream.JsonWriter, java.util.Calendar): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$18.construct(): java.lang.Object": [
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.build(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.google.gson.functional.MapTest$35.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings(): void": [
      "com.google.gson.functional.ReadersWritersTest$1.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.ReadersWritersTest$1.\u003cinit\u003e(com.google.gson.functional.ReadersWritersTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.JsonArray.remove(int): com.google.gson.JsonElement": [
      "java.util.ArrayList.remove(int): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.\u003cinit\u003e(): void",
      "com.google.protobuf.UnknownFieldSet.newBuilder(): com.google.protobuf.UnknownFieldSet$Builder",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.parseUnknownField(com.google.protobuf.CodedInputStream, com.google.protobuf.UnknownFieldSet$Builder, com.google.protobuf.ExtensionRegistryLite, int): boolean",
      "com.google.protobuf.InvalidProtocolBufferException.setUnfinishedMessage(com.google.protobuf.MessageLite): com.google.protobuf.InvalidProtocolBufferException",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.makeExtensionsImmutable(): void",
      "com.google.protobuf.CodedInputStream.readTag(): int",
      "com.google.protobuf.InvalidProtocolBufferException.\u003cinit\u003e(java.io.IOException): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.protobuf.CodedInputStream.readInt32(): int",
      "com.google.protobuf.CodedInputStream.readBytes(): com.google.protobuf.ByteString",
      "com.google.protobuf.UnknownFieldSet$Builder.build(): com.google.protobuf.UnknownFieldSet"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.hasCountryCode5F55(): boolean": [],
    "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.\u003cinit\u003e(java.lang.Class): void": [
      "java.security.AccessController.doPrivileged(java.security.PrivilegedAction): java.lang.Object",
      "com.google.gson.annotations.SerializedName.value(): java.lang.String",
      "java.lang.reflect.Field.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter$1.\u003cinit\u003e(com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter, java.lang.Class): void",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void",
      "java.lang.Enum.name(): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.annotations.SerializedName.alternate(): java.lang.String[]",
      "java.lang.Enum.toString(): java.lang.String",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void",
      "java.util.HashMap.\u003cinit\u003e(): void",
      "java.lang.reflect.Field.getAnnotation(java.lang.Class): java.lang.annotation.Annotation"
    ],
    "com.google.gson.Gson$4.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.Gson$4.read(com.google.gson.stream.JsonReader): java.util.concurrent.atomic.AtomicLong"
    ],
    "com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.ExposeFieldsTest$ClassWithExposedFields.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ExposeFieldsTest$ClassWithExposedFields.\u003cinit\u003e(java.lang.Integer, java.lang.Integer): void"
    ],
    "com.google.gson.stream.JsonWriter.jsonValue(java.lang.String): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.writeDeferredName(): void",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beforeValue(): void",
      "java.io.Writer.append(java.lang.CharSequence): java.io.Writer"
    ],
    "com.google.gson.stream.JsonReader.endArray(): void": [
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.doPeek(): int"
    ],
    "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest.testCustomAdapterForRecords(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.common.truth.ClassSubject.isNotEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Class): com.google.common.truth.ClassSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.Internal$LongList.makeImmutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onBuilt(): void",
      "java.util.Collections.unmodifiableList(java.util.List): java.util.List",
      "com.google.protobuf.RepeatedFieldBuilderV3.build(): java.util.List"
    ],
    "com.google.gson.FieldNamingPolicy$2.translateName(java.lang.reflect.Field): java.lang.String": [
      "java.lang.reflect.Field.getName(): java.lang.String",
      "com.google.gson.FieldNamingPolicy$2.upperCaseFirstLetter(java.lang.String): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictMultipleTopLevelValuesWithSkipValue(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.functional.ReadersWritersTest$1CustomAppendable.append(char): java.lang.Appendable": [
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.InstanceCreatorTest$5.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$EntrySet.remove(java.lang.Object): boolean": [
      "com.google.gson.internal.LinkedTreeMap.findByEntry(java.util.Map$Entry): com.google.gson.internal.LinkedTreeMap$Node",
      "com.google.gson.internal.LinkedTreeMap.removeInternal(com.google.gson.internal.LinkedTreeMap$Node, boolean): void"
    ],
    "com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.util.concurrent.atomic.AtomicBoolean.\u003cinit\u003e(boolean): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.util.concurrent.CountDownLatch.countDown(): void",
      "java.util.concurrent.atomic.AtomicBoolean.get(): boolean",
      "java.util.concurrent.ExecutorService.execute(java.lang.Runnable): void",
      "java.util.concurrent.CountDownLatch.await(): void",
      "java.util.concurrent.CountDownLatch.\u003cinit\u003e(int): void",
      "com.google.gson.functional.ConcurrencyTest$2.\u003cinit\u003e(com.google.gson.functional.ConcurrencyTest, java.util.concurrent.CountDownLatch, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.CountDownLatch): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.concurrent.Executors.newFixedThreadPool(int): java.util.concurrent.ExecutorService"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.toBuilder(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.metrics.CollectionsDeserializationBenchmark.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.expect(com.google.gson.stream.JsonToken): void": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.bind.JsonTreeReader.locationString(): java.lang.String"
    ],
    "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest.testSerializeRecords(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest$PrincipalTypeAdapter.\u003cinit\u003e(): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.Class.getDeclaredConstructor(java.lang.Class[]): java.lang.reflect.Constructor",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.reflect.Constructor.newInstance(java.lang.Object[]): java.lang.Object"
    ],
    "com.example.Main.testEnumSerializedName(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.stream.JsonScope.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getYear(): int": [],
    "com.google.gson.stream.JsonReaderTest.testSkipVeryLongUnquotedString(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReaderTest.repeat(char, int): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.build(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$1.\u003cinit\u003e(com.google.gson.functional.NullObjectAndFieldTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonParserTest.testParseReader(): void": [
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonParser.parseReader(java.io.Reader): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonElement.getAsInt(): int",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonElement.isJsonObject(): boolean",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.TypeAdapters$32.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class"
    ],
    "com.google.gson.functional.InheritanceTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonDeserializer$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonDeserializer$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.util.List"
    ],
    "com.google.gson.FieldNamingPolicyTest$2Dummy.\u003cinit\u003e(com.google.gson.FieldNamingPolicyTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.ConcurrencyTest$2.run(): void": [
      "java.util.concurrent.atomic.AtomicBoolean.set(boolean): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.concurrent.CountDownLatch.countDown(): void",
      "java.util.concurrent.CountDownLatch.await(): void"
    ],
    "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.internal.TroubleshootingGuide.createUrl(java.lang.String): java.lang.String",
      "com.google.gson.stream.JsonReader.locationString(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.LazilyParsedNumber.asBigDecimal(): java.math.BigDecimal": [
      "com.google.gson.internal.NumberLimits.parseBigDecimal(java.lang.String): java.math.BigDecimal"
    ],
    "com.google.gson.internal.LinkedTreeMap$KeySet$1.\u003cinit\u003e(com.google.gson.internal.LinkedTreeMap$KeySet): void": [
      "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.\u003cinit\u003e(com.google.gson.internal.LinkedTreeMap): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testEmptyStringName(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.GsonTest$11.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.GsonTest$11.read(com.google.gson.stream.JsonReader): com.google.gson.GsonTest$CustomClass1"
    ],
    "com.google.gson.JsonObjectAsMapTest.testSize(): void": [
      "com.google.gson.JsonObject.size(): int",
      "java.util.Map.clear(): void",
      "java.util.Map.size(): int",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.MapSubject.hasSize(int): void"
    ],
    "com.google.gson.ToNumberPolicyTest.lambda$testNullsAreNeverExpected$9(): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberPolicy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.TypeAdapterTest.testFromJson_Reader_TrailingData(): void": [
      "com.google.gson.TypeAdapter.fromJson(java.io.Reader): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserDeserializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testVeryLongUnquotedLiteral(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReaderTest.repeat(char, int): java.lang.String"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.CustomTypeAdaptersTest$DataHolder"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.functional.CircularReferenceTest$1.serialize(com.google.gson.functional.CircularReferenceTest$ClassWithSelfReference, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void",
      "com.google.gson.JsonSerializationContext.serialize(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.JsonPrimitive.isNumber(): boolean": [],
    "com.google.gson.interceptors.InterceptorTest.testField(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.typeadapters.PostConstructAdapterFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$20.construct(): java.lang.Object": [
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.example.GenericClasses$UsingGenericClass.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void": [
      "com.google.gson.common.TestTypes$Base.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$2.construct(): java.lang.Object": [
      "com.google.gson.InstanceCreator.createInstance(java.lang.reflect.Type): java.lang.Object"
    ],
    "com.google.gson.GsonTest$5.\u003cinit\u003e(com.google.gson.GsonTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$18.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$18.read(com.google.gson.stream.JsonReader): com.google.gson.internal.LazilyParsedNumber"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.assertCorrectlyDeserialized(java.lang.Object): void": [
      "java.util.List.get(int): java.lang.Object",
      "java.util.List.size(): int",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.ArrayTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilderTest.testModificationAfterCreate(): void": [
      "com.google.gson.Gson.newBuilder(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilderTest.assertCustomGson(com.google.gson.Gson): void",
      "com.google.gson.GsonBuilderTest$4.\u003cinit\u003e(com.google.gson.GsonBuilderTest): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilderTest$3.\u003cinit\u003e(com.google.gson.GsonBuilderTest): void",
      "com.google.gson.GsonBuilderTest.assertDefaultGson(com.google.gson.Gson): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilderTest$5.\u003cinit\u003e(com.google.gson.GsonBuilderTest): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getYear(): int": [],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithBigDecimal.getExpectedJson(): java.lang.String",
      "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithBigDecimal.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteFloatsWhenStrict$8(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(float): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$FooTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.CustomTypeAdaptersTest$Foo": [
      "com.google.gson.JsonDeserializationContext.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type): java.lang.Object"
    ],
    "com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects(): void": [
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$ArrayOfObjects.\u003cinit\u003e(): void",
      "com.google.gson.functional.PrettyPrintingTest.print(java.lang.String): void"
    ],
    "com.google.gson.internal.$Gson$Types.getCollectionElementType(java.lang.reflect.Type, java.lang.Class): java.lang.reflect.Type": [
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "com.google.gson.internal.$Gson$Types.getSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.EnumTest$Color.values(): com.google.gson.functional.EnumTest$Color[]": [
      "[Lcom.google.gson.functional.EnumTest$Color;.clone(): java.lang.Object"
    ],
    "com.google.gson.GsonTypeAdapterTest$AtomicIntegerTypeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.GsonTypeAdapterTest$AtomicIntegerTypeAdapter.serialize(java.util.concurrent.atomic.AtomicInteger, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId(): void": [
      "java.lang.String.valueOf(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.TreeTypeAdaptersTest$Id.getValue(): java.lang.String",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void"
    ],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest.testAsListOfLongsOrDoubles(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$2.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.Ordered.inOrder(): void",
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$2.getType(): java.lang.reflect.Type",
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$1.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.GsonBuilder.setObjectToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.setNumberToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder",
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$1.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void"
    ],
    "com.google.gson.JsonArray.add(java.lang.Boolean): void": [
      "java.util.ArrayList.add(java.lang.Object): boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void"
    ],
    "com.google.gson.JsonArray.equals(java.lang.Object): boolean": [
      "java.util.ArrayList.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object": [
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, com.google.gson.reflect.TypeToken): java.lang.Object",
      "java.lang.Class.cast(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.Primitives.wrap(java.lang.Class): java.lang.Class"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserClassAnnotationAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setCountryCode5F55Bytes(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.CollectionsDeserializationBenchmark$1.\u003cinit\u003e(): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonToken.\u003cclinit\u003e(): void": [
      "com.google.gson.stream.JsonToken.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.stream.JsonToken.$values(): com.google.gson.stream.JsonToken[]"
    ],
    "com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.util.Collection.size(): int",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Map.containsValue(java.lang.Object): boolean",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.Collection.iterator(): java.util.Iterator"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.createGsonObjectWithFooTypeAdapter(): com.google.gson.Gson": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.CustomTypeAdaptersTest$FooTypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Character): void": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Character): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$Base.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.functional.CustomSerializerTest$1.\u003cinit\u003e(com.google.gson.functional.CustomSerializerTest): void"
    ],
    "com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders(): void": [
      "com.google.gson.Gson.fromJson(java.io.Reader, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.ReadersWritersTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.ReadersWritersTest$2.\u003cinit\u003e(com.google.gson.functional.ReadersWritersTest): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$Node.equals(java.lang.Object): boolean": [
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "java.lang.Object.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.ParameterizedTypesTest$7.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.ParameterizedTypesTest$7.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.gson.functional.ParameterizedTypesTest$8.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.getExpectedJson(com.google.gson.ParameterizedTypeFixtures$MyParameterizedType): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.\u003cinit\u003e(java.lang.Object): void",
      "com.google.gson.functional.ParameterizedTypesTest$8.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeInstanceCreator.\u003cinit\u003e(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.typeadapters.PostConstructAdapterFactoryTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.UnsafeAllocator.create(): com.google.gson.internal.UnsafeAllocator": [
      "com.google.gson.internal.UnsafeAllocator$4.\u003cinit\u003e(): void",
      "java.lang.reflect.Field.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.UnsafeAllocator$3.\u003cinit\u003e(java.lang.reflect.Method): void",
      "java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "java.lang.Class.forName(java.lang.String): java.lang.Class",
      "java.lang.Class.getDeclaredField(java.lang.String): java.lang.reflect.Field",
      "com.google.gson.internal.UnsafeAllocator$1.\u003cinit\u003e(java.lang.reflect.Method, java.lang.Object): void",
      "java.lang.reflect.Method.setAccessible(boolean): void",
      "java.lang.Integer.intValue(): int",
      "java.lang.reflect.Field.setAccessible(boolean): void",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "java.lang.Class.getMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "com.google.gson.internal.UnsafeAllocator$2.\u003cinit\u003e(java.lang.reflect.Method, int): void"
    ],
    "com.google.gson.metrics.PerformanceTest$ClassWithList.\u003cinit\u003e(): void": [
      "com.google.gson.metrics.PerformanceTest$ClassWithList.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.buildPartial(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.internal.bind.TypeAdapters$5.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$5.read(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testGetAdapterDelegation(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.JsonArray.add(java.lang.Character): void": [
      "java.util.ArrayList.add(java.lang.Object): boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Character): void"
    ],
    "com.google.gson.JsonArray.add(java.lang.String): void": [
      "java.util.ArrayList.add(java.lang.Object): boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest$11LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.native_test.Java17RecordReflectionTest.testLocalRecord(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.interceptors.InterceptorTest.testList(): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.interceptors.InterceptorTest$1.\u003cinit\u003e(com.google.gson.interceptors.InterceptorTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.interceptors.InterceptorTest$1.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void": [
      "com.google.protobuf.UnknownFieldSet.newBuilder(): com.google.protobuf.UnknownFieldSet$Builder",
      "com.google.protobuf.InvalidProtocolBufferException.setUnfinishedMessage(com.google.protobuf.MessageLite): com.google.protobuf.InvalidProtocolBufferException",
      "com.google.protobuf.CodedInputStream.readInt64(): long",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.makeExtensionsImmutable(): void",
      "com.google.protobuf.CodedInputStream.readTag(): int",
      "com.google.protobuf.InvalidProtocolBufferException.\u003cinit\u003e(java.io.IOException): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.parseUnknownField(com.google.protobuf.CodedInputStream, com.google.protobuf.UnknownFieldSet$Builder, com.google.protobuf.ExtensionRegistryLite, int): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.\u003cinit\u003e(): void",
      "com.google.protobuf.CodedInputStream.readInt32(): int",
      "com.google.protobuf.CodedInputStream.readBytes(): com.google.protobuf.ByteString",
      "com.google.protobuf.UnknownFieldSet$Builder.build(): com.google.protobuf.UnknownFieldSet"
    ],
    "com.google.gson.JsonArrayAsListTest.testRemoveIndex(): void": [
      "com.google.gson.JsonArray.asList(): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "java.util.List.remove(int): java.lang.Object",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.reflect.Type): java.lang.Object"
    ],
    "com.google.gson.functional.MapTest.testMapSerializationWithNullKey(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.gson.functional.MapTest$8.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.MapTest$8.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, com.google.gson.reflect.TypeToken): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.AssertionError.getMessage(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.gson.stream.JsonReader.getStrictness(): com.google.gson.Strictness"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clear(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.MapTest.testMapDeserialization(): void": [
      "com.google.gson.functional.MapTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.MapTest$2.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.GsonTypeAdapterTest$ExceptionTypeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.GsonTypeAdapterTest$ExceptionTypeAdapter.serialize(java.util.concurrent.atomic.AtomicLong, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.example.Main.testUnreferencedConstructorHasArgs(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createDefaultsAdapterFactory(): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, int, int, com.google.gson.internal.bind.DefaultDateTypeAdapter$1): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createFactory(com.google.gson.internal.bind.DefaultDateTypeAdapter): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.internal.ConstructorConstructor$7.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonParserTest.lambda$testParseInvalidJson$0(): void": [
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.toArray(java.lang.Object[]): java.lang.Object[]": [
      "java.util.ArrayList.toArray(java.lang.Object[]): java.lang.Object[]"
    ],
    "com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.TypeAdapters$34.\u003cinit\u003e(java.lang.Class, com.google.gson.TypeAdapter): void"
    ],
    "com.google.gson.functional.InheritanceTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientNameValueSeparator(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest.testDeserialization(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.graph.GraphAdapterBuilder.addType(java.lang.reflect.Type): com.google.gson.graph.GraphAdapterBuilder",
      "org.junit.Assert.assertSame(java.lang.Object, java.lang.Object): void",
      "com.google.gson.graph.GraphAdapterBuilder.\u003cinit\u003e(): void",
      "com.google.gson.graph.GraphAdapterBuilder.registerOn(com.google.gson.GsonBuilder): void"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateParseWithTimezone(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition): java.util.Date",
      "java.util.GregorianCalendar.set(int, int, int, int, int): void",
      "java.text.ParsePosition.\u003cinit\u003e(int): void",
      "java.util.GregorianCalendar.getTime(): java.util.Date",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.internal.bind.util.ISO8601UtilsTest.createUtcCalendar(): java.util.GregorianCalendar"
    ],
    "com.google.gson.functional.Java17RecordTest.testMultipleNamesInTheSameString(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseFrom(byte[]): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.Parser.parseFrom(byte[]): java.lang.Object"
    ],
    "com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.CollectionTest$1.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.CollectionTest$1.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$8.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldAttributes.getDeclaredType(): java.lang.reflect.Type": [
      "java.lang.reflect.Field.getGenericType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.StringTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory$Factory$1.delegate(): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class, java.lang.String, boolean): com.google.gson.typeadapters.RuntimeTypeAdapterFactory": [
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.\u003cinit\u003e(java.lang.Class, java.lang.String, boolean): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming(): void": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$Foo.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newTypeAdapter(java.lang.String): com.google.gson.TypeAdapter",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newSerializer(java.lang.String): com.google.gson.JsonSerializer",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newDeserializer(java.lang.String): com.google.gson.JsonDeserializer",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$4.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$19.write(com.google.gson.stream.JsonWriter, java.lang.StringBuilder): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.lang.StringBuilder.toString(): java.lang.String"
    ],
    "com.google.gson.functional.EnumTest$MyEnum.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Outer.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$900(com.google.protobuf.Internal$LongList): com.google.protobuf.Internal$LongList": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.mutableCopy(com.google.protobuf.Internal$LongList): com.google.protobuf.Internal$LongList"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "java.util.Map.entrySet(): java.util.Set",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory$1.nullSafe(): com.google.gson.TypeAdapter",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.typeadapters.RuntimeTypeAdapterFactory, com.google.gson.TypeAdapter, java.util.Map, java.util.Map): void",
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.reflect.TypeToken.matches(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map): boolean": [
      "java.lang.reflect.TypeVariable.getName(): java.lang.String",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.native_test.ReflectionTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.ClassWithExposeAnnotation.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clear(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.net.URL.toExternalForm(): java.lang.String"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.getCanonicalRecordConstructor(java.lang.Class): java.lang.reflect.Constructor": [
      "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.getCanonicalRecordConstructor(java.lang.Class): java.lang.reflect.Constructor"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.hasWidth(): boolean": [],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory": [
      "java.lang.Class.getSimpleName(): java.lang.String",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class, java.lang.String): com.google.gson.typeadapters.RuntimeTypeAdapterFactory"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testDateSerialization(): void": [
      "java.text.DateFormat.format(java.util.Date): java.lang.String",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.toLiteral(java.lang.String): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(int): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.dateAdapter(com.google.gson.TypeAdapterFactory): com.google.gson.TypeAdapter",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "java.text.DateFormat.getDateInstance(int, java.util.Locale): java.text.DateFormat",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Date.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ReflectionAccessFilter$FilterResult.\u003cclinit\u003e(): void": [
      "com.google.gson.ReflectionAccessFilter$FilterResult.$values(): com.google.gson.ReflectionAccessFilter$FilterResult[]",
      "com.google.gson.ReflectionAccessFilter$FilterResult.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.getBag(): com.google.gson.common.TestTypes$BagOfPrimitives": [],
    "com.google.gson.functional.NamingPolicyTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessTest.testSerializeInternalImplementationObject(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.ReflectionAccessTest.assertInaccessibleException(java.lang.String, java.lang.Class): com.google.gson.JsonIOException",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$3LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.reflect.TypeTokenTest$7.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getAnotherField(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest.testDoubleSupertype(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type): java.lang.reflect.WildcardType",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.ConcurrencyTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$31.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$Gender.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.EnumTest$Gender.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.functional.EnumTest$Gender.$values(): com.google.gson.functional.EnumTest$Gender[]"
    ],
    "com.google.gson.stream.JsonWriterTest.testNonFiniteDoublesWhenStrict(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.internal.sql.SqlDateTypeAdapter.read(com.google.gson.stream.JsonReader): java.sql.Date": [
      "java.sql.Date.\u003cinit\u003e(long): void",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.text.DateFormat.parse(java.lang.String): java.util.Date",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "java.util.Date.getTime(): long"
    ],
    "com.google.gson.JsonArray.remove(com.google.gson.JsonElement): boolean": [
      "java.util.ArrayList.remove(java.lang.Object): boolean"
    ],
    "com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipTopLevelObject(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.writeDeferredName(): void",
      "com.google.gson.stream.JsonWriter.string(java.lang.String): void",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beforeValue(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.toLiteral(java.lang.String): java.lang.String": [],
    "com.google.gson.stream.JsonReaderTest.testStringWithLeadingSlash(): void": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.String": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory$1.delegate(): com.google.gson.TypeAdapter",
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object"
    ],
    "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.writeDeferredName(): void",
      "com.google.gson.stream.JsonWriter.beforeValue(): void",
      "java.io.Writer.write(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory, com.google.gson.TypeAdapter): void",
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.GsonTypeAdapterTest$AtomicIntegerTypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapterTest.testNullDateSerialization(): void": [
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations"
    ],
    "com.google.gson.functional.ReadersWritersTest.testWriterForSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.Object.toString(): java.lang.String",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.Appendable): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$FooJsonAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo": [
      "java.lang.String.toUpperCase(java.util.Locale): java.lang.String",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo.valueOf(java.lang.String): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo"
    ],
    "com.google.gson.functional.Java17RecordTest$1Adapter.equals(java.lang.Object): boolean": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.hasLongTimestamp(): boolean": [],
    "com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.lang.Float.isInfinite(float): boolean",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Float.floatValue(): float",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.example.NoSerializedNameMain$TestClassNotAbstract.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.JavaVersionTest.testJava10(): void": [
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.JavaVersion.getMajorJavaVersion(java.lang.String): int"
    ],
    "com.google.gson.functional.MapTest.testGeneralMapField(): void": [
      "com.google.gson.GsonBuilder.enableComplexMapKeySerialization(): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$MapWithGeneralMapParameters.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testBoolValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$Person.equals(java.lang.Object): boolean": [
      "java.lang.String.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.protobuf.GeneratedMessageV3$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder",
      "com.google.protobuf.RepeatedFieldBuilderV3.clear(): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getNumbersList(): java.util.List": [],
    "com.google.gson.metrics.ParseBenchmark$GsonStreamParser.readToken(com.google.gson.stream.JsonReader): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonToken.ordinal(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.internal.ConstructorConstructor.toString(): java.lang.String": [
      "java.lang.Object.toString(): java.lang.String"
    ],
    "com.google.gson.ReflectionAccessFilter$FilterResult.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clear(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.metrics.PerformanceTest.testLargeCollectionSerialization(): void": [
      "java.util.ArrayList.\u003cinit\u003e(int): void",
      "com.google.gson.metrics.PerformanceTest$CollectionEntry.\u003cinit\u003e(java.lang.String, java.lang.String): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.sql.SqlTypesGsonTest.testDefaultSqlTimestampSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.sql.Timestamp.\u003cinit\u003e(long): void",
      "com.google.common.truth.StringSubject.matches(java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.ConstructorConstructor.newSpecialCollectionConstructor(java.lang.reflect.Type, java.lang.Class): com.google.gson.internal.ObjectConstructor": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.internal.ConstructorConstructor$6.\u003cinit\u003e(java.lang.reflect.Type): void",
      "com.google.gson.internal.ConstructorConstructor$5.\u003cinit\u003e(java.lang.reflect.Type): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1.\u003cinit\u003e(com.google.gson.functional.Java17RecordTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$ClassWithNoFields.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper.isAndroidType(java.lang.Class): boolean": [
      "com.google.gson.internal.ReflectionAccessFilterHelper.isAndroidType(java.lang.String): boolean",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clear(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setMsgBytes(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.onChanged(): void"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields(): void": [
      "java.util.Collection.add(java.lang.Object): boolean",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$Base.\u003cinit\u003e(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ClassWithContainersOfBaseFields.\u003cinit\u003e(java.util.Collection, java.util.Map): void",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$Sub.\u003cinit\u003e(int, int): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$10.read(com.google.gson.stream.JsonReader): com.google.gson.GsonTest$CustomClass1": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$2.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.maybeForceBuilderInitialization(): void",
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest$1.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.CustomDeserializerTest$MyBase": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.JsonDeserializationContext.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.functional.CustomDeserializerTest$SubTypes.getSubclass(): java.lang.reflect.Type",
      "com.google.gson.functional.CustomDeserializerTest$SubTypes.valueOf(java.lang.String): com.google.gson.functional.CustomDeserializerTest$SubTypes"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$Point.toString(): java.lang.String": [],
    "com.google.gson.functional.ConcurrencyTest$1.\u003cinit\u003e(com.google.gson.functional.ConcurrencyTest, java.util.concurrent.CountDownLatch, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.CountDownLatch): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilder(com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.FieldNamingPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.FieldNamingPolicy$1): void": [
      "com.google.gson.FieldNamingPolicy.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1Blocked.hashCode(): int": [],
    "com.google.gson.internal.bind.TypeAdapters$24.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$24.read(com.google.gson.stream.JsonReader): java.util.UUID"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Element.access$602(com.google.gson.graph.GraphAdapterBuilder$Element, com.google.gson.TypeAdapter): com.google.gson.TypeAdapter": [],
    "com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedArrayWithSkipValue(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.GenericArrayTypeTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, java.lang.String, com.google.gson.internal.bind.DefaultDateTypeAdapter$1): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, java.lang.String): void"
    ],
    "com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField(): void": [
      "com.google.gson.ExposeAnnotationExclusionStrategyTest.createFieldAttributes(java.lang.String): java.lang.reflect.Field",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testDelegatingAdapterFactory_Delayed(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormatOrBuilder.hasAnotherField(): boolean": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClassJsonAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClass": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClass.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.internal.LinkedTreeMap$KeySet.\u003cinit\u003e(com.google.gson.internal.LinkedTreeMap): void": [
      "java.util.AbstractSet.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomConstructor.i(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilder(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.JsonStreamParserTest.testIterator(): void": [
      "com.google.gson.JsonStreamParser.hasNext(): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonStreamParser.next(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.JsonPrimitiveTest.testEquals(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Character): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.gson.JsonPrimitive.equals(java.lang.Object): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.internal.UnsafeAllocator$3.\u003cinit\u003e(java.lang.reflect.Method): void": [
      "com.google.gson.internal.UnsafeAllocator.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap.entrySet(): java.util.Set": [
      "com.google.gson.internal.LinkedTreeMap$EntrySet.\u003cinit\u003e(com.google.gson.internal.LinkedTreeMap): void"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields(): void": [
      "java.util.Collection.add(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ParameterizedBase.\u003cinit\u003e(java.lang.Object): void",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ClassWithContainersOfParameterizedBaseFields.\u003cinit\u003e(java.util.Collection, java.util.Map): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ParameterizedSub.\u003cinit\u003e(java.lang.Object, java.lang.Object): void"
    ],
    "com.example.ClassWithAdapter$Adapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.example.ClassWithAdapter$Adapter.read(com.google.gson.stream.JsonReader): com.example.ClassWithAdapter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setNameThatTestsCaseFormat(int, java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.LazyStringList.set(int, java.lang.Object): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.ensureNameThatTestsCaseFormatIsMutable(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonNull.\u003cclinit\u003e(): void": [
      "com.google.gson.JsonNull.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite.subSequence(int, int): java.lang.CharSequence": [
      "java.lang.String.\u003cinit\u003e(char[], int, int): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.primitiveDefaults(): java.util.Map": [
      "java.lang.Character.valueOf(char): java.lang.Character",
      "java.lang.Short.valueOf(short): java.lang.Short",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Float.valueOf(float): java.lang.Float",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonStreamParser.parse(char[], com.google.gson.metrics.ParseBenchmark$Document): void": [
      "java.io.CharArrayReader.\u003cinit\u003e(char[]): void",
      "com.google.gson.metrics.ParseBenchmark$GsonStreamParser.readToken(com.google.gson.stream.JsonReader): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.close(): void"
    ],
    "com.google.gson.functional.EnumTest.testEnumMap(): void": [
      "java.util.EnumMap.put(java.lang.Enum, java.lang.Object): java.lang.Object",
      "com.google.gson.functional.EnumTest$7.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.EnumTest$7.\u003cinit\u003e(com.google.gson.functional.EnumTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.util.EnumMap.\u003cinit\u003e(java.lang.Class): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Collections.singletonMap(java.lang.Object, java.lang.Object): java.util.Map",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject"
    ],
    "com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$ClassWithObjects.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.common.TestTypes$ClassWithArray.\u003cinit\u003e(java.lang.Object[]): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization(): void": [
      "java.util.LinkedList.\u003cinit\u003e(): void",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "java.util.List.add(java.lang.Object): boolean",
      "java.util.SortedSet.add(java.lang.Object): boolean",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.TreeSet.\u003cinit\u003e(): void",
      "java.util.Set.add(java.lang.Object): boolean",
      "java.util.Queue.add(java.lang.Object): boolean",
      "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.\u003cinit\u003e(java.util.List, java.util.Queue, java.util.Set, java.util.SortedSet): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Float.valueOf(float): java.lang.Float",
      "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.internal.$Gson$Types.indexOf(java.lang.Object[], java.lang.Object): int": [
      "java.util.NoSuchElementException.\u003cinit\u003e(): void",
      "java.lang.Object.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Short.valueOf(short): java.lang.Short",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonElementTypeMismatch(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.ObjectTest$ClassWithCollectionField.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest.testSkipValue_emptyJsonObject(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.skipValue(): void"
    ],
    "com.google.gson.GsonBuilderTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "java.lang.AssertionError.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.CustomTypeAdaptersTest$StringHolder"
    ],
    "com.google.gson.internal.LazilyParsedNumberTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$7.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.testTypeTokenSubSubClass(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$3.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$3.read(com.google.gson.stream.JsonReader): com.google.gson.functional.TypeAdapterPrecedenceTest$Foo"
    ],
    "com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.ObjectTest$ClassWithEmptyStringFields.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.jsonValue(java.lang.String): com.google.gson.stream.JsonWriter": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations"
    ],
    "com.google.gson.internal.bind.TypeAdapters$31.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.functional.InstanceCreatorTest$1.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.writeTo(com.google.protobuf.CodedOutputStream): void": [
      "com.google.protobuf.CodedOutputStream.writeInt32(int, int): void",
      "com.google.protobuf.GeneratedMessageV3.writeString(com.google.protobuf.CodedOutputStream, int, java.lang.Object): void",
      "com.google.protobuf.UnknownFieldSet.writeTo(com.google.protobuf.CodedOutputStream): void"
    ],
    "com.google.gson.Gson$5.read(com.google.gson.stream.JsonReader): java.util.concurrent.atomic.AtomicLongArray": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "java.util.concurrent.atomic.AtomicLongArray.\u003cinit\u003e(int): void",
      "java.util.concurrent.atomic.AtomicLongArray.set(int, long): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.util.List.size(): int",
      "java.lang.Number.longValue(): long",
      "java.lang.Long.longValue(): long",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$11LocalRecord.a(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.example.Main.testGenericClasses(java.util.function.BiConsumer): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$Course.\u003cinit\u003e(com.google.gson.functional.TreeTypeAdaptersTest$Id, int, com.google.gson.functional.TreeTypeAdaptersTest$Assignment, java.util.List): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter$1.run(): java.lang.reflect.Field[]": [
      "java.util.ArrayList.\u003cinit\u003e(int): void",
      "java.lang.reflect.Field.isEnumConstant(): boolean",
      "java.util.ArrayList.add(java.lang.Object): boolean",
      "java.util.ArrayList.toArray(java.lang.Object[]): java.lang.Object[]",
      "java.lang.Class.getDeclaredFields(): java.lang.reflect.Field[]",
      "java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[], boolean): void"
    ],
    "com.example.TestExecutor.lambda$same$1(): java.lang.AssertionError": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testEmptyObject(): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory": [
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory.\u003cinit\u003e(java.lang.Class, java.lang.String): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault(): void": [
      "org.junit.Assert.fail(java.lang.String): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [],
    "com.google.gson.Strictness.valueOf(java.lang.String): com.google.gson.Strictness": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite.setChars(char[]): void": [],
    "com.google.gson.GsonTest$5.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.GsonTest$5.read(com.google.gson.stream.JsonReader): com.google.gson.GsonTest$CustomClass1"
    ],
    "com.google.gson.functional.ReflectionAccessTest$1.checkPermission(java.security.Permission): void": [
      "java.security.Permission.equals(java.lang.Object): boolean",
      "java.lang.SecurityException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$3.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$3.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.TypeAdapterPrecedenceTest$Foo): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$13.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.Primitives.isPrimitive(java.lang.reflect.Type): boolean": [
      "java.lang.Class.isPrimitive(): boolean"
    ],
    "com.google.gson.ObjectTypeAdapterTest.testDeserializeDeeplyNestedArrays(): void": [
      "java.util.List.get(int): java.lang.Object",
      "java.util.List.isEmpty(): boolean",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.ObjectTypeAdapterTest.repeat(java.lang.String, int): java.lang.String"
    ],
    "com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LazilyParsedNumber.toString(): java.lang.String": [],
    "com.google.gson.GsonTest$10.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.GsonTest$10.write(com.google.gson.stream.JsonWriter, com.google.gson.GsonTest$CustomClass1): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getSerializedSize(): int": [
      "com.google.protobuf.UnknownFieldSet.getSerializedSize(): int",
      "java.util.List.get(int): java.lang.Object",
      "com.google.protobuf.CodedOutputStream.computeInt32Size(int, int): int",
      "com.google.protobuf.CodedOutputStream.computeEnumSize(int, int): int",
      "com.google.protobuf.CodedOutputStream.computeMessageSize(int, com.google.protobuf.MessageLite): int",
      "java.util.List.size(): int"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter.i(): int": [],
    "com.google.gson.common.TestTypes$PrimitiveArray.getExpectedJson(): java.lang.String": [
      "java.lang.StringBuilder.append(long): java.lang.StringBuilder",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.GsonBuilderTest$CustomClass2.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldReflectionAdapter.finalize(java.lang.Object): java.lang.Object": [],
    "com.google.gson.functional.MapTest.testMapSerialization(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.MapTest$1.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.MapTest$1.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault(): void": [
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearContent(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.native_test.ReflectionTest$1.createInstance(java.lang.reflect.Type): com.google.gson.native_test.ReflectionTest$ClassWithoutDefaultConstructor": [
      "com.google.gson.native_test.ReflectionTest$ClassWithoutDefaultConstructor.\u003cinit\u003e(int): void"
    ],
    "com.google.gson.JsonObjectAsMapTest.testPut(): void": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest$1.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest.testSkipValue_atArrayEnd(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.getPath(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.skipValue(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clear(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.getDescriptorForType(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.functional.UncategorizedTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilderTest.testSetVersionInvalid(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.setVersion(double): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.HashSet.add(java.lang.Object): boolean",
      "java.util.HashSet.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.regression.OSGiTest.assertSubstring(java.lang.String, java.lang.String, java.lang.String): void": [
      "java.lang.String.contains(java.lang.CharSequence): boolean",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setNIdCt(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities(): void": [
      "com.google.gson.internal.bind.JsonTreeWriter.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.internal.bind.JsonTreeWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "java.lang.Float.valueOf(float): java.lang.Float",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlTypesGsonTest.testNullSerializationAndDeserialization(java.lang.Class): void": [
      "com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerializationAndDeserialization(com.google.gson.Gson, java.lang.Class): void"
    ],
    "com.google.gson.internal.bind.DateTypeAdapter$1.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.internal.bind.DateTypeAdapter.\u003cinit\u003e(): void",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class"
    ],
    "com.google.gson.GsonTest$1DummyAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProtoOrBuilder.getCount(): int": [],
    "com.google.gson.functional.InstanceCreatorTest$3.createInstance(java.lang.reflect.Type): com.google.gson.common.TestTypes$Base": [
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void"
    ],
    "com.google.gson.MixedStreamTest.testReadClosed(): void": [
      "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.close(): void",
      "com.google.gson.MixedStreamTest$1.\u003cinit\u003e(com.google.gson.MixedStreamTest): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.MixedStreamTest$1.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter": [
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.MapTypeAdapterFactory.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, boolean): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.BagOfPrimitives.getExpectedJson(): java.lang.String": [
      "java.lang.StringBuilder.append(long): java.lang.StringBuilder",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(boolean): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonArrayAsDoublePrimitive$13(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.ensureNameThatTestsCaseFormatIsMutable(): void": [
      "com.google.protobuf.LazyStringArrayList.\u003cinit\u003e(com.google.protobuf.LazyStringList): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.stream.JsonReader.push(int): void": [
      "java.util.Arrays.copyOf(int[], int): int[]",
      "java.util.Arrays.copyOf(java.lang.Object[], int): java.lang.Object[]"
    ],
    "com.google.gson.GsonTest$TestTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$10(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.access$1100(): boolean": [],
    "com.google.gson.functional.StreamingTypeAdaptersTest.\u003cinit\u003e(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.functional.StreamingTypeAdaptersTest$1.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.GsonTest.testGetAdapter_FutureAdapterConcurrency(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "java.util.concurrent.atomic.AtomicReference.\u003cinit\u003e(): void",
      "com.google.gson.GsonTest$4.\u003cinit\u003e(com.google.gson.GsonTest, java.util.concurrent.atomic.AtomicReference, com.google.gson.Gson): void",
      "java.util.concurrent.CountDownLatch.countDown(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.concurrent.CountDownLatch.await(): void",
      "com.google.gson.GsonTest$3.\u003cinit\u003e(com.google.gson.GsonTest, java.util.concurrent.CountDownLatch, java.util.concurrent.CountDownLatch): void",
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "java.lang.Thread.join(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "java.util.concurrent.atomic.AtomicReference.get(): java.lang.Object",
      "java.util.concurrent.CountDownLatch.\u003cinit\u003e(int): void",
      "java.lang.Thread.start(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.isInitialized(): boolean": [],
    "com.google.gson.GenericArrayTypeTest$1.\u003cinit\u003e(com.google.gson.GenericArrayTypeTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.NonUploadingCaliperRunner.run(java.lang.Class, java.lang.String[]): void": [
      "com.google.caliper.runner.CaliperMain.main(java.lang.Class, java.lang.String[]): void",
      "com.google.gson.metrics.NonUploadingCaliperRunner.concat(java.lang.String, java.lang.String[]): java.lang.String[]"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class, java.lang.String): com.google.gson.typeadapters.RuntimeTypeAdapterFactory": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.util.Map.containsKey(java.lang.Object): boolean",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.GsonTest$7.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.GsonTest$7.createInstance(java.lang.reflect.Type): com.google.gson.GsonTest$CustomClass3"
    ],
    "com.google.gson.functional.Java17RecordTest$6LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.JsonArray.getAsBigDecimal(): java.math.BigDecimal": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsBigDecimal(): java.math.BigDecimal"
    ],
    "com.google.gson.functional.FieldExclusionTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$2.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NamingPolicyTest$1.\u003cinit\u003e(com.google.gson.functional.NamingPolicyTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.TypeHierarchyAdapterTest$ManagerAdapter.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.TypeHierarchyAdapterTest$EmployeeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.testArrayFactory(): void": [
      "com.google.gson.reflect.TypeTokenTest$2.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.reflect.TypeTokenTest$1.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void",
      "com.google.gson.reflect.TypeTokenTest$3.getType(): java.lang.reflect.Type",
      "com.google.gson.reflect.TypeTokenTest$4.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void",
      "com.google.gson.reflect.TypeToken.getArray(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "com.google.gson.reflect.TypeTokenTest$3.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$8.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Boolean": [
      "com.google.gson.JsonElement.getAsInt(): int",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.common.TestTypes$ClassWithArray.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeVariableTest$1.\u003cinit\u003e(com.google.gson.functional.TypeVariableTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StringTest.testStringValueDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.buildPartial(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations"
    ],
    "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.getExpectedJson(): java.lang.String": [
      "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.append(java.lang.StringBuilder, java.util.Collection): java.lang.StringBuilder",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$BaseStringAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$BaseStringAdapter.serialize(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.ConstructorConstructor.\u003cinit\u003e(java.util.Map, boolean, java.util.List): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.$Gson$Types.resolveTypeVariable(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.TypeVariable): java.lang.reflect.Type": [
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "java.lang.Class.getTypeParameters(): java.lang.reflect.TypeVariable[]",
      "com.google.gson.internal.$Gson$Types.declaringClassOf(java.lang.reflect.TypeVariable): java.lang.Class",
      "com.google.gson.internal.$Gson$Types.indexOf(java.lang.Object[], java.lang.Object): int",
      "com.google.gson.internal.$Gson$Types.getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class): java.lang.reflect.Type"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isInstanceOf(java.lang.Class): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.UncategorizedTest$BaseTypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.SerializedNameTest$MyClass.\u003cinit\u003e(java.lang.String, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$ReaderUser.toString(): java.lang.String": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.getData(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A$JsonAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A$JsonAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A"
    ],
    "com.google.gson.reflect.TypeTokenTest$12.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeTokenTest$1SubTypeToken.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void"
    ],
    "com.google.gson.GsonTest$10.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.GsonTest$10.read(com.google.gson.stream.JsonReader): com.google.gson.GsonTest$CustomClass1"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonArrayAsShortWrapper$12(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addSimples(com.google.gson.protobuf.generated.Bag$SimpleProto$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.build(): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureSimplesIsMutable(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.addMessage(com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3"
    ],
    "com.google.gson.protobuf.functional.ProtosWithAnnotationsTest.setUp(): void": [
      "com.google.gson.protobuf.ProtoTypeAdapter.newBuilder(): com.google.gson.protobuf.ProtoTypeAdapter$Builder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.setEnumSerialization(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization): com.google.gson.protobuf.ProtoTypeAdapter$Builder",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.addSerializedNameExtension(com.google.protobuf.Extension): com.google.gson.protobuf.ProtoTypeAdapter$Builder",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.addSerializedEnumValueExtension(com.google.protobuf.Extension): com.google.gson.protobuf.ProtoTypeAdapter$Builder",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.build(): com.google.gson.protobuf.ProtoTypeAdapter",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.setFieldNameSerializationFormat(com.google.common.base.CaseFormat, com.google.common.base.CaseFormat): com.google.gson.protobuf.ProtoTypeAdapter$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest$12LocalRecord.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$22.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.functional.MapTest$22.getType(): java.lang.reflect.Type",
      "com.google.common.truth.MapSubject.containsEntry(java.lang.Object, java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.hashCodeOrZero(java.lang.Object): int": [
      "java.lang.Object.hashCode(): int"
    ],
    "com.google.gson.internal.bind.TypeAdapters$24.write(com.google.gson.stream.JsonWriter, java.util.UUID): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.util.UUID.toString(): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$RegisteredUserAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.reflect.Java17ReflectionHelperTest$PrincipalImpl.hashCode(): int": [
      "java.util.Objects.hash(java.lang.Object[]): int"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$2(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.isInitialized(): boolean": [],
    "com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.IterableSubject.isEmpty(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal(): void": [
      "java.math.BigDecimal.toPlainString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Graph.\u003cinit\u003e(java.util.Map, com.google.gson.graph.GraphAdapterBuilder$1): void": [
      "com.google.gson.graph.GraphAdapterBuilder$Graph.\u003cinit\u003e(java.util.Map): void"
    ],
    "com.google.gson.stream.JsonReaderTest.assertUnexpectedStructureError(java.lang.IllegalStateException, java.lang.String, java.lang.String, java.lang.String): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.String.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.InterfaceTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.functional.InterfaceTest$TestObject.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.Java17RecordTest$5LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilderForType(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$Id.\u003cinit\u003e(java.lang.String, java.lang.reflect.Type): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clear(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.it.ShrinkingIT.jarsToTest(): java.util.List": [
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List"
    ],
    "com.google.gson.internal.bind.TypeAdapters$27.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$27.write(com.google.gson.stream.JsonWriter, java.util.Locale): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.internal.bind.TypeAdapters$17.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$17.write(com.google.gson.stream.JsonWriter, java.math.BigInteger): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DataHolder.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonDeserializer$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonDeserializer$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonDeserializer"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.Object.toString(): java.lang.String",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.getExpectedJson(): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest$9.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.ParameterizedTypesTest$9.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.\u003cinit\u003e(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, java.lang.Appendable): void"
    ],
    "com.google.gson.functional.UncategorizedTest$1.\u003cinit\u003e(com.google.gson.functional.UncategorizedTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$2.read(com.google.gson.stream.JsonReader): com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.toBuilder(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testCapitalizedFalseFailWhenStrict(): void": [
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$2.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest$5.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.internal.bind.TreeTypeAdapter.delegate(): com.google.gson.TypeAdapter",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.JsonDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object",
      "com.google.gson.internal.Streams.parse(com.google.gson.stream.JsonReader): com.google.gson.JsonElement"
    ],
    "com.google.gson.regression.OSGiTest.testComGoogleGsonAnnotationsPackage(): void": [
      "com.google.common.truth.StandardSubjectBuilder.that(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.jar.Manifest.getMainAttributes(): java.util.jar.Attributes",
      "com.google.gson.regression.OSGiTest.findManifest(java.lang.String): java.util.jar.Manifest",
      "com.google.gson.regression.OSGiTest.assertSubstring(java.lang.String, java.lang.String, java.lang.String): void",
      "java.util.jar.Attributes.getValue(java.lang.String): java.lang.String",
      "com.google.common.truth.Truth.assertWithMessage(java.lang.String): com.google.common.truth.StandardSubjectBuilder",
      "com.google.common.truth.StringSubject.isNotNull(): void"
    ],
    "com.google.gson.functional.PrettyPrintingTest$ClassWithMap.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonObjectTest.testAddingNullPropertyValue(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.JsonObject.has(java.lang.String): boolean",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.close(int, int, char): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers(): void": [
      "com.google.gson.GsonBuilder.excludeFieldsWithModifiers(int[]): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilderTest$HasModifiers.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext(): void": [
      "com.google.gson.JsonStreamParser.hasNext(): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonStreamParser.next(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.it.ShrinkingIT.lambda$testNoSerializedName_HasArgsConstructor$6(java.lang.reflect.Method): void": [
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.NullObjectAndFieldTest$ClassWithNullWrappedPrimitive.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setCount(int): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.access$100(com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.protobuf.UnknownFieldSet",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.hasCount(): boolean",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.hasMsg(): boolean",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getCount(): int"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testDuplicateLabel(): void": [
      "org.junit.Assert.fail(): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class, java.lang.String): com.google.gson.typeadapters.RuntimeTypeAdapterFactory"
    ],
    "com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod(): void": [
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hashCode(): int": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getDescriptor(): com.google.protobuf.Descriptors$Descriptor",
      "com.google.protobuf.UnknownFieldSet.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasOuterMessage(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasInnerMessage2(): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasId(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage1(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "java.lang.String.hashCode(): int",
      "java.lang.Object.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getOuterMessage(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasInnerMessage1(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage2(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getId(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.InvalidProtocolBufferException.getUnfinishedMessage(): com.google.protobuf.MessageLite",
      "com.google.protobuf.InvalidProtocolBufferException.unwrapIOException(): java.io.IOException",
      "com.google.protobuf.Parser.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.Gson$2.\u003cinit\u003e(com.google.gson.Gson): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByJdkUnsafe$Serializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByJdkUnsafe$Serializer.serialize(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByJdkUnsafe, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.functional.CustomDeserializerTest$SubTypes.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.CustomDeserializerTest$SubTypes.$values(): com.google.gson.functional.CustomDeserializerTest$SubTypes[]",
      "com.google.gson.functional.CustomDeserializerTest$SubTypes.\u003cinit\u003e(java.lang.String, int, java.lang.reflect.Type): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.checkAccessible(java.lang.Object, java.lang.reflect.AccessibleObject): void": [
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.reflect.ReflectionHelper.getAccessibleObjectDescription(java.lang.reflect.AccessibleObject, boolean): java.lang.String",
      "com.google.gson.internal.ReflectionAccessFilterHelper.canAccess(java.lang.reflect.AccessibleObject, java.lang.Object): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.reflect.Member.getModifiers(): int",
      "java.lang.reflect.Modifier.isStatic(int): boolean"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$1.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.util.Date": [
      "java.util.Date.\u003cinit\u003e(long): void"
    ],
    "com.google.gson.functional.RawSerializationTest$Bar.\u003cinit\u003e(java.lang.Object): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JavaSerializationTest$3.\u003cinit\u003e(com.google.gson.JavaSerializationTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$15.write(com.google.gson.stream.JsonWriter, java.lang.String): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest$3.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory, com.google.gson.Gson, com.google.gson.reflect.TypeToken): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.metrics.ParseBenchmark$JacksonBindParser.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$1DummyFactory.equals(java.lang.Object): boolean": [
      "java.lang.Object.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.functional.Java17RecordTest.lambda$testClassReflectionFilter$5(com.google.gson.Gson): void": [
      "com.google.gson.functional.Java17RecordTest$1Blocked.\u003cinit\u003e(int): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$30.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.reflect.TypeToken.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.isRecord(java.lang.Class): boolean": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.MapTest$23.createInstance(java.lang.reflect.Type): com.google.gson.functional.MapTest$MyMap": [
      "com.google.gson.functional.MapTest$MyMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.isLiteral(char): boolean": [
      "com.google.gson.stream.JsonReader.checkLenient(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$11.read(com.google.gson.stream.JsonReader): java.lang.Number": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.stream.JsonReader.nextNull(): void"
    ],
    "com.google.gson.typeadapters.PostConstructAdapterFactoryTest.test(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "java.lang.IllegalArgumentException.getMessage(): java.lang.String",
      "org.junit.Assert.fail(): void",
      "com.google.gson.typeadapters.PostConstructAdapterFactory.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderPathTest.parameters(): java.util.List": [
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clear(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest$10LocalRecord.i(): int": [],
    "com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.functional.NamingPolicyTest$ClassWithComplexFieldName.\u003cinit\u003e(long): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$6.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.CustomTypeAdaptersTest$6.serialize(com.google.gson.functional.CustomTypeAdaptersTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.BitSet.set(int): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.util.BitSet.set(int, int): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.BitSet.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$7LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark.timeBagOfPrimitivesDefault(int): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GizmoPartTypeAdapterFactory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.get(int): java.lang.Object": [
      "java.util.ArrayList.get(int): java.lang.Object"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory": [
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.\u003cinit\u003e(java.lang.Class, java.lang.String, boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getParserForType(): com.google.protobuf.Parser": [],
    "com.google.gson.stream.JsonReaderTest.testStrictExtraCommasInMaps(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.functional.CollectionTest$BigClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.SerializedNameTest.testMultipleNamesInTheSameString(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.Gson$4.\u003cinit\u003e(com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonStreamParserTest.testEmptyInput(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.JsonStreamParser.\u003cinit\u003e(java.lang.String): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.ThrowableSubject.isInstanceOf(java.lang.Class): void",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseFrom(java.nio.ByteBuffer): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer): java.lang.Object"
    ],
    "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.setHtmlSafe(boolean): void",
      "com.google.gson.stream.JsonWriter.isHtmlSafe(): boolean",
      "com.google.gson.stream.JsonWriter.getSerializeNulls(): boolean",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.setSerializeNulls(boolean): void",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "com.google.gson.stream.JsonWriter.getStrictness(): com.google.gson.Strictness",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.AssertionError.getMessage(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing$6.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.makeAccessible(java.lang.reflect.AccessibleObject): void": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.reflect.AccessibleObject.setAccessible(boolean): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "com.google.gson.internal.reflect.ReflectionHelper.getInaccessibleTroubleshootingSuffix(java.lang.Exception): java.lang.String",
      "com.google.gson.internal.reflect.ReflectionHelper.getAccessibleObjectDescription(java.lang.reflect.AccessibleObject, boolean): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.stream.JsonReaderTest.testHighPrecisionLong(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.MapTest.testSerializeMapOfMaps(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.MapTest$36.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.functional.MapTest$36.getType(): java.lang.reflect.Type",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest.newMap(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.util.Map"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C$JsonAdapterFactory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C$JsonAdapterFactory): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.\u003cinit\u003e(): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArray.contains(com.google.gson.JsonElement): boolean": [
      "java.util.ArrayList.contains(java.lang.Object): boolean"
    ],
    "com.google.gson.ExclusionStrategy.shouldSkipClass(java.lang.Class): boolean": [],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteFloats$7(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(float): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.Java17RecordTest$1Adapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.Java17RecordTest$1Adapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.String"
    ],
    "com.google.gson.metrics.ParseBenchmark$Document.\u003cinit\u003e(java.lang.String, int, com.google.gson.reflect.TypeToken, com.fasterxml.jackson.core.type.TypeReference): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest$1.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomDeserializerTest$1.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.CustomDeserializerTest$MyBase"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.\u003cclinit\u003e(): void": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.bind.JsonTreeWriter$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson.atomicLongArrayAdapter(com.google.gson.TypeAdapter): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson$5.nullSafe(): com.google.gson.TypeAdapter",
      "com.google.gson.Gson$5.\u003cinit\u003e(com.google.gson.TypeAdapter): void"
    ],
    "com.google.gson.ToNumberPolicyTest.lambda$testLongOrDouble$6(com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setOuterMessage(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.protobuf.SingleFieldBuilderV3.setMessage(com.google.protobuf.AbstractMessage): com.google.protobuf.SingleFieldBuilderV3"
    ],
    "com.google.gson.functional.Java17RecordTest$PrivateRecord.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest$SampleObjectForTest.\u003cinit\u003e(int, java.lang.String, long): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$Employee.\u003cinit\u003e(java.lang.String, long): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FormattingStyle.withIndent(java.lang.String): com.google.gson.FormattingStyle": [
      "com.google.gson.FormattingStyle.\u003cinit\u003e(java.lang.String, java.lang.String, boolean): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$34.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$1.construct(): java.lang.Object": [
      "com.google.gson.InstanceCreator.createInstance(java.lang.reflect.Type): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$1.serialize(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testCommentsInStringValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Outer$NonStaticInner.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Outer): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.functional.ProtosWithAnnotationsTest.testProtoWithAnnotations_deserializeUnknownEnumValue(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getContent(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderSerializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonElement.getAsBigDecimal(): java.math.BigDecimal": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.functional.StringTest.testStringValueSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasLongTimestamp(): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasMonth(): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getMonth(): int",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setYear(int): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasYear(): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.access$1200(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.protobuf.UnknownFieldSet",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setLongTimestamp(long): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getLongTimestamp(): long",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasCountryCode5F55(): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setMonth(int): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getYear(): int"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.readField(java.lang.Object, com.google.gson.stream.JsonReader, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField): void": [
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.readField(java.lang.Object[], com.google.gson.stream.JsonReader, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField): void"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter.\u003cinit\u003e(com.google.gson.JsonSerializer, com.google.gson.JsonDeserializer, com.google.gson.Gson, com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapterFactory): void": [
      "com.google.gson.internal.bind.TreeTypeAdapter.\u003cinit\u003e(com.google.gson.JsonSerializer, com.google.gson.JsonDeserializer, com.google.gson.Gson, com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapterFactory, boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseDelimitedFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.JsonParserTest.testStrict(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.JsonParser.parseReader(com.google.gson.stream.JsonReader): com.google.gson.JsonElement",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.getStrictness(): com.google.gson.Strictness",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.DefaultTypeAdaptersTest$MyClassTypeAdapter.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.example.GenericClasses$DummyClass$Adapter.read(com.google.gson.stream.JsonReader): com.example.GenericClasses$DummyClass": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.example.GenericClasses$DummyClass.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$ManagerAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TypeHierarchyAdapterTest$Manager": [
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.functional.TypeHierarchyAdapterTest$Manager.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Byte): void": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper.isJavaType(java.lang.String): boolean": [
      "java.lang.String.startsWith(java.lang.String): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.internal.bind.ArrayTypeAdapter$1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap.\u003cclinit\u003e(): void": [
      "java.lang.Class.desiredAssertionStatus(): boolean",
      "com.google.gson.internal.LinkedTreeMap$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testStringsAsBooleans(): void": [
      "com.google.gson.functional.PrimitiveTest$1.\u003cinit\u003e(com.google.gson.functional.PrimitiveTest): void",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$Course.\u003cinit\u003e(): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.functional.TreeTypeAdaptersTest$Course.\u003cinit\u003e(com.google.gson.functional.TreeTypeAdaptersTest$Id, int, com.google.gson.functional.TreeTypeAdaptersTest$Assignment, java.util.List): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithUrlField.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.addDeserializationExclusionStrategy(com.google.gson.ExclusionStrategy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): java.lang.Integer"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientUnquotedStrings(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteDoubles$12(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.stream.JsonReaderTest.testTopLevelValueTypes(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonParserTest.testExtraCommasInArrays(): void": [
      "com.google.gson.functional.JsonParserTest$1.\u003cinit\u003e(com.google.gson.functional.JsonParserTest): void",
      "com.google.gson.functional.JsonParserTest$1.getType(): java.lang.reflect.Type",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testPeekMuchLargerThanLongMinValue(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.stream.JsonToken.valueOf(java.lang.String): com.google.gson.stream.JsonToken": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.metrics.ParseBenchmark$JacksonBindParser.\u003cclinit\u003e(): void": [
      "java.text.SimpleDateFormat.\u003cinit\u003e(java.lang.String, java.util.Locale): void",
      "com.fasterxml.jackson.databind.ObjectMapper.setDateFormat(java.text.DateFormat): com.fasterxml.jackson.databind.ObjectMapper",
      "com.fasterxml.jackson.databind.json.JsonMapper.builder(): com.fasterxml.jackson.databind.json.JsonMapper$Builder",
      "com.fasterxml.jackson.databind.json.JsonMapper$Builder.configure(com.fasterxml.jackson.databind.DeserializationFeature, boolean): com.fasterxml.jackson.databind.cfg.MapperBuilder",
      "com.fasterxml.jackson.databind.json.JsonMapper$Builder.build(): com.fasterxml.jackson.databind.ObjectMapper",
      "com.fasterxml.jackson.databind.json.JsonMapper$Builder.configure(com.fasterxml.jackson.databind.MapperFeature, boolean): com.fasterxml.jackson.databind.cfg.MapperBuilder"
    ],
    "com.google.gson.TypeAdapterTest$2.read(com.google.gson.stream.JsonReader): java.lang.Integer": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.common.TestTypes$Nested.appendFields(java.lang.StringBuilder): void": [
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.newUninitializedMessageException(com.google.protobuf.Message): com.google.protobuf.UninitializedMessageException",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.isInitialized(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.example.Main.testUnreferencedConstructorNoArgs(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.CollectionTest.testNullsInListDeserialization(): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.functional.CollectionTest$12.getType(): java.lang.reflect.Type",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.CollectionTest$12.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "java.util.List.size(): int",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.recognizeSubtypes(): com.google.gson.typeadapters.RuntimeTypeAdapterFactory": [],
    "com.google.gson.GsonBuilder.create(): com.google.gson.Gson": [
      "java.util.ArrayList.\u003cinit\u003e(java.util.Collection): void",
      "java.util.ArrayList.\u003cinit\u003e(int): void",
      "java.util.List.addAll(java.util.Collection): boolean",
      "java.util.Collections.reverse(java.util.List): void",
      "com.google.gson.GsonBuilder.addTypeAdaptersForDate(java.lang.String, int, int, java.util.List): void",
      "java.util.HashMap.\u003cinit\u003e(java.util.Map): void",
      "java.util.List.size(): int",
      "com.google.gson.Gson.\u003cinit\u003e(com.google.gson.internal.Excluder, com.google.gson.FieldNamingStrategy, java.util.Map, boolean, boolean, boolean, boolean, com.google.gson.FormattingStyle, com.google.gson.Strictness, boolean, boolean, com.google.gson.LongSerializationPolicy, java.lang.String, int, int, java.util.List, java.util.List, java.util.List, com.google.gson.ToNumberStrategy, com.google.gson.ToNumberStrategy, java.util.List): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer2.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$ClassWithTransientFields.getExpectedJson(): java.lang.String": [
      "java.lang.StringBuilder.append(long): java.lang.StringBuilder",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.internal.$Gson$Types$WildcardTypeImpl.hashCode(): int": [
      "java.lang.Object.hashCode(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.internal.Streams$AppendableWriter.append(java.lang.CharSequence): java.io.Writer": [
      "java.lang.Appendable.append(java.lang.CharSequence): java.lang.Appendable"
    ],
    "com.google.gson.JsonObjectTest.testAddingStringProperties(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonObject.has(java.lang.String): boolean",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder.getLongTimestamp(): long": [],
    "com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.internal.bind.TreeTypeAdapter.\u003cinit\u003e(com.google.gson.JsonSerializer, com.google.gson.JsonDeserializer, com.google.gson.Gson, com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapterFactory): void",
      "com.google.gson.reflect.TypeToken.equals(java.lang.Object): boolean",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.metrics.ParseBenchmark$Link.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$8(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isNotEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.interceptors.InterceptorTest$2.\u003cinit\u003e(com.google.gson.interceptors.InterceptorTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InterfaceTest$TestObject.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String": [
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.TypeAdapter.toJson(java.io.Writer, java.lang.Object): void",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$10.write(com.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicIntegerArray): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "java.util.concurrent.atomic.AtomicIntegerArray.get(int): int",
      "java.util.concurrent.atomic.AtomicIntegerArray.length(): int"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$FooTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomTypeAdaptersTest$FooTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.CustomTypeAdaptersTest$Foo"
    ],
    "com.google.gson.functional.ArrayTest$2.\u003cinit\u003e(com.google.gson.functional.ArrayTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.sql.SqlDateTypeAdapter$1): void": [
      "com.google.gson.internal.sql.SqlDateTypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.InterfaceTest$TestObjectWrapper.\u003cinit\u003e(com.google.gson.functional.InterfaceTest$TestObjectInterface): void"
    ],
    "com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree(): void": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.Gson$3.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest$1.run(): void": [
      "com.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition): java.util.Date",
      "java.text.ParsePosition.\u003cinit\u003e(int): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.skipValue(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.popStack(): java.lang.Object",
      "com.google.gson.internal.bind.JsonTreeReader.endObject(): void",
      "com.google.gson.stream.JsonToken.ordinal(): int",
      "com.google.gson.internal.bind.JsonTreeReader.nextName(boolean): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.functional.TypeVariableTest$Blue.\u003cinit\u003e(): void": [
      "com.google.gson.functional.TypeVariableTest$Red.\u003cinit\u003e(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.functional.CustomDeserializerTest$4.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.GsonTest$10.write(com.google.gson.stream.JsonWriter, com.google.gson.GsonTest$CustomClass1): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseFrom(com.google.protobuf.CodedInputStream): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.EnumTest$Roshambo$2.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.functional.EnumTest$Roshambo.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void": [
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.maybeForceBuilderInitialization(): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest.testSerialization(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.graph.GraphAdapterBuilder.addType(java.lang.reflect.Type): com.google.gson.graph.GraphAdapterBuilder",
      "com.google.gson.graph.GraphAdapterBuilder.\u003cinit\u003e(): void",
      "com.google.gson.graph.GraphAdapterBuilder.registerOn(com.google.gson.GsonBuilder): void",
      "com.google.gson.graph.GraphAdapterBuilderTest$Roshambo.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setDataBytes(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.onChanged(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonDomParser.parse(char[], com.google.gson.metrics.ParseBenchmark$Document): void": [
      "java.io.CharArrayReader.\u003cinit\u003e(char[]): void",
      "com.google.gson.JsonParser.parseReader(java.io.Reader): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest$PrincipalTypeAdapter.write(com.google.gson.stream.JsonWriter, java.security.Principal): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.security.Principal.getName(): java.lang.String"
    ],
    "com.google.gson.functional.ObjectTest$4.\u003cinit\u003e(com.google.gson.functional.ObjectTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$19.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InterfaceTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$IdTreeTypeAdapter.serialize(com.google.gson.functional.TreeTypeAdaptersTest$Id, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.TreeTypeAdaptersTest$Id.getValue(): java.lang.String",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.LongSerializationPolicy.valueOf(java.lang.String): com.google.gson.LongSerializationPolicy": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization(): void": [
      "com.google.common.truth.IterableSubject.containsAnyIn(java.lang.Object[]): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "com.google.common.truth.ObjectArraySubject.asList(): com.google.common.truth.IterableSubject"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testBlockAllJava(): void": [
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "java.lang.Thread.currentThread(): java.lang.Thread",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientNonExecutePrefixWithLeadingWhitespace(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.deserialize(java.util.Date): java.util.Date": [],
    "com.google.gson.functional.CollectionTest.testStack(): void": [
      "com.google.gson.functional.CollectionTest$10.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "com.google.gson.functional.CollectionTest$10.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Stack.size(): int",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.Stack.pop(): java.lang.Object"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$UserJsonAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$User": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$User.\u003cinit\u003e(java.lang.String, java.lang.String): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.base.Splitter.splitToList(java.lang.CharSequence): java.util.List",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.common.base.Splitter.on(java.lang.String): com.google.common.base.Splitter"
    ],
    "com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$ClassWithObjects.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.CollectionTest$16.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.CollectionTest$16.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.GsonBuilderTest$5.\u003cinit\u003e(com.google.gson.GsonBuilderTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization.\u003cclinit\u003e(): void": [
      "com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization.$values(): com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization[]",
      "com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordNotSupportedHelper.\u003cinit\u003e(com.google.gson.internal.reflect.ReflectionHelper$1): void": [
      "com.google.gson.internal.reflect.ReflectionHelper$RecordNotSupportedHelper.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.TypeAdapterTest$1.\u003cinit\u003e(com.google.gson.TypeAdapterTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProtoOrBuilder.hasCount(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testBlockInaccessibleJavaExtendingJdkClass(): void": [
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.ReflectionAccessFilterTest$ClassExtendingJdkClass.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date, boolean): java.lang.String": [
      "com.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date, boolean, java.util.TimeZone): java.lang.String"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteNumbers$17(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.functional.EnumTest$Roshambo$3.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.functional.EnumTest$Roshambo.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.internal.GsonTypesTest$NonStaticInner.\u003cinit\u003e(com.google.gson.internal.GsonTypesTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.\u003cinit\u003e(java.lang.Number, java.lang.Number[], java.util.List, java.util.List[], java.util.List, java.util.List[]): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testVeryLongUnterminatedString(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "java.lang.String.\u003cinit\u003e(char[]): void",
      "java.util.Arrays.fill(char[], char): void"
    ],
    "com.google.gson.functional.VersioningTest.gsonWithVersion(double): com.google.gson.Gson": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.setVersion(double): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.internal.bind.TypeAdapters.\u003cinit\u003e(): void": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$7.\u003cinit\u003e(com.google.gson.functional.EnumTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JavaUtilTest$CurrencyHolder.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clear(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.ToNumberPolicy.valueOf(java.lang.String): com.google.gson.ToNumberPolicy": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFieldsOrBuilder.getSimplesList(): java.util.List": [],
    "com.google.gson.stream.JsonWriterTest.testNonFiniteFloatsWhenStrict(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteFloatsWhenStrict$10(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(float): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.Gson.\u003cinit\u003e(com.google.gson.internal.Excluder, com.google.gson.FieldNamingStrategy, java.util.Map, boolean, boolean, boolean, boolean, com.google.gson.FormattingStyle, com.google.gson.Strictness, boolean, boolean, com.google.gson.LongSerializationPolicy, java.lang.String, int, int, java.util.List, java.util.List, java.util.List, com.google.gson.ToNumberStrategy, com.google.gson.ToNumberStrategy, java.util.List): void": [
      "com.google.gson.Gson.doubleAdapter(boolean): com.google.gson.TypeAdapter",
      "com.google.gson.Gson.longAdapter(com.google.gson.LongSerializationPolicy): com.google.gson.TypeAdapter",
      "com.google.gson.internal.bind.ObjectTypeAdapter.getFactory(com.google.gson.ToNumberStrategy): com.google.gson.TypeAdapterFactory",
      "com.google.gson.Gson.atomicLongArrayAdapter(com.google.gson.TypeAdapter): com.google.gson.TypeAdapter",
      "com.google.gson.internal.bind.NumberTypeAdapter.getFactory(com.google.gson.ToNumberStrategy): com.google.gson.TypeAdapterFactory",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, com.google.gson.FieldNamingStrategy, com.google.gson.internal.Excluder, com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory, java.util.List): void",
      "com.google.gson.Gson.atomicLongAdapter(com.google.gson.TypeAdapter): com.google.gson.TypeAdapter",
      "com.google.gson.internal.ConstructorConstructor.\u003cinit\u003e(java.util.Map, boolean, java.util.List): void",
      "com.google.gson.internal.bind.CollectionTypeAdapterFactory.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor): void",
      "java.util.Collections.unmodifiableList(java.util.List): java.util.List",
      "com.google.gson.internal.bind.MapTypeAdapterFactory.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, boolean): void",
      "java.util.concurrent.ConcurrentHashMap.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters.newFactory(java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory",
      "java.util.List.addAll(java.util.Collection): boolean",
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.lang.ThreadLocal.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor): void",
      "com.google.gson.internal.bind.TypeAdapters.newFactory(java.lang.Class, java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory",
      "com.google.gson.Gson.floatAdapter(boolean): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(java.lang.String): java.lang.String": [
      "java.lang.Character.isUpperCase(char): boolean",
      "java.lang.String.charAt(int): char",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.String.length(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.String.substring(int, int): java.lang.String",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.lang.String.substring(int): java.lang.String",
      "java.lang.Character.isLetter(char): boolean",
      "java.lang.Character.toUpperCase(char): char"
    ],
    "com.google.gson.functional.ObjectTest$4.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.ObjectTest$4.serialize(com.google.gson.common.TestTypes$ClassWithNoFields, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.toBuilder(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.example.Main.testTypeTokenWriteRead(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.GsonTest$5.read(com.google.gson.stream.JsonReader): com.google.gson.GsonTest$CustomClass1": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$7.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$1.\u003cinit\u003e(): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Adapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.example.ClassWithJsonAdapterAnnotation$Adapter.read(com.google.gson.stream.JsonReader): com.example.ClassWithJsonAdapterAnnotation$DummyClass"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest.testJsonDeserializer_ReflectiveTreeSerializerDelegate(): void": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Deserializer.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Container.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest$5.\u003cinit\u003e(com.google.gson.functional.ObjectTest): void": [
      "com.google.gson.common.TestTypes$ClassWithNoFields.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.internalGetValueMap(): com.google.protobuf.Internal$EnumLiteMap": [],
    "com.google.gson.functional.JsonTreeTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testBooleans(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getIdBytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization(): void": [
      "com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerializationAndDeserialization(java.lang.Class): void"
    ],
    "com.google.gson.ReflectionAccessFilter.\u003cclinit\u003e(): void": [
      "com.google.gson.ReflectionAccessFilter$3.\u003cinit\u003e(): void",
      "com.google.gson.ReflectionAccessFilter$2.\u003cinit\u003e(): void",
      "com.google.gson.ReflectionAccessFilter$4.\u003cinit\u003e(): void",
      "com.google.gson.ReflectionAccessFilter$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ObjectTypeAdapterParameterizedTest.\u003cinit\u003e(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonObject.deepCopy(): com.google.gson.JsonElement": [
      "com.google.gson.JsonObject.deepCopy(): com.google.gson.JsonObject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest$ClassWithContainersOfParameterizedBaseFields.\u003cinit\u003e(java.util.Collection, java.util.Map): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithSerializedName.toString(): java.lang.String": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testAdapterCreatedByJdkUnsafe(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByJdkUnsafe.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$1.\u003cinit\u003e(): void": [
      "com.google.protobuf.AbstractParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LazilyParsedNumber.hashCode(): int": [
      "java.lang.String.hashCode(): int"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$RegisteredUserAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$Assignment.\u003cinit\u003e(): void": [
      "com.google.gson.functional.TreeTypeAdaptersTest$Assignment.\u003cinit\u003e(com.google.gson.functional.TreeTypeAdaptersTest$Id, java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testNumbersCustomClass(): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArrayTest.testFailedGetArrayValues(): void": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.gson.JsonArray.getAsString(): java.lang.String",
      "com.google.gson.JsonArray.getAsInt(): int",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.add(java.lang.String): void",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement",
      "com.google.gson.JsonArray.getAsLong(): long",
      "com.google.gson.JsonArray.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.JsonArray.remove(int): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonArray.getAsBoolean(): boolean",
      "com.google.gson.JsonArray.getAsDouble(): double"
    ],
    "com.google.gson.functional.CustomDeserializerTest$DataHolderWrapper.getWrappedData(): com.google.gson.functional.CustomDeserializerTest$DataHolder": [],
    "com.google.gson.stream.JsonReaderPathTest.skipArrayElements(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testJsonPrimitive$1(): void": [
      "com.google.gson.JsonPrimitive.getAsBigDecimal(): java.math.BigDecimal",
      "java.lang.String.repeat(int): java.lang.String",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType.$values(): com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType[]": [],
    "com.google.gson.internal.bind.JsonElementReaderTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.nextNull(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.popStack(): java.lang.Object",
      "com.google.gson.internal.bind.JsonTreeReader.expect(com.google.gson.stream.JsonToken): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest.testObjectDefaultValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.Java17RecordTest$10LocalRecord.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.internal.JavaVersion.getMajorJavaVersion(): int": [],
    "com.google.gson.internal.reflect.ReflectionHelper.createExceptionForUnexpectedIllegalAccess(java.lang.IllegalAccessException): java.lang.RuntimeException": [
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void"
    ],
    "com.google.gson.functional.CollectionTest.testVector(): void": [
      "java.util.Vector.get(int): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.CollectionTest$9.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.util.Vector.size(): int",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.functional.CollectionTest$9.getType(): java.lang.reflect.Type",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.GsonBuilder.\u003cinit\u003e(com.google.gson.Gson): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.addAll(java.util.Collection): boolean",
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.util.ArrayDeque.\u003cinit\u003e(): void",
      "java.util.ArrayDeque.addAll(java.util.Collection): boolean",
      "java.util.Map.putAll(java.util.Map): void",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.nonNull(java.lang.Object): java.lang.Object": [
      "java.lang.NullPointerException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonDomParser.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testBlockAllCollectionImplementation(): void": [
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "java.util.List.get(int): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.ReflectionAccessFilterTest$13.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.getMsgBytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.assertFormattingAlwaysEmitsUsLocale(java.util.Locale): void": [
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "java.util.Locale.getDefault(): java.util.Locale",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(int): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.assertFormatted(java.lang.String, com.google.gson.TypeAdapterFactory): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createDefaultsAdapterFactory(): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(int, int): com.google.gson.TypeAdapterFactory",
      "java.util.TimeZone.getDefault(): java.util.TimeZone",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization(): void": [
      "com.google.gson.functional.ParameterizedTypesTest$3.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.functional.ParameterizedTypesTest$MultiParameters.\u003cinit\u003e(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Float.valueOf(float): java.lang.Float",
      "com.google.gson.functional.ParameterizedTypesTest$3.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getUnknownFields(): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.functional.GsonVersionDiagnosticsTest.testVersionPattern(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.matches(java.util.regex.Pattern): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testBlockInaccessibleStaticField(): void": [
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.excludeFieldsWithModifiers(int[]): com.google.gson.GsonBuilder",
      "com.google.gson.functional.ReflectionAccessFilterTest$ClassWithStaticField.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.functional.ReflectionAccessFilterTest$1.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$600(): boolean": [],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest$ClassWithParameterizedBaseFields.\u003cinit\u003e(com.google.gson.functional.MoreSpecificTypeSerializationTest$ParameterizedBase): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.hasOuterMessage(): boolean": [],
    "com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.isNaN(double): boolean",
      "com.google.gson.internal.bind.JsonTreeReader.nextDouble(): double",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.setStrictness(com.google.gson.Strictness): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$BaseIntegerAdapter.serialize(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.GsonTest.lambda$testGetDelegateAdapter$1(com.google.gson.Gson, com.google.gson.reflect.TypeToken): void": [
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.stream.JsonReader.skipToEndOfLine(): void": [
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$1.\u003cinit\u003e(): void": [
      "com.google.protobuf.AbstractParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(int): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, int, com.google.gson.internal.bind.DefaultDateTypeAdapter$1): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createFactory(com.google.gson.internal.bind.DefaultDateTypeAdapter): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setInnerMessage1(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.protobuf.SingleFieldBuilderV3.setMessage(com.google.protobuf.AbstractMessage): com.google.protobuf.SingleFieldBuilderV3"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data"
    ],
    "com.google.gson.internal.ConstructorConstructor$14.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriter.getSerializeNulls(): boolean": [],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing.lambda$testMethodTypeVariable$7(): void": [
      "com.google.gson.reflect.TypeTokenTest$1Enclosing$9.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$13.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$13.read(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.Gson.newJsonWriter(java.io.Writer): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonWriter.setHtmlSafe(boolean): void",
      "com.google.gson.stream.JsonWriter.setFormattingStyle(com.google.gson.FormattingStyle): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.Writer.write(java.lang.String): void",
      "com.google.gson.stream.JsonWriter.setSerializeNulls(boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.getDescriptorForType(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.isInitialized(): boolean": [],
    "com.google.gson.functional.PrimitiveTest.testDoubleSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Double.toString(double): java.lang.String",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.MixedStreamTest.testReadMixedStreamed(): void": [
      "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement": [
      "com.google.gson.internal.LinkedTreeMap.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.internal.GsonTypesTest.getFirstTypeArgument(java.lang.reflect.Type): java.lang.reflect.Type": [
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.CircularReferenceTest$ClassWithSelfReference.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testShortDeserializationLossy$4(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.stream.JsonReaderTest.testPrematureEndOfInput(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization(): void": [
      "com.google.common.truth.ObjectArraySubject.isEqualTo(java.lang.Object): void",
      "java.util.Collection.toArray(java.lang.Object[]): java.lang.Object[]",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "com.google.gson.functional.ArrayTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.ArrayTest$2.\u003cinit\u003e(com.google.gson.functional.ArrayTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.CollectionTest$12.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type): boolean": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type): java.lang.Class",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class[]): java.lang.AssertionError",
      "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map): boolean",
      "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.GenericArrayType): boolean",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.hasInnerMessage1(): boolean": [],
    "com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark.main(java.lang.String[]): void": [
      "com.google.gson.metrics.NonUploadingCaliperRunner.run(java.lang.Class, java.lang.String[]): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$3.shouldSkipClass(java.lang.Class): boolean": [],
    "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization(): void": [
      "com.google.gson.functional.ParameterizedTypesTest$17.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest.arrayOf(java.lang.Object[]): java.lang.Object[]",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ParameterizedTypesTest$17.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.\u003cinit\u003e(java.lang.Number, java.lang.Number[], java.util.List, java.util.List[], java.util.List, java.util.List[]): void"
    ],
    "com.google.gson.functional.ReadersWritersTest$1CustomAppendable.append(java.lang.CharSequence): java.lang.Appendable": [
      "com.google.gson.functional.ReadersWritersTest$1CustomAppendable.append(java.lang.CharSequence, int, int): java.lang.Appendable",
      "java.lang.CharSequence.length(): int"
    ],
    "com.google.gson.native_test.ReflectionTest.testFinalField(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.MapTest$28.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$10.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations"
    ],
    "com.google.gson.Gson.\u003cclinit\u003e(): void": [],
    "com.google.gson.functional.TreeTypeAdaptersTest$IdTreeTypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest.testExposeAnnotation(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.Java17RecordTest$1RecordWithExpose.\u003cinit\u003e(int, int): void",
      "com.google.gson.GsonBuilder.excludeFieldsWithoutExposeAnnotation(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder.hasCountryCode5F55(): boolean": [],
    "com.google.gson.functional.EnumTest$InterchangedToString.toString(): java.lang.String": [],
    "com.google.gson.ReflectionAccessFilter$4.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest$Sub.\u003cinit\u003e(int, int): void": [
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$Base.\u003cinit\u003e(int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addAllSimples(java.lang.Iterable): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.AbstractMessageLite$Builder.addAll(java.lang.Iterable, java.util.List): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.addAllMessages(java.lang.Iterable): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureSimplesIsMutable(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$6.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$6.read(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormatOrBuilder.getNameThatTestsCaseFormatList(): java.util.List": [],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest$SampleObjectForTest.\u003cinit\u003e(): void": [
      "com.google.gson.functional.ExclusionStrategyFunctionalTest$SampleObjectForTest.\u003cinit\u003e(int, java.lang.String, long): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$20.read(com.google.gson.stream.JsonReader): java.lang.StringBuffer": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.lang.StringBuffer.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextNull(): void"
    ],
    "com.google.gson.internal.Excluder$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.internal.Excluder$1.delegate(): com.google.gson.TypeAdapter",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo.$values(): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo[]": [],
    "com.google.gson.internal.Excluder.isValidSince(com.google.gson.annotations.Since): boolean": [
      "com.google.gson.annotations.Since.value(): double"
    ],
    "com.google.gson.GsonTest$1WrappingAdapter.\u003cinit\u003e(com.google.gson.GsonTest, com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapterTest.lambda$testToJson_ThrowingIOException$0(com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonSerializer$Serializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonSerializer$Serializer.serialize(java.util.List, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testObject(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextName(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.nextInt(): int",
      "com.google.gson.internal.bind.JsonTreeReader.endObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.beginObject(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.GsonTest.testNewJsonWriter_Custom(): void": [
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.GsonBuilder.generateNonExecutableJson(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.setLenient(): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.newJsonWriter(java.io.Writer): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.GsonBuilder.disableHtmlEscaping(): com.google.gson.GsonBuilder",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.JsonPrimitive.isString(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseFrom(java.nio.ByteBuffer): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer): java.lang.Object"
    ],
    "com.google.gson.internal.bind.TypeAdapters$18.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$18.write(com.google.gson.stream.JsonWriter, com.google.gson.internal.LazilyParsedNumber): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$PartJsonFieldAnnotationAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.clear(): void": [
      "java.util.ArrayList.clear(): void"
    ],
    "com.google.gson.internal.bind.CollectionTypeAdapterFactory.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$28.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$28.write(com.google.gson.stream.JsonWriter, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.JsonArrayTest.testBooleanPrimitiveAddition(): void": [
      "com.google.gson.JsonArray.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonArray.add(java.lang.Boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testToNumberPolicy$5(com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.functional.NumberLimitsTest.jsonReader(java.lang.String): com.google.gson.stream.JsonReader",
      "java.lang.String.repeat(int): java.lang.String",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.internal.bind.TypeAdapters$10.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$ClassOverridingEquals.hashCode(): int": [],
    "com.google.gson.internal.$Gson$Types.checkNotPrimitive(java.lang.reflect.Type): void": [
      "java.lang.Class.isPrimitive(): boolean",
      "com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean): void"
    ],
    "com.google.gson.GsonBuilderTest$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "java.lang.AssertionError.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.PerformanceTest.testDummy(): void": [],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter(): void": [
      "com.google.gson.GsonBuilder.enableComplexMapKeySerialization(): com.google.gson.GsonBuilder",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$2.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$1.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$Point.\u003cinit\u003e(int, int): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$3.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$3.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$1.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$1LocalGenericClass.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonSerializer$Serializer.serialize(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonSerializer, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.FormattingStyleTest.testVariousCombinationsParse(): void": [
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.gson.FormattingStyle.withIndent(java.lang.String): com.google.gson.FormattingStyle",
      "com.google.gson.functional.FormattingStyleTest.createInput(): java.util.Map",
      "com.google.gson.functional.FormattingStyleTest$1.\u003cinit\u003e(com.google.gson.functional.FormattingStyleTest): void",
      "com.google.gson.FormattingStyle.withNewline(java.lang.String): com.google.gson.FormattingStyle",
      "com.google.gson.functional.FormattingStyleTest.buildExpected(java.lang.String, java.lang.String, boolean): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.gson.GsonBuilder.setFormattingStyle(com.google.gson.FormattingStyle): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory$Factory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.LongSerializationPolicy$1.serialize(java.lang.Long): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void"
    ],
    "com.google.gson.JsonElement.getAsCharacter(): char": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.net.InetAddress.getByName(java.lang.String): java.net.InetAddress"
    ],
    "com.google.gson.functional.MapTest$13.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.String"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Integer): void"
    ],
    "com.google.gson.functional.ObjectTest.testSingletonLists(): void": [
      "com.google.gson.functional.ObjectTest$Product.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.ObjectTest$Department.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlTimeTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.sql.SqlTimeTypeAdapter.write(com.google.gson.stream.JsonWriter, java.sql.Time): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$4.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$4.serialize(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$31.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder",
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.setUp(): void": [
      "com.google.gson.functional.ExclusionStrategyFunctionalTest$SampleObjectForTest.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$25.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$25.write(com.google.gson.stream.JsonWriter, java.util.Currency): void"
    ],
    "com.google.gson.JsonObject.asMap(): java.util.Map": [],
    "com.google.gson.functional.CustomDeserializerTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.CustomDeserializerTest$DataHolderDeserializer.\u003cinit\u003e(): void"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest$1.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testPeekLongMinValue(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$4.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.values(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type[]": [
      "[Lcom.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type;.clone(): java.lang.Object"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1.read(com.google.gson.stream.JsonReader): com.google.gson.native_test.Java17RecordReflectionTest$RecordWithRegisteredAdapter": [
      "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithRegisteredAdapter.\u003cinit\u003e(int): void",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.stream.JsonReader.beginArray(): void": [
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.doPeek(): int",
      "com.google.gson.stream.JsonReader.push(int): void"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteNumbers$19(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.JsonStreamParser.\u003cinit\u003e(java.lang.String): void": [
      "com.google.gson.JsonStreamParser.\u003cinit\u003e(java.io.Reader): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.metrics.ParseBenchmark.setUp(): void": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.metrics.ParseBenchmark$Document.name(): java.lang.String",
      "com.google.gson.metrics.ParseBenchmark$Api.newParser(): com.google.gson.metrics.ParseBenchmark$Parser",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.metrics.ParseBenchmark.resourceToString(java.lang.String): java.lang.String",
      "java.lang.String.toCharArray(): char[]"
    ],
    "com.google.gson.functional.ReflectionAccessTest.testInaccessibleField(): void": [
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.ReflectionAccessTest.assertInaccessibleException(java.lang.String, java.lang.Class): com.google.gson.JsonIOException"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonStreamParser.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.BagOfPrimitives.equals(java.lang.Object): boolean": [
      "com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object): boolean"
    ],
    "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void": [
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.GsonBuilder.excludeFieldsWithModifiers(int[]): com.google.gson.GsonBuilder": [
      "com.google.gson.internal.Excluder.withModifiers(int[]): com.google.gson.internal.Excluder",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.internal.bind.TypeAdapters$10.read(com.google.gson.stream.JsonReader): java.util.concurrent.atomic.AtomicIntegerArray": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "java.util.List.size(): int",
      "java.util.concurrent.atomic.AtomicIntegerArray.\u003cinit\u003e(int): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "java.lang.Integer.intValue(): int",
      "java.util.concurrent.atomic.AtomicIntegerArray.set(int, int): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.addNameThatTestsCaseFormat(java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.LazyStringList.add(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.ensureNameThatTestsCaseFormatIsMutable(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.common.TestTypes$CrazyLongTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Long": [
      "com.google.gson.JsonElement.getAsLong(): long",
      "java.lang.Long.valueOf(long): java.lang.Long"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.nextJsonElement(): com.google.gson.JsonElement": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peekStack(): java.lang.Object",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.bind.JsonTreeReader.skipValue(): void"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.getExpectedJson(java.lang.Object): java.lang.String": [
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.internal.Primitives.isWrapperType(java.lang.reflect.Type): boolean",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "java.lang.Class.getMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "com.google.gson.internal.Primitives.wrap(java.lang.Class): java.lang.Class"
    ],
    "com.google.gson.JsonArray.\u003cinit\u003e(int): void": [
      "com.google.gson.JsonElement.\u003cinit\u003e(): void",
      "java.util.ArrayList.\u003cinit\u003e(int): void"
    ],
    "com.google.gson.functional.GsonVersionDiagnosticsTest.lambda$testAssertionErrorInSerializationPrintsVersion$0(): void": [
      "com.google.gson.functional.GsonVersionDiagnosticsTest$TestType.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.JsonObject.hashCode(): int": [
      "com.google.gson.internal.LinkedTreeMap.hashCode(): int"
    ],
    "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader": [
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$8.write(com.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicInteger): void": [
      "java.util.concurrent.atomic.AtomicInteger.get(): int",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clear(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$3.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean"
    ],
    "com.google.gson.functional.EnumTest$CustomToString.$values(): com.google.gson.functional.EnumTest$CustomToString[]": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseDelimitedFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.example.Main.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ParameterizedTypeTest.testNotEquals(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.ParameterizedTypeTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.ParameterizedTypeTest$2.\u003cinit\u003e(com.google.gson.ParameterizedTypeTest): void"
    ],
    "com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.functional.NamingPolicyTest$AtName.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest$4.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilderTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.UnsafeAllocator$2.newInstance(java.lang.Class): java.lang.Object": [
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.UnsafeAllocator.access$000(java.lang.Class): void"
    ],
    "com.google.gson.functional.NamingPolicyTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testToNumberPolicy$6(com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.functional.NumberLimitsTest.jsonReader(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest.setUp(): void": [
      "com.google.gson.protobuf.ProtoTypeAdapter.newBuilder(): com.google.gson.protobuf.ProtoTypeAdapter$Builder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.setEnumSerialization(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization): com.google.gson.protobuf.ProtoTypeAdapter$Builder",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.build(): com.google.gson.protobuf.ProtoTypeAdapter"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.StreamingTypeAdaptersTest$5.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod(): void": [
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.maybeForceBuilderInitialization(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.access$200(): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.maybeForceBuilderInitialization(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage1FieldBuilder(): com.google.protobuf.SingleFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.access$1800(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage2FieldBuilder(): com.google.protobuf.SingleFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getOuterMessageFieldBuilder(): com.google.protobuf.SingleFieldBuilderV3"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithBigInteger.getExpectedJson(): java.lang.String": [],
    "com.google.gson.internal.JavaVersionTest.testJava7(): void": [
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.JavaVersion.getMajorJavaVersion(java.lang.String): int"
    ],
    "com.google.gson.functional.SecurityTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipTopLevelQuotedString(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReaderTest.repeat(char, int): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$1.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$Employee.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.UncategorizedTest$Base.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ExposeFieldsTest$SomeInterfaceInstanceCreator.createInstance(java.lang.reflect.Type): com.google.gson.functional.ExposeFieldsTest$SomeInterface": [
      "com.google.gson.functional.ExposeFieldsTest$SomeObject.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void": [
      "java.util.Objects.requireNonNull(java.lang.Object, java.lang.String): java.lang.Object",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.setFormattingStyle(com.google.gson.FormattingStyle): void",
      "com.google.gson.stream.JsonWriter.push(int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeOuterMessage(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.protobuf.SingleFieldBuilderV3.mergeFrom(com.google.protobuf.AbstractMessage): com.google.protobuf.SingleFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilder(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.ObjectTest.testStaticFieldDeserialization(): void": [
      "com.google.gson.GsonBuilder.excludeFieldsWithModifiers(int[]): com.google.gson.GsonBuilder",
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProtoOrBuilder.hasMsg(): boolean": [],
    "com.google.gson.stream.JsonReader$1.\u003cinit\u003e(): void": [
      "com.google.gson.internal.JsonReaderInternalAccess.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.\u003cclinit\u003e(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$1.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.protobuf.Message": [
      "com.google.gson.protobuf.ProtoTypeAdapter.findValueByNameAndExtension(com.google.protobuf.Descriptors$EnumDescriptor, com.google.gson.JsonElement): com.google.protobuf.Descriptors$EnumValueDescriptor",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonArray.iterator(): java.util.Iterator",
      "com.google.gson.JsonElement.isJsonArray(): boolean",
      "com.google.protobuf.Descriptors$FieldDescriptor.isRepeated(): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.protobuf.Descriptors$FieldDescriptor.getEnumType(): com.google.protobuf.Descriptors$EnumDescriptor",
      "com.google.protobuf.Message$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "java.util.ArrayList.\u003cinit\u003e(int): void",
      "com.google.gson.protobuf.ProtoTypeAdapter.getCachedMethod(java.lang.Class, java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "com.google.protobuf.Descriptors$FieldDescriptor.getOptions(): com.google.protobuf.DescriptorProtos$FieldOptions",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.protobuf.ProtoTypeAdapter.getCustSerializedName(com.google.protobuf.DescriptorProtos$FieldOptions, java.lang.String): java.lang.String",
      "java.lang.reflect.Field.getGenericType(): java.lang.reflect.Type",
      "java.util.List.iterator(): java.util.Iterator",
      "com.google.common.base.CaseFormat.to(com.google.common.base.CaseFormat, java.lang.String): java.lang.String",
      "java.util.Collection.add(java.lang.Object): boolean",
      "com.google.gson.JsonDeserializationContext.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type): java.lang.Object",
      "com.google.protobuf.Message.getField(com.google.protobuf.Descriptors$FieldDescriptor): java.lang.Object",
      "com.google.protobuf.Descriptors$Descriptor.getFields(): java.util.List",
      "java.lang.Class.getDeclaredField(java.lang.String): java.lang.reflect.Field",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.Throwable): void",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonArray.size(): int",
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.protobuf.Descriptors$FieldDescriptor.getName(): java.lang.String",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.protobuf.Descriptors$FieldDescriptor.getType(): com.google.protobuf.Descriptors$FieldDescriptor$Type",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "com.google.protobuf.Message$Builder.build(): com.google.protobuf.Message",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void"
    ],
    "com.google.gson.internal.LazilyParsedNumberTest.testEquals(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.LazilyParsedNumber.equals(java.lang.Object): boolean",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$Assignment.\u003cinit\u003e(com.google.gson.functional.TreeTypeAdaptersTest$Id, java.lang.Object): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(com.google.gson.stream.JsonWriter, java.util.Map): void": [
      "java.lang.String.valueOf(java.lang.Object): java.lang.String",
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "java.util.List.get(int): java.lang.Object",
      "java.util.Map.entrySet(): java.util.Set",
      "com.google.gson.JsonElement.isJsonArray(): boolean",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.util.List.add(java.lang.Object): boolean",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "java.util.List.size(): int",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.TypeAdapter.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.keyToString(com.google.gson.JsonElement): java.lang.String",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.gson.internal.Streams.write(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter): void",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "java.util.ArrayList.\u003cinit\u003e(int): void",
      "java.util.Map.size(): int",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "com.google.gson.JsonElement.isJsonObject(): boolean",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.internal.bind.TypeAdapters$26.write(com.google.gson.stream.JsonWriter, java.util.Calendar): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.util.Calendar.get(int): int",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addAllData(java.lang.Iterable): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.protobuf.AbstractMessageLite$Builder.addAll(java.lang.Iterable, java.util.List): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.addAllMessages(java.lang.Iterable): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.ensureDataIsMutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.JsonPrimitiveTest.testExponential(): void": [
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "com.google.gson.JsonPrimitive.getAsInt(): int",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.getAsDouble(): double",
      "com.google.gson.JsonPrimitive.getAsBigDecimal(): java.math.BigDecimal",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.GsonBuilderTest$2.translateName(java.lang.reflect.Field): java.lang.String": [],
    "com.google.gson.functional.Java17RecordTest$8LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.it.ShrinkingIT.lambda$testUnusedClassRemoved$9(java.lang.String): void": [
      "com.google.gson.it.ShrinkingIT.runTest(java.lang.String, com.google.gson.it.ShrinkingIT$TestAction): void"
    ],
    "com.google.gson.metrics.PerformanceTest$CollectionEntry.\u003cinit\u003e(java.lang.String, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.beginObject(): com.google.gson.stream.JsonWriter": [
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DateTypeAdapter.read(com.google.gson.stream.JsonReader): java.util.Date": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(com.google.gson.stream.JsonReader): java.util.Date",
      "com.google.gson.stream.JsonReader.nextNull(): void"
    ],
    "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$SetCollection.\u003cinit\u003e(): void": [
      "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$BaseCollection.\u003cinit\u003e(): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.example.ClassWithJsonAdapterAnnotation$DummyClass": [
      "com.example.ClassWithJsonAdapterAnnotation$DummyClass.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "com.google.gson.JsonElement.getAsInt(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern(): void": [
      "com.google.gson.GsonBuilder.setDateFormat(java.lang.String): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "java.util.Date.getDay(): int",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Date.getYear(): int",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.Date.\u003cinit\u003e(long): void",
      "java.util.Date.getMonth(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.GsonBuilder.setDateFormat(int): com.google.gson.GsonBuilder",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.metrics.CollectionsDeserializationBenchmark.setUp(): void": [
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.metrics.BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void"
    ],
    "com.google.gson.JsonPrimitive.getAsBigDecimal(): java.math.BigDecimal": [
      "com.google.gson.internal.NumberLimits.parseBigDecimal(java.lang.String): java.math.BigDecimal",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String"
    ],
    "com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances(): void": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.common.TestTypes$BaseSerializer.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$ClassWithBaseField.\u003cinit\u003e(com.google.gson.common.TestTypes$Base): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest.arrayOf(java.lang.Object[]): java.lang.Object[]",
      "com.google.gson.functional.ParameterizedTypesTest$11.getType(): java.lang.reflect.Type",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.ParameterizedTypesTest$11.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.\u003cinit\u003e(java.lang.Number, java.lang.Number[], java.util.List, java.util.List[], java.util.List, java.util.List[]): void"
    ],
    "com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization(): void": [
      "com.google.gson.functional.VersioningTest.gsonWithVersion(double): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.TypeAdapters$24.read(com.google.gson.stream.JsonReader): java.util.UUID": [
      "java.util.UUID.fromString(java.lang.String): java.util.UUID",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String"
    ],
    "com.google.gson.Gson$2.read(com.google.gson.stream.JsonReader): java.lang.Float": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.functional.CollectionTest$Entry.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateFormatString(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.GregorianCalendar.set(int, int, int): void",
      "java.util.GregorianCalendar.\u003cinit\u003e(java.util.TimeZone, java.util.Locale): void",
      "java.util.GregorianCalendar.getTime(): java.util.Date",
      "com.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date): java.lang.String",
      "java.lang.String.length(): int",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.String.substring(int, int): java.lang.String",
      "com.google.gson.internal.bind.util.ISO8601UtilsTest.utcTimeZone(): java.util.TimeZone",
      "java.util.GregorianCalendar.clear(): void"
    ],
    "com.google.gson.GsonTest$1WrappingAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictQuotedNonFiniteDoubles(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithBigDecimal.getExpectedJson(): java.lang.String": [
      "java.math.BigDecimal.toEngineeringString(): java.lang.String"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testClear(): void": [
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.keySet(): java.util.Set",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "com.google.gson.internal.LinkedTreeMapTest.assertIterationOrder(java.lang.Iterable, java.lang.Object[]): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "com.google.gson.internal.LinkedTreeMap.clear(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$19.read(com.google.gson.stream.JsonReader): java.lang.StringBuilder": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextNull(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDataOrBuilderList(): java.util.List": [],
    "com.google.gson.functional.Java17RecordTest.testSerializedNameOnAccessor(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest$1RecordWithExpose.a(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.readField(java.lang.Object, com.google.gson.stream.JsonReader, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField): void": [],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization(): void": [
      "com.google.gson.GsonBuilder.enableComplexMapKeySerialization(): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$Point.\u003cinit\u003e(int, int): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$PointWithProperty.\u003cinit\u003e(): void",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$7.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$7.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.FieldNamingPolicy.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.MapTest$16.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.FormattingStyleTest.testPrettyToCompact(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.FormattingStyle.withIndent(java.lang.String): com.google.gson.FormattingStyle",
      "com.google.gson.functional.FormattingStyleTest.createInput(): java.util.Map",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.FormattingStyle.withNewline(java.lang.String): com.google.gson.FormattingStyle",
      "com.google.gson.functional.FormattingStyleTest.toJson(java.lang.Object, com.google.gson.FormattingStyle): java.lang.String",
      "com.google.gson.FormattingStyle.withSpaceAfterSeparators(boolean): com.google.gson.FormattingStyle"
    ],
    "com.google.gson.functional.Java17RecordTest$2.shouldSkipField(com.google.gson.FieldAttributes): boolean": [
      "com.google.gson.FieldAttributes.getName(): java.lang.String",
      "java.lang.String.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testNullBaseType(): void": [
      "org.junit.Assert.fail(): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory"
    ],
    "com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization(): void": [
      "com.google.gson.functional.PrimitiveTest.extractElementFromArray(java.lang.String): java.lang.String",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.internal.ConstructorConstructor$6.construct(): java.lang.Object": [
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "java.util.EnumMap.\u003cinit\u003e(java.lang.Class): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$16.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$MyEnum.valueOf(java.lang.String): com.google.gson.functional.EnumTest$MyEnum": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.Gson.htmlSafe(): boolean": [],
    "com.google.gson.functional.Java17RecordTest$PublicRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.ReflectionAccessFilterTest$ExtendingClassWithPrivateField.\u003cinit\u003e(): void": [
      "com.google.gson.functional.ReflectionAccessFilterTest$ClassWithPrivateField.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CollectionTest.testSetSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.CollectionTest$Entry.\u003cinit\u003e(int): void",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "java.util.Set.add(java.lang.Object): boolean",
      "java.util.HashSet.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$4.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.functional.JavaUtilConcurrentAtomicTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonParserTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LazilyParsedNumber.floatValue(): float": [
      "java.lang.Float.parseFloat(java.lang.String): float"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithCustomNames.\u003cinit\u003e(java.lang.String, java.lang.String): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.example.NoSerializedNameMain$TestClassHasArgsConstructor.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$10LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray(): void": [
      "com.google.gson.JsonElement.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setCount(int): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.onChanged(): void"
    ],
    "com.google.gson.internal.bind.DateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.DateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.util.Date): void"
    ],
    "com.google.gson.internal.UnsafeAllocatorInstantiationTest.testAbstractClassInstantiation(): void": [
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.internal.LinkedTreeMap$EntrySet.clear(): void": [
      "com.google.gson.internal.LinkedTreeMap.clear(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesBuilder(int): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.protobuf.RepeatedFieldBuilderV3.getBuilder(int): com.google.protobuf.AbstractMessage$Builder"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.popStack(): java.lang.Object": [],
    "com.google.gson.functional.TypeHierarchyAdapterTest$ManagerAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.TypeHierarchyAdapterTest$ManagerAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TypeHierarchyAdapterTest$Manager"
    ],
    "com.google.gson.common.TestTypes$BaseSerializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessTest.assertInaccessibleException(java.lang.String, java.lang.Class): com.google.gson.JsonIOException": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.endsWith(java.lang.String): void",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.Parser.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapterTest.testLocalTimeZone(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Date.getTime(): long",
      "java.util.Date.\u003cinit\u003e(): void",
      "org.junit.Assert.assertEquals(long, long): void"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testEntrySetValueNull_Forbidden(): void": [
      "com.google.gson.internal.LinkedTreeMap.containsValue(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.LinkedTreeMap.get(java.lang.Object): java.lang.Object",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(boolean): void",
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.LinkedTreeMap.entrySet(): java.util.Set",
      "org.junit.Assert.fail(): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Map$Entry.setValue(java.lang.Object): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clear(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clear(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.internal.Primitives.isWrapperType(java.lang.reflect.Type): boolean": [],
    "com.google.gson.native_test.ReflectionTest$1.\u003cinit\u003e(com.google.gson.native_test.ReflectionTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$5.write(com.google.gson.stream.JsonWriter, com.google.gson.GsonTest$CustomClass1): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest.testSerializeDifferentCaseFormat(): void": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.addNameThatTestsCaseFormat(java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setAnotherField(java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.EnumTest$2.\u003cinit\u003e(com.google.gson.functional.EnumTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest.lambda$testGetAdapter_Null$0(com.google.gson.Gson): void": [
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedArray(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.Calendar.get(int): int",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.InternationalizationTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.nextNode(): com.google.gson.internal.LinkedTreeMap$Node": [
      "java.util.NoSuchElementException.\u003cinit\u003e(): void",
      "java.util.ConcurrentModificationException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseDelimitedFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.doubleValue(): double",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(java.lang.String): java.lang.Double"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.build(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.build(): com.google.gson.protobuf.generated.Bag$SimpleProto"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.reflect.InvocationTargetException.getCause(): java.lang.Throwable",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "java.lang.reflect.Field.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.reflect.ReflectionHelper.getAccessibleObjectDescription(java.lang.reflect.AccessibleObject, boolean): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$000(java.lang.Object, java.lang.reflect.AccessibleObject): void",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.CustomDeserializerTest$ClassWithBaseArray.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Element.access$400(com.google.gson.graph.GraphAdapterBuilder$Element): java.lang.String": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.functional.ConcurrencyTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonSerializer$Serializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest$Subclass.\u003cinit\u003e(): void": [
      "com.google.gson.functional.ObjectTest$Superclass1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.ExclusionStrategyFunctionalTest$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.PerformanceTest$ClassWithExposedField.\u003cinit\u003e(): void": [
      "com.google.gson.metrics.PerformanceTest$ClassWithExposedField.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.Java17RecordTest$4LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User2"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testSerializeWrappedNullValue(): void": [
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "org.junit.Assert.assertNull(java.lang.Object): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$BillingInstrumentWrapper.\u003cinit\u003e(com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$BillingInstrument): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.getPath(boolean): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$ClassWithNoFields.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$SimpleProto"
    ],
    "com.google.gson.functional.ArrayTest.testMultidimensionalObjectArraysSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapterTest.testWellFormedParseException(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonParseException.getMessage(): java.lang.String",
      "org.junit.Assert.fail(java.lang.String): void",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void"
    ],
    "com.google.gson.GsonBuilderTest$3.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.GsonBuilderTest$3.write(com.google.gson.stream.JsonWriter, com.google.gson.GsonBuilderTest$CustomClass1): void"
    ],
    "com.google.gson.functional.PrettyPrintingTest.testMap(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.ToNumberPolicy$4.readNumber(com.google.gson.stream.JsonReader): java.math.BigDecimal": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.internal.NumberLimits.parseBigDecimal(java.lang.String): java.math.BigDecimal",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void"
    ],
    "com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.String.length(): int",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.String.substring(int, int): java.lang.String"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter.getFactory(com.google.gson.ToNumberStrategy): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.ObjectTypeAdapter.newFactory(com.google.gson.ToNumberStrategy): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type): java.lang.reflect.WildcardType": [
      "java.lang.reflect.WildcardType.getLowerBounds(): java.lang.reflect.Type[]",
      "com.google.gson.internal.$Gson$Types$WildcardTypeImpl.\u003cinit\u003e(java.lang.reflect.Type[], java.lang.reflect.Type[]): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.CustomDeserializerTest$DataHolder.getData(): java.lang.String": [],
    "com.google.gson.stream.JsonReader.skipUnquotedValue(): void": [
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean",
      "com.google.gson.stream.JsonReader.checkLenient(): void"
    ],
    "com.google.gson.functional.CollectionTest$19.serialize(java.util.List, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$1.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part": [
      "java.lang.AssertionError.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.isInitialized(): boolean": [],
    "com.google.gson.functional.PrimitiveTest$ClassWithIntegerField.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonTreeTest.testToJsonTree(): void": [
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonObject.entrySet(): java.util.Set",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.functional.JsonTreeTest.assertContains(com.google.gson.JsonObject, com.google.gson.JsonPrimitive): void",
      "com.google.gson.JsonElement.isJsonObject(): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter$CustomAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testOverwriteBuiltIn(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$BuiltInOverwriting.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonDeserializer$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonDeserializer": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonDeserializer.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clear(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clear(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.\u003cinit\u003e(java.lang.Object): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordSupportedHelper.\u003cinit\u003e(com.google.gson.internal.reflect.ReflectionHelper$1): void": [
      "com.google.gson.internal.reflect.ReflectionHelper$RecordSupportedHelper.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.functional.CustomDeserializerTest$3.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProtoOrBuilder.getMsgBytes(): com.google.protobuf.ByteString": [],
    "com.google.gson.functional.PrimitiveTest.testShortDeserializationLossy(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.Gson.fieldNamingStrategy(): com.google.gson.FieldNamingStrategy": [],
    "com.example.Main.lambda$testConstructorNoArgs$9(com.google.gson.Gson): java.lang.String": [
      "java.lang.Integer.toString(int): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.stream.JsonReaderTest.testBomForbiddenAsOtherCharacterInDocument(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void"
    ],
    "com.google.gson.functional.InstanceCreatorTest$7.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$25.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$25.read(com.google.gson.stream.JsonReader): java.util.Currency"
    ],
    "com.google.gson.functional.CollectionTest.testWildcardCollectionField(): void": [
      "java.util.Collection.add(java.lang.Object): boolean",
      "java.util.Collection.size(): int",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.functional.CollectionTest$ObjectWithWildcardCollection.getCollection(): java.util.Collection",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.CollectionTest$ObjectWithWildcardCollection.\u003cinit\u003e(java.util.Collection): void",
      "com.google.common.truth.IterableSubject.contains(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.metrics.ParseBenchmark$Feed.toString(): java.lang.String": [
      "java.lang.StringBuilder.append(long): java.lang.StringBuilder",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.List.iterator(): java.util.Iterator",
      "java.util.Iterator.next(): java.lang.Object"
    ],
    "com.google.gson.functional.ReadersWritersTest$2.\u003cinit\u003e(com.google.gson.functional.ReadersWritersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializingBigDecimalAsIntegerFails$31(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.CollectionTest$6.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onBuilt(): void",
      "java.util.Collections.unmodifiableList(java.util.List): java.util.List",
      "com.google.protobuf.RepeatedFieldBuilderV3.build(): java.util.List",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getSerializedSize(): int": [
      "com.google.protobuf.UnknownFieldSet.getSerializedSize(): int",
      "com.google.protobuf.CodedOutputStream.computeInt32Size(int, int): int",
      "com.google.protobuf.GeneratedMessageV3.computeStringSize(int, java.lang.Object): int"
    ],
    "com.google.gson.functional.Java17RecordTest$1Blocked.b(): int": [],
    "com.google.gson.ToNumberPolicyTest.lambda$testLongOrDouble$4(com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.internal.sql.SqlTypesSupport$2.deserialize(java.util.Date): java.sql.Timestamp": [
      "java.sql.Timestamp.\u003cinit\u003e(long): void",
      "java.util.Date.getTime(): long"
    ],
    "com.google.gson.ExclusionStrategy.shouldSkipField(com.google.gson.FieldAttributes): boolean": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testAdapterCreatedByInstanceCreator(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByInstanceCreator.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByInstanceCreator$Serializer.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$7.read(com.google.gson.stream.JsonReader): java.lang.String": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$LongToStringTypeAdapterFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.finalize(java.lang.Object): java.lang.Object": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.protobuf.InvalidProtocolBufferException.getUnfinishedMessage(): com.google.protobuf.MessageLite",
      "com.google.protobuf.InvalidProtocolBufferException.unwrapIOException(): java.io.IOException",
      "com.google.protobuf.Parser.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization(): void": [
      "java.math.BigDecimal.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$5.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$Derived.\u003cinit\u003e(): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$Base.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(com.google.gson.stream.JsonReader): java.util.Collection"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parser(): com.google.protobuf.Parser": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilderForType(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$ClassWithTransientFields.\u003cinit\u003e(long): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$ClassWithTransientFields.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.GsonTest.testNewJsonReader_Default(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.stream.JsonReader.close(): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.newJsonReader(java.io.Reader): com.google.gson.stream.JsonReader"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.internal.ConstructorConstructor$9.construct(): java.lang.Object": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.reflect.InvocationTargetException.getCause(): java.lang.Throwable",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.reflect.ReflectionHelper.createExceptionForUnexpectedIllegalAccess(java.lang.IllegalAccessException): java.lang.RuntimeException",
      "java.lang.reflect.Constructor.newInstance(java.lang.Object[]): java.lang.Object",
      "com.google.gson.internal.reflect.ReflectionHelper.constructorToString(java.lang.reflect.Constructor): java.lang.String"
    ],
    "com.google.gson.JsonPrimitive.getAsBoolean(): boolean": [
      "java.lang.Boolean.booleanValue(): boolean",
      "com.google.gson.JsonPrimitive.isBoolean(): boolean",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String",
      "java.lang.Boolean.parseBoolean(java.lang.String): boolean"
    ],
    "com.google.gson.internal.UnsafeAllocator.access$000(java.lang.Class): void": [
      "com.google.gson.internal.UnsafeAllocator.assertInstantiable(java.lang.Class): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testUnterminatedStringFailure(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.JsonPrimitive.getAsLong(): long": [
      "java.lang.Number.longValue(): long",
      "java.lang.Long.parseLong(java.lang.String): long",
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Element.\u003cinit\u003e(java.lang.Object, java.lang.String, com.google.gson.TypeAdapter, com.google.gson.JsonElement): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.util.concurrent.atomic.AtomicBoolean.\u003cinit\u003e(boolean): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.functional.ConcurrencyTest$1.\u003cinit\u003e(com.google.gson.functional.ConcurrencyTest, java.util.concurrent.CountDownLatch, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.CountDownLatch): void",
      "java.util.concurrent.CountDownLatch.countDown(): void",
      "java.util.concurrent.atomic.AtomicBoolean.get(): boolean",
      "java.util.concurrent.ExecutorService.execute(java.lang.Runnable): void",
      "java.util.concurrent.CountDownLatch.await(): void",
      "java.util.concurrent.CountDownLatch.\u003cinit\u003e(int): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.concurrent.Executors.newFixedThreadPool(int): java.util.concurrent.ExecutorService"
    ],
    "com.google.gson.annotations.Expose.deserialize(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.build(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setAnotherField(java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.hasNIdCt(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getContent(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.access$1700(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.protobuf.UnknownFieldSet",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.hasContent(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setNIdCt(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.ensureDataIsMutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "java.util.List.isEmpty(): boolean",
      "java.util.List.addAll(java.util.Collection): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.access$1600(): boolean",
      "com.google.protobuf.RepeatedFieldBuilderV3.addAllMessages(java.lang.Iterable): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.protobuf.RepeatedFieldBuilderV3.isEmpty(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setContent(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.protobuf.RepeatedFieldBuilderV3.dispose(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getNIdCt(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest$8LocalRecord.hashCode(): int": [],
    "com.google.gson.internal.LazilyParsedNumber.intValue(): int": [
      "java.math.BigDecimal.intValue(): int",
      "java.lang.Long.parseLong(java.lang.String): long",
      "com.google.gson.internal.LazilyParsedNumber.asBigDecimal(): java.math.BigDecimal",
      "java.lang.Integer.parseInt(java.lang.String): int"
    ],
    "com.google.gson.JsonElement.getAsNumber(): java.lang.Number": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.LongSerializationPolicy.serialize(java.lang.Long): com.google.gson.JsonElement": [],
    "com.google.gson.GsonBuilder.setExclusionStrategies(com.google.gson.ExclusionStrategy[]): com.google.gson.GsonBuilder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.Excluder.withExclusionStrategy(com.google.gson.ExclusionStrategy, boolean, boolean): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Base.\u003cinit\u003e(java.lang.Object): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testFailWithPositionOverHashEndOfLineComment(): void": [
      "com.google.gson.stream.JsonReaderTest.testFailWithPosition(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest$ParameterizedSub.\u003cinit\u003e(java.lang.Object, java.lang.Object): void": [
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ParameterizedBase.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonDeserializer.\u003cinit\u003e(java.util.List): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DateTypeAdapter$1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArrayAsListTest.testGet(): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.JsonArray.asList(): java.util.List",
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonObjectAsMapTest.testEntrySet(): void": [
      "java.util.Map.entrySet(): java.util.Set",
      "java.util.Collections.singleton(java.lang.Object): java.util.Set",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "java.util.Set.remove(java.lang.Object): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.util.Set.iterator(): java.util.Iterator",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonObject.entrySet(): java.util.Set",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.AbstractMap$SimpleEntry.\u003cinit\u003e(java.lang.Object, java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map$Entry.setValue(java.lang.Object): java.lang.Object",
      "java.util.ArrayList.\u003cinit\u003e(java.util.Collection): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.util.Set.add(java.lang.Object): boolean",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$1.\u003cinit\u003e(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$19.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newInstance(com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArrayAsListTest.testToArray(): void": [
      "com.google.gson.JsonArray.asList(): java.util.List",
      "java.util.List.toArray(java.lang.Object[]): java.lang.Object[]",
      "com.google.common.truth.ObjectArraySubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "java.util.List.toArray(): java.lang.Object[]",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonArrayTest.testIntegerPrimitiveAddition(): void": [
      "com.google.gson.JsonArray.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter$CustomAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapter.parse(java.lang.String, java.text.ParsePosition): java.util.Date": [
      "java.util.Calendar.setLenient(boolean): void",
      "java.util.Calendar.set(int, int): void",
      "java.text.ParsePosition.getIndex(): int",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.util.Calendar.getTime(): java.util.Date",
      "java.lang.String.equals(java.lang.Object): boolean",
      "java.lang.String.substring(int): java.lang.String",
      "com.google.gson.typeadapters.UtcDateTypeAdapter.checkOffset(java.lang.String, int, char): boolean",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.util.GregorianCalendar.\u003cinit\u003e(java.util.TimeZone): void",
      "java.util.TimeZone.getID(): java.lang.String",
      "java.text.ParsePosition.setIndex(int): void",
      "java.lang.String.charAt(int): char",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.String.length(): int",
      "java.lang.Exception.getMessage(): java.lang.String",
      "java.lang.IndexOutOfBoundsException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.text.ParseException.\u003cinit\u003e(java.lang.String, int): void",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "com.google.gson.typeadapters.UtcDateTypeAdapter.parseInt(java.lang.String, int, int): int",
      "java.lang.IndexOutOfBoundsException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TypeAdapterPrecedenceTest$Foo"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonArrayAsInt$9(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$6.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$Derived.\u003cinit\u003e(): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$Base.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.findValueByNameAndExtension(com.google.protobuf.Descriptors$EnumDescriptor, com.google.gson.JsonElement): com.google.protobuf.Descriptors$EnumValueDescriptor": [
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonElement.getAsInt(): int",
      "com.google.protobuf.Descriptors$EnumValueDescriptor.getName(): java.lang.String",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.protobuf.Descriptors$EnumDescriptor.findValueByNumber(int): com.google.protobuf.Descriptors$EnumValueDescriptor",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.gson.protobuf.ProtoTypeAdapter.getCustSerializedEnumValue(com.google.protobuf.DescriptorProtos$EnumValueOptions, java.lang.String): java.lang.String",
      "com.google.protobuf.Descriptors$EnumValueDescriptor.getOptions(): com.google.protobuf.DescriptorProtos$EnumValueOptions",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "com.google.protobuf.Descriptors$EnumDescriptor.getValues(): java.util.List",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.List.iterator(): java.util.Iterator",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.Excluder.excludeClassChecks(java.lang.Class): boolean": [
      "java.lang.Class.getAnnotation(java.lang.Class): java.lang.annotation.Annotation",
      "com.google.gson.internal.Excluder.isValidVersion(com.google.gson.annotations.Since, com.google.gson.annotations.Until): boolean",
      "com.google.gson.internal.Excluder.isInnerClass(java.lang.Class): boolean",
      "com.google.gson.internal.Excluder.isAnonymousOrNonStaticLocal(java.lang.Class): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat"
    ],
    "com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType(): void": [
      "java.util.Collection.add(java.lang.Object): boolean",
      "com.google.gson.functional.EnumTest$5.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.common.MoreAsserts.assertContains(java.util.Collection, java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.EnumTest$5.\u003cinit\u003e(com.google.gson.functional.EnumTest): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.it.ShrinkingIT.lambda$testNoSerializedName_NoArgsConstructorNoJdkUnsafe$5(java.lang.Class): void": [
      "java.nio.file.Path.equals(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Class.getMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$5.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$5.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Subclass"
    ],
    "com.google.gson.functional.ObjectTest.testEmptyStringDeserialization(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.internal.bind.TypeAdapters$8.read(com.google.gson.stream.JsonReader): java.util.concurrent.atomic.AtomicInteger": [
      "java.util.concurrent.atomic.AtomicInteger.\u003cinit\u003e(int): void",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.internal.bind.TypeAdapters$5.read(com.google.gson.stream.JsonReader): java.lang.Number": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.\u003cinit\u003e(): void": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.maybeForceBuilderInitialization(): void",
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.\u003cinit\u003e(com.google.gson.Gson, java.lang.reflect.Type, com.google.gson.TypeAdapter, com.google.gson.internal.ObjectConstructor): void",
      "com.google.gson.internal.ConstructorConstructor.get(com.google.gson.reflect.TypeToken): com.google.gson.internal.ObjectConstructor",
      "com.google.gson.internal.$Gson$Types.getCollectionElementType(java.lang.reflect.Type, java.lang.Class): java.lang.reflect.Type",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$4.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization(): void": [
      "com.google.gson.GsonBuilder.setLongSerializationPolicy(com.google.gson.LongSerializationPolicy): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.lang.Long.longValue(): long",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$12.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$ArrayOfObjects.getExpectedJson(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setId(java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker.\u003cinit\u003e(com.google.gson.internal.ReflectionAccessFilterHelper$1): void": [
      "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$EntrySet.iterator(): java.util.Iterator": [
      "com.google.gson.internal.LinkedTreeMap$EntrySet$1.\u003cinit\u003e(com.google.gson.internal.LinkedTreeMap$EntrySet): void"
    ],
    "com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization(): void": [
      "com.google.gson.functional.CircularReferenceTest$ClassWithSelfReferenceArray.\u003cinit\u003e(): void",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.removeData(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "java.util.List.remove(int): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.ensureDataIsMutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.onChanged(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.remove(int): void"
    ],
    "com.google.gson.metrics.CollectionsDeserializationBenchmark.main(java.lang.String[]): void": [
      "com.google.gson.metrics.NonUploadingCaliperRunner.run(java.lang.Class, java.lang.String[]): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.toString(): java.lang.String": [
      "java.util.List.get(int): java.lang.Object",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.text.SimpleDateFormat.toPattern(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parser(): com.google.protobuf.Parser": [],
    "com.google.gson.stream.JsonReaderTest.testSkipObjectAfterPeek(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNameAsTopLevelValue$2(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.bind.TypeAdapters$11.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$1.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByInstanceCreator$Serializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.equals(java.lang.Object): boolean": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getHeight(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasHeight(): boolean",
      "com.google.protobuf.GeneratedMessageV3.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasWidth(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasData(): boolean",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.protobuf.UnknownFieldSet.equals(java.lang.Object): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getData(): java.lang.String",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getWidth(): int"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByJdkUnsafe.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.metrics.SerializationBenchmark.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$5.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest.testPrimitiveAdapterNullValue(): void": [
      "com.google.gson.functional.Java17RecordTest$1.\u003cinit\u003e(com.google.gson.functional.Java17RecordTest): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.ToNumberPolicy$1.readNumber(com.google.gson.stream.JsonReader): java.lang.Number": [
      "com.google.gson.ToNumberPolicy$1.readNumber(com.google.gson.stream.JsonReader): java.lang.Double"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.DefaultTypeAdaptersTest$NumberAsStringAdapter.\u003cinit\u003e(java.lang.Class): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$1.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part): void": [
      "java.lang.AssertionError.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testUnexpectedToken(): void": [
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.dateAdapter(com.google.gson.TypeAdapterFactory): com.google.gson.TypeAdapter",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createDefaultsAdapterFactory(): com.google.gson.TypeAdapterFactory",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.Gson$FutureTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.Gson$FutureTypeAdapter.delegate(): com.google.gson.TypeAdapter",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.JsonParserTest.testReadWriteTwoObjects(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.io.CharArrayWriter.toCharArray(): char[]",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.internal.Streams.parse(com.google.gson.stream.JsonReader): com.google.gson.JsonElement",
      "java.io.CharArrayReader.\u003cinit\u003e(char[]): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.CharArrayWriter.write(char[]): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "java.lang.String.toCharArray(): char[]",
      "java.io.CharArrayWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseFrom(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString): java.lang.Object"
    ],
    "com.google.gson.functional.DelegateTypeAdapterTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$16.construct(): java.lang.Object": [
      "java.util.TreeMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.extras.examples.rawcollections.RawCollectionsExample$Event.\u003cinit\u003e(java.lang.String, java.lang.String, com.google.gson.extras.examples.rawcollections.RawCollectionsExample$1): void": [
      "com.google.gson.extras.examples.rawcollections.RawCollectionsExample$Event.\u003cinit\u003e(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.interceptors.InterceptorTest$AddressValidator.postDeserialize(com.google.gson.interceptors.InterceptorTest$Address): void": [
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.InternationalizationTest.testSupplementaryUnicodeDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.String.\u003cinit\u003e(int[], int, int): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory$Factory, com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory$1.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory): void"
    ],
    "com.google.gson.functional.JsonTreeTest$SubTypeOfBagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String, float): void": [
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void"
    ],
    "com.google.gson.FieldAttributesTest$1.\u003cinit\u003e(com.google.gson.FieldAttributesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.JavaVersionTest.testJava6(): void": [
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.JavaVersion.getMajorJavaVersion(java.lang.String): int"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Element.access$502(com.google.gson.graph.GraphAdapterBuilder$Element, java.lang.Object): java.lang.Object": [],
    "com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValuesStrict(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest$PrincipalTypeAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest.lambda$testPrimitiveJsonNullValue$2(java.lang.String): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose(): void": [
      "com.google.gson.internal.bind.JsonTreeWriter.close(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.internal.bind.JsonTreeWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.endArray(): com.google.gson.stream.JsonWriter",
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.example.Main.testNoJdkUnsafe(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.disableJdkUnsafe(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void"
    ],
    "com.example.ClassWithAdapter$Adapter.read(com.google.gson.stream.JsonReader): com.example.ClassWithAdapter": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "com.example.ClassWithAdapter.\u003cinit\u003e(int): void",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.stream.JsonWriter.getFormattingStyle(): com.google.gson.FormattingStyle": [],
    "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void": [
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.metrics.ParseBenchmark$JacksonStreamParser.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$CustomClass1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault(): void": [
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.internal.sql.SqlDateTypeAdapter$1.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.internal.sql.SqlDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.sql.SqlDateTypeAdapter$1): void"
    ],
    "com.google.gson.JsonStreamParserTest.testIncompleteInput(): void": [
      "com.google.gson.JsonStreamParser.hasNext(): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonStreamParser.\u003cinit\u003e(java.lang.String): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.bind.TypeAdapters$12.read(com.google.gson.stream.JsonReader): java.lang.Number": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$SuperTestClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testCapitalizedNullFailWhenStrict(): void": [
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testPutNullValue_Forbidden(): void": [
      "com.google.gson.internal.LinkedTreeMap.containsValue(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.MapSubject.doesNotContainKey(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(boolean): void",
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.bind.ArrayTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.util.ArrayList.get(int): java.lang.Object",
      "java.util.ArrayList.add(java.lang.Object): boolean",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.reflect.Array.set(java.lang.Object, int, java.lang.Object): void",
      "java.lang.reflect.Array.newInstance(java.lang.Class, int): java.lang.Object",
      "java.lang.Class.isPrimitive(): boolean",
      "java.util.ArrayList.toArray(java.lang.Object[]): java.lang.Object[]",
      "java.util.ArrayList.size(): int",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.InvalidProtocolBufferException.getUnfinishedMessage(): com.google.protobuf.MessageLite",
      "com.google.protobuf.InvalidProtocolBufferException.unwrapIOException(): java.io.IOException",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder",
      "com.google.protobuf.Parser.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.functional.NamingPolicyTest$ClassWithDuplicateFields.\u003cinit\u003e(java.lang.Integer): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.Java17RecordTest$2LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.functional.StringTest.testAssignmentCharDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.Java17RecordTest.testRecordBaseClass(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.Java17RecordTest$13LocalRecord.\u003cinit\u003e(int): void"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithCustomNames.toString(): java.lang.String": [],
    "com.google.gson.internal.NonNullElementWrapperList.indexOf(java.lang.Object): int": [
      "java.util.ArrayList.indexOf(java.lang.Object): int"
    ],
    "com.google.gson.stream.JsonReader.getStrictness(): com.google.gson.Strictness": [],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithSerializedName.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap.find(java.lang.Object, boolean): com.google.gson.internal.LinkedTreeMap$Node": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.util.Comparator.compare(java.lang.Object, java.lang.Object): int",
      "java.lang.Comparable.compareTo(java.lang.Object): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getName(): java.lang.String",
      "java.lang.ClassCastException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.LinkedTreeMap$Node.\u003cinit\u003e(boolean, com.google.gson.internal.LinkedTreeMap$Node, java.lang.Object, com.google.gson.internal.LinkedTreeMap$Node, com.google.gson.internal.LinkedTreeMap$Node): void",
      "com.google.gson.internal.LinkedTreeMap.rebalance(com.google.gson.internal.LinkedTreeMap$Node, boolean): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$ClassExtendingJdkClass.read(char[], int, int): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.access$200(): boolean": [],
    "com.google.gson.functional.TreeTypeAdaptersTest$IdTreeTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TreeTypeAdaptersTest$Id": [
      "com.google.gson.functional.TreeTypeAdaptersTest$Id.\u003cinit\u003e(java.lang.String, java.lang.reflect.Type): void",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Annotations.getDescriptor(): com.google.protobuf.Descriptors$FileDescriptor": [],
    "com.google.gson.interceptors.InterceptorTest$UserValidator.postDeserialize(com.google.gson.interceptors.InterceptorTest$User): void": [
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.FieldAttributesTest.setUp(): void": [
      "java.lang.Class.getField(java.lang.String): java.lang.reflect.Field",
      "com.google.gson.FieldAttributes.\u003cinit\u003e(java.lang.reflect.Field): void"
    ],
    "com.google.gson.functional.Java17RecordTest$8LocalRecord.s(): java.lang.String": [],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest.testCustomStrategiesCannotAffectConcreteDeclaredNumbers(): void": [
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$4.getType(): java.lang.reflect.Type",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$3.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void",
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$5.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.Ordered.inOrder(): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$4.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$6.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.GsonBuilder.setObjectToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.setNumberToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder",
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$6.\u003cinit\u003e(com.google.gson.functional.ToNumberPolicyFunctionalTest): void",
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$5.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.ObjectTest$Superclass1.\u003cinit\u003e(): void": [
      "com.google.gson.functional.ObjectTest$Superclass2.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$3.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.DefaultMapJsonSerializerTest$1.\u003cinit\u003e(com.google.gson.DefaultMapJsonSerializerTest): void",
      "com.google.gson.JsonObject.entrySet(): java.util.Set",
      "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement",
      "com.google.common.truth.Subject.isInstanceOf(java.lang.Class): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.IterableSubject.isEmpty(): void",
      "com.google.gson.DefaultMapJsonSerializerTest$1.getType(): java.lang.reflect.Type",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.hasMonth(): boolean": [],
    "com.google.gson.InnerClassExclusionStrategyTest$InnerClass.\u003cinit\u003e(com.google.gson.InnerClassExclusionStrategyTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeToken.typeEquals(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType, java.util.Map): boolean": [
      "java.lang.reflect.ParameterizedType.getRawType(): java.lang.reflect.Type",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "com.google.gson.reflect.TypeToken.matches(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map): boolean"
    ],
    "com.google.gson.JsonPrimitive.getAsInt(): int": [
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "java.lang.Number.intValue(): int",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String",
      "java.lang.Integer.parseInt(java.lang.String): int"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$MyClassTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.DefaultTypeAdaptersTest$MyClassTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Class): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type): boolean",
      "java.lang.reflect.Field.getGenericType(): java.lang.reflect.Type",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Class.getDeclaredField(java.lang.String): java.lang.reflect.Field",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.reflect.Java17ReflectionHelperTest.testJava17RecordAccessors(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.reflect.ReflectionHelper.getAccessor(java.lang.Class, java.lang.reflect.Field): java.lang.reflect.Method",
      "java.lang.Class.forName(java.lang.String): java.lang.Class",
      "java.lang.Class.getDeclaredField(java.lang.String): java.lang.reflect.Field",
      "com.google.gson.internal.reflect.ReflectionHelper.getRecordComponentNames(java.lang.Class): java.lang.String[]",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.internal.reflect.Java17ReflectionHelperTest$PrincipalImpl.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "com.google.gson.internal.reflect.ReflectionHelper.getCanonicalRecordConstructor(java.lang.Class): java.lang.reflect.Constructor",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.reflect.Constructor.newInstance(java.lang.Object[]): java.lang.Object"
    ],
    "com.google.gson.FormattingStyle.getNewline(): java.lang.String": [],
    "com.google.gson.internal.bind.JsonTreeWriterTest.lambda$testNameInArray$3(com.google.gson.internal.bind.JsonTreeWriter): void": [
      "com.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$7.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.StreamingTypeAdaptersTest$7.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.StreamingTypeAdaptersTest$Person): void"
    ],
    "com.google.gson.MixedStreamTest.testWriteNulls(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.CollectionTest.testQueueDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.CollectionTest$7.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "com.google.gson.functional.CollectionTest$7.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.util.Queue.remove(): java.lang.Object",
      "java.util.Queue.element(): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonReader.isLenient(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.GsonBuilderTest.testDefaultStrictness(): void": [
      "com.google.gson.stream.JsonWriter.getStrictness(): com.google.gson.Strictness",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.newJsonReader(java.io.Reader): com.google.gson.stream.JsonReader",
      "com.google.gson.Gson.newJsonWriter(java.io.Writer): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonReader.getStrictness(): com.google.gson.Strictness"
    ],
    "com.example.GenericClasses$DummyClass$Adapter.write(com.google.gson.stream.JsonWriter, com.example.GenericClasses$DummyClass): void": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithRegisteredAdapter.hashCode(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newInstance(com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.ParameterizedTypesTest$Amount.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipValueAtObjectEnd(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.internal.Excluder.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.Excluder.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonStreamParser.remove(): void": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types$WildcardTypeImpl.equals(java.lang.Object): boolean": [
      "com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type): boolean"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.assertFormatted(java.lang.String, com.google.gson.TypeAdapterFactory): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.toLiteral(java.lang.String): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.dateAdapter(com.google.gson.TypeAdapterFactory): com.google.gson.TypeAdapter",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.matches(java.lang.String): void",
      "java.util.Date.\u003cinit\u003e(long): void"
    ],
    "com.google.gson.internal.bind.MapTypeAdapterFactory.getKeyAdapter(com.google.gson.Gson, java.lang.reflect.Type): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.nextName(boolean): java.lang.String": [
      "com.google.gson.internal.bind.JsonTreeReader.peekStack(): java.lang.Object",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.gson.internal.bind.JsonTreeReader.expect(com.google.gson.stream.JsonToken): void",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.gson.internal.bind.JsonTreeReader.push(java.lang.Object): void"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$BankTransfer.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$BillingInstrument.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonTreeTest.testJsonTreeNull(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonObject.has(java.lang.String): boolean",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.readIntoArray(com.google.gson.stream.JsonReader, int, java.lang.Object[]): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DateTypeAdapter.serialize(java.util.Date, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.util.Date.getTime(): long"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$3.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$15.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$15.write(com.google.gson.stream.JsonWriter, java.lang.String): void"
    ],
    "com.google.gson.internal.Excluder.withExclusionStrategy(com.google.gson.ExclusionStrategy, boolean, boolean): com.google.gson.internal.Excluder": [
      "java.util.ArrayList.\u003cinit\u003e(java.util.Collection): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.internal.Excluder.clone(): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.ReflectionAccessFilter.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.ReflectionAccessFilter$3.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilderForType(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.internal.bind.TypeAdapters$14.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$14.read(com.google.gson.stream.JsonReader): java.lang.Character"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing.lambda$test$2(): void": [
      "com.google.gson.reflect.TypeTokenTest$1Enclosing$3.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void"
    ],
    "com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$ClassOverridingEquals.getExpectedJson(): java.lang.String",
      "com.google.gson.common.TestTypes$ClassOverridingEquals.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$24.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$24.write(com.google.gson.stream.JsonWriter, java.util.UUID): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$RegisteredUserAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$RegisteredUserAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.getWidth(): int": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Double.doubleValue(): double",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Double.isInfinite(double): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.LinkedTreeMap$Node.\u003cinit\u003e(boolean, com.google.gson.internal.LinkedTreeMap$Node, java.lang.Object, com.google.gson.internal.LinkedTreeMap$Node, com.google.gson.internal.LinkedTreeMap$Node): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testMapDeserializationWithNullKey(): void": [
      "com.google.gson.functional.MapTest$9.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$9.getType(): java.lang.reflect.Type",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.IntegerSubject.isNull(): void",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.metrics.ParseBenchmark.timeParse(int): void": [
      "com.google.gson.metrics.ParseBenchmark$Parser.parse(char[], com.google.gson.metrics.ParseBenchmark$Document): void"
    ],
    "com.google.gson.GsonTest$6.serialize(com.google.gson.GsonTest$CustomClass2, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion(): void": [
      "com.google.gson.functional.FieldExclusionTest$Outer$Inner.\u003cinit\u003e(com.google.gson.functional.FieldExclusionTest$Outer, java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.FieldExclusionTest$Outer$Inner.toJson(): java.lang.String",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.PreJava9DateFormatProvider.getUSDateTimeFormat(int, int): java.text.DateFormat": [
      "java.text.SimpleDateFormat.\u003cinit\u003e(java.lang.String, java.util.Locale): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.PreJava9DateFormatProvider.getDatePartOfDateTimePattern(int): java.lang.String",
      "com.google.gson.internal.PreJava9DateFormatProvider.getTimePartOfDateTimePattern(int): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getSerializedSize(): int": [
      "com.google.protobuf.UnknownFieldSet.getSerializedSize(): int",
      "com.google.protobuf.ProtocolStringList.size(): int",
      "com.google.protobuf.LazyStringList.getRaw(int): java.lang.Object",
      "com.google.protobuf.GeneratedMessageV3.computeStringSize(int, java.lang.Object): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getNameThatTestsCaseFormatList(): com.google.protobuf.ProtocolStringList",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.computeStringSizeNoTag(java.lang.Object): int",
      "com.google.protobuf.LazyStringList.size(): int"
    ],
    "com.google.gson.functional.InstanceCreatorTest$2.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$SimpleProto": [],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.aBoolean(): boolean": [],
    "com.google.gson.metrics.ParseBenchmark$Document$2.\u003cinit\u003e(): void": [
      "com.fasterxml.jackson.core.type.TypeReference.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.\u003cinit\u003e(java.util.List, java.util.Queue, java.util.Set, java.util.SortedSet): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testObjectsInArrays(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.reflect.TypeTokenTest$1SubSubTypeToken2.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeTokenTest$1SubTypeToken.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void"
    ],
    "com.google.gson.Gson.floatAdapter(boolean): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson$2.\u003cinit\u003e(com.google.gson.Gson): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$3.serialize(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.common.TestTypes$ClassWithSerializedNameFields.\u003cinit\u003e(int, int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.String"
    ],
    "com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.ObjectTest$6.createInstance(java.lang.reflect.Type): com.google.gson.functional.ObjectTest$Parent$Child": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.functional.ObjectTest$Parent$Child.\u003cinit\u003e(com.google.gson.functional.ObjectTest$Parent): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$3.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson.assertFullConsumption(java.lang.Object, com.google.gson.stream.JsonReader): void": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testFailWithEscapedNewlineCharacter(): void": [
      "com.google.gson.stream.JsonReaderTest.testFailWithPosition(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testJsonValue(): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.jsonValue(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.NumberLimitsTest.testJsonReader(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.functional.NumberLimitsTest.jsonReader(java.lang.String): com.google.gson.stream.JsonReader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.String.repeat(int): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserFieldAnnotationAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserFieldAnnotationAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User): void"
    ],
    "com.google.gson.functional.RawSerializationTest$Foo.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.nextLong(): long": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peekStack(): java.lang.Object",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeReader.popStack(): java.lang.Object",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.bind.JsonTreeReader.locationString(): java.lang.String",
      "com.google.gson.JsonPrimitive.getAsLong(): long"
    ],
    "com.google.gson.functional.ObjectTest$1.shouldSkipClass(java.lang.Class): boolean": [],
    "com.google.gson.internal.bind.JsonTreeWriterTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilder(com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$2.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$2.serialize(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.bind.TypeAdapters$7.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$7.read(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDescriptorForType(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.functional.CustomDeserializerTest$DataHolderWrapper.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest$DataHolder): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest$ClassWithBaseFields.\u003cinit\u003e(com.google.gson.functional.MoreSpecificTypeSerializationTest$Base): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientNonFiniteDoubles(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.isNaN(double): boolean",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.MapTest$10.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$SubSerializer.serialize(com.google.gson.common.TestTypes$Sub, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void"
    ],
    "com.example.Main$1.\u003cinit\u003e(): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getId(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, com.google.gson.reflect.TypeToken): java.lang.Object"
    ],
    "com.google.gson.functional.Java17RecordTest$8LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String): com.google.gson.stream.JsonWriter": [
      "java.util.Objects.requireNonNull(java.lang.Object, java.lang.String): java.lang.Object",
      "java.util.List.isEmpty(): boolean",
      "com.google.gson.internal.bind.JsonTreeWriter.peek(): com.google.gson.JsonElement",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization(): void": [
      "java.lang.Long.longValue(): long",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, java.lang.String): void": [
      "java.text.SimpleDateFormat.\u003cinit\u003e(java.lang.String, java.util.Locale): void",
      "java.util.Locale.equals(java.lang.Object): boolean",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.Locale.getDefault(): java.util.Locale",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "java.util.List.add(java.lang.Object): boolean",
      "java.text.SimpleDateFormat.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.extras.examples.rawcollections.RawCollectionsExample$Event.\u003cinit\u003e(java.lang.String, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCaseUnderscorePolicySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$StringWrapper.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.GsonVersionDiagnosticsTest$1.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.GsonVersionDiagnosticsTest$TestType): void": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical(): void": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$Foo.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newTypeAdapter(java.lang.String): com.google.gson.TypeAdapter",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newSerializer(java.lang.String): com.google.gson.JsonSerializer",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newDeserializer(java.lang.String): com.google.gson.JsonDeserializer",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.JsonPrimitive.deepCopy(): com.google.gson.JsonPrimitive": [],
    "com.google.gson.internal.ConstructorConstructor$4.construct(): java.lang.Object": [
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$7.write(com.google.gson.stream.JsonWriter, java.lang.String): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomConstructor.hashCode(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.getInnerMessage2OrBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder": [],
    "com.google.gson.functional.DefaultTypeAdaptersTest$1.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.DefaultTypeAdaptersTest$1.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.util.Date"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.functional.MapTest$38.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.example.Main.lambda$testEnumSerializedName$20(com.google.gson.Gson): java.lang.String": [
      "com.example.Main.toJson(com.google.gson.Gson, java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testReadObject(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.ObjectTest$HasObjectMap.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.CustomTypeAdaptersTest$14.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.util.Map.size(): int",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.CustomTypeAdaptersTest$14.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Container.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Base.\u003cinit\u003e(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest.testCustomClassAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter.\u003cinit\u003e(int): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$DataOrBuilder.getDataBytes(): com.google.protobuf.ByteString": [],
    "com.google.gson.common.TestTypes$ClassWithTransientFields.\u003cinit\u003e(long): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonDeserializer$Deserializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void"
    ],
    "com.google.gson.GsonBuilder.setDateFormat(int, int): com.google.gson.GsonBuilder": [],
    "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLong(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.util.concurrent.atomic.AtomicLong.get(): long",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject(): void": [
      "com.google.gson.functional.RawSerializationTest$Foo.\u003cinit\u003e(int): void",
      "com.google.gson.functional.RawSerializationTest$Bar.\u003cinit\u003e(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.RawSerializationTest$3.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.RawSerializationTest$3.\u003cinit\u003e(com.google.gson.functional.RawSerializationTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.\u003cinit\u003e(): void": [
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.maybeForceBuilderInitialization(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithBigInteger.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$15.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing.testMethodTypeVariable(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "com.google.common.truth.StringSubject.isAnyOf(java.lang.Object, java.lang.Object, java.lang.Object[]): void"
    ],
    "com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked(): void": [
      "java.lang.String.valueOf(int): java.lang.String",
      "com.google.gson.functional.DelegateTypeAdapterTest$1.\u003cinit\u003e(com.google.gson.functional.DelegateTypeAdapterTest): void",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.functional.DelegateTypeAdapterTest$1.getType(): java.lang.reflect.Type",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$3.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest$7LocalRecord.s(): java.lang.String": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder.getNIdCt(): int": [],
    "com.google.gson.internal.bind.TypeAdapters$31.\u003cinit\u003e(java.lang.Class, com.google.gson.TypeAdapter): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilder.addSerializationExclusionStrategy(com.google.gson.ExclusionStrategy): com.google.gson.GsonBuilder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.Excluder.withExclusionStrategy(com.google.gson.ExclusionStrategy, boolean, boolean): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GizmoPartTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GizmoPartTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GizmoPartTypeAdapterFactory): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializingNonZeroDecimalPointValuesAsIntegerFails$29(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.example.Main.testJsonAdapterAnnotation(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.JsonStreamParser.hasNext(): boolean": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder.getDataCount(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.access$1800(): boolean": [],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing$1.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testFactoryReturningNull(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$4.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory.\u003cinit\u003e(java.lang.Object): void",
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$5.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getNIdCt(): int": [],
    "com.google.gson.functional.CustomDeserializerTest$DataHolder.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.lang.IllegalStateException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson.toJson(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.setHtmlSafe(boolean): void",
      "com.google.gson.stream.JsonWriter.isHtmlSafe(): boolean",
      "com.google.gson.stream.JsonWriter.getSerializeNulls(): boolean",
      "com.google.gson.stream.JsonWriter.setSerializeNulls(boolean): void",
      "com.google.gson.internal.Streams.write(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter): void",
      "com.google.gson.stream.JsonWriter.getStrictness(): com.google.gson.Strictness",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.AssertionError.getMessage(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.functional.LeniencyTest$1.\u003cinit\u003e(com.google.gson.functional.LeniencyTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapter.read(com.google.gson.stream.JsonReader): java.util.Date": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.text.ParsePosition.\u003cinit\u003e(int): void",
      "com.google.gson.stream.JsonToken.ordinal(): int",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.typeadapters.UtcDateTypeAdapter.parse(java.lang.String, java.text.ParsePosition): java.util.Date"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getAnotherField(): java.lang.String": [
      "com.google.protobuf.ByteString.isValidUtf8(): boolean",
      "com.google.protobuf.ByteString.toStringUtf8(): java.lang.String"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.equals(java.lang.Object): boolean": [
      "com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object): boolean",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.getValue(): java.lang.Object"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.common.truth.BooleanSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.NumberTypeAdapter.newFactory(com.google.gson.ToNumberStrategy): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.NumberTypeAdapter.\u003cinit\u003e(com.google.gson.ToNumberStrategy): void",
      "com.google.gson.internal.bind.NumberTypeAdapter$1.\u003cinit\u003e(com.google.gson.internal.bind.NumberTypeAdapter): void"
    ],
    "com.google.gson.ToNumberPolicyTest.lambda$testNullsAreNeverExpected$11(): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberPolicy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$ClassWithStaticField.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$8.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getLongTimestamp(): long": [],
    "com.google.gson.stream.JsonReaderTest.testNulls(): void": [
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictCommentsWithSkipValue(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testBigIntegerAdapter$13(com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "java.lang.String.repeat(int): java.lang.String"
    ],
    "com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark.timeBagOfPrimitivesReflectionStreaming(int): void": [
      "java.lang.reflect.Field.setLong(java.lang.Object, long): void",
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.reflect.Field.getName(): java.lang.String",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "java.lang.reflect.Field.setBoolean(java.lang.Object, boolean): void",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.metrics.BagOfPrimitives.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.reflect.Field.set(java.lang.Object, java.lang.Object): void",
      "java.lang.String.equals(java.lang.Object): boolean",
      "java.lang.Class.getDeclaredFields(): java.lang.reflect.Field[]",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "java.lang.reflect.Field.getType(): java.lang.Class",
      "java.lang.reflect.Field.setInt(java.lang.Object, int): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.ObjectTypeAdapterTest.testDeserialize(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "java.util.Collections.singletonMap(java.lang.Object, java.lang.Object): java.util.Map",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder.hasLongTimestamp(): boolean": [],
    "com.google.gson.JsonArrayTest.testDeepCopy(): void": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.gson.JsonArray.deepCopy(): com.google.gson.JsonArray",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GizmoPartTypeAdapterFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CollectionTest$4.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$ClassWithObjectsSerializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.\u003cinit\u003e(java.lang.reflect.Type): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type): java.lang.reflect.Type",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.Gson$2.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.Gson$2.read(com.google.gson.stream.JsonReader): java.lang.Float"
    ],
    "com.google.gson.internal.bind.NumberTypeAdapter.\u003cinit\u003e(com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.Excluder.withVersion(double): com.google.gson.internal.Excluder": [
      "com.google.gson.internal.Excluder.clone(): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.MapTest.testConcurrentMap(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.MapSubject.containsKey(java.lang.Object): void",
      "com.google.gson.functional.MapTest$17.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.functional.MapTest$17.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.concurrent.ConcurrentMap.get(java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.MapSubject.hasSize(int): void"
    ],
    "com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForObjectAndJsonElements(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.$Gson$Types.typeToString(java.lang.reflect.Type): java.lang.String"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.PrimitiveIntArraySubject.hasLength(int): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(int[]): com.google.common.truth.PrimitiveIntArraySubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.StringSubject.isNull(): void"
    ],
    "com.google.gson.internal.ConstructorConstructorTest.testGet_AbstractClassNoArgConstructor(): void": [
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.internal.ObjectConstructor.construct(): java.lang.Object",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.internal.ConstructorConstructor.get(com.google.gson.reflect.TypeToken): com.google.gson.internal.ObjectConstructor",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, java.lang.Object): java.lang.reflect.Type": [
      "java.lang.Object.getClass(): java.lang.Class"
    ],
    "com.google.gson.GsonBuilderTest.lambda$testRegisterTypeHierarchyAdapterJsonElements$1(com.google.gson.GsonBuilder, java.lang.Class): void": [
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.Gson.newJsonReader(java.io.Reader): com.google.gson.stream.JsonReader": [
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void"
    ],
    "com.google.gson.ToNumberPolicyTest.testLongOrDouble(): void": [
      "com.google.gson.ToNumberPolicyTest.fromStringLenient(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.NullObjectAndFieldTest$ClassWithObjectsSerializer.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.common.TestTypes$ClassWithObjects.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.NumberTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Number": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.stream.JsonToken.ordinal(): int",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonArrayAsFloatWrapper$16(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.GsonBuilder.disableJdkUnsafe(): com.google.gson.GsonBuilder": [],
    "com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization(): void": [
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.functional.CollectionTest$15.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.CollectionTest$15.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.Ordered.inOrder(): void"
    ],
    "com.google.gson.ExposeAnnotationExclusionStrategyTest$MockObject.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.Main.lambda$testNoJdkUnsafe$16(com.google.gson.Gson): java.lang.String": [
      "java.lang.Integer.toString(int): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasInnerMessage2(): boolean": [],
    "com.google.gson.protobuf.generated.Bag.registerAllExtensions(com.google.protobuf.ExtensionRegistry): void": [
      "com.google.gson.protobuf.generated.Bag.registerAllExtensions(com.google.protobuf.ExtensionRegistryLite): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomConstructor.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.Java17RecordTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Byte): void"
    ],
    "com.google.gson.it.ShrinkingIT.verifyJarExists(): void": [
      "java.nio.file.Files.isRegularFile(java.nio.file.Path, java.nio.file.LinkOption[]): boolean",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.getOwnerType(): java.lang.reflect.Type": [],
    "com.google.gson.functional.MapTest$24.serialize(java.util.Map, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "java.lang.Long.longValue(): long",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.util.Map.values(): java.util.Collection",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Collection.iterator(): java.util.Iterator"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$FooTypeAdapter.serialize(com.google.gson.functional.CustomTypeAdaptersTest$Foo, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonSerializationContext.serialize(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement"
    ],
    "com.google.gson.FormattingStyle.usesSpaceAfterSeparators(): boolean": [],
    "com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.PrimitiveIntArraySubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(int[]): com.google.common.truth.PrimitiveIntArraySubject"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$3(java.lang.reflect.GenericArrayType): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.internal.NumberLimits.parseBigDecimal(java.lang.String): java.math.BigDecimal": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.NumberFormatException.\u003cinit\u003e(java.lang.String): void",
      "java.math.BigDecimal.scale(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Math.abs(long): long",
      "com.google.gson.internal.NumberLimits.checkNumberStringLength(java.lang.String): void",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$5.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Subclass": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.isInitialized(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.newUninitializedMessageException(com.google.protobuf.Message): com.google.protobuf.UninitializedMessageException",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.functional.CustomDeserializerTest$5.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.\u003cclinit\u003e(): void": [
      "com.google.common.collect.MapMaker.\u003cinit\u003e(): void",
      "com.google.common.collect.MapMaker.makeMap(): java.util.concurrent.ConcurrentMap"
    ],
    "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$BaseCollection.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testLongs(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.ParameterizedTypeFixtures.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testMapSubclassSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.MapTest$MyMap.\u003cinit\u003e(): void",
      "com.google.gson.functional.MapTest$MyMap.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.CollectionTest.toIntArray(java.util.Collection): int[]": [
      "java.lang.Integer.intValue(): int",
      "java.util.Collection.size(): int",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Collection.iterator(): java.util.Iterator",
      "java.lang.Long.intValue(): int"
    ],
    "com.example.GenericClasses$GenericUsingGenericClass.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$ClassWithSerializedNameFields.\u003cinit\u003e(int, int): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$ClassWithSerializedNameFields.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.endArray(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.popStack(): java.lang.Object",
      "com.google.gson.internal.bind.JsonTreeReader.expect(com.google.gson.stream.JsonToken): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.Gson.\u003cinit\u003e(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "java.util.Collections.emptyMap(): java.util.Map",
      "com.google.gson.Gson.\u003cinit\u003e(com.google.gson.internal.Excluder, com.google.gson.FieldNamingStrategy, java.util.Map, boolean, boolean, boolean, boolean, com.google.gson.FormattingStyle, com.google.gson.Strictness, boolean, boolean, com.google.gson.LongSerializationPolicy, java.lang.String, int, int, java.util.List, java.util.List, java.util.List, com.google.gson.ToNumberStrategy, com.google.gson.ToNumberStrategy, java.util.List): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization(): void": [
      "com.google.gson.GsonBuilder.disableHtmlEscaping(): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isNotEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getMonth(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat"
    ],
    "com.google.gson.internal.bind.TypeAdapters$25.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesCount(): int": [
      "java.util.List.size(): int",
      "com.google.protobuf.RepeatedFieldBuilderV3.getCount(): int"
    ],
    "com.google.gson.functional.Java17RecordTest$4LocalRecord.hashCode(): int": [],
    "com.google.gson.FormattingStyle.\u003cclinit\u003e(): void": [
      "com.google.gson.FormattingStyle.\u003cinit\u003e(java.lang.String, java.lang.String, boolean): void"
    ],
    "com.google.gson.functional.MapTest.testMapDeserializationEmpty(): void": [
      "com.google.gson.functional.MapTest$4.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$4.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.MapSubject.isEmpty(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Document$4.\u003cinit\u003e(): void": [
      "com.fasterxml.jackson.core.type.TypeReference.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArray.getAsBigInteger(): java.math.BigInteger": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsBigInteger(): java.math.BigInteger"
    ],
    "com.google.gson.internal.ConstructorConstructor$16.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest$DataHolderDeserializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithBigDecimal.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest$1RecordWithExpose.b(): int": [],
    "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken": [
      "java.lang.AssertionError.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.doPeek(): int"
    ],
    "com.google.gson.internal.bind.ArrayTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.lang.reflect.Array.get(java.lang.Object, int): java.lang.Object",
      "java.lang.reflect.Array.getLength(java.lang.Object): int",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getNameThatTestsCaseFormatBytes(int): com.google.protobuf.ByteString": [
      "com.google.protobuf.LazyStringList.getByteString(int): com.google.protobuf.ByteString"
    ],
    "com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization(): void": [
      "java.util.Collection.add(java.lang.Object): boolean",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.JsonArray.iterator(): java.util.Iterator",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$ClassWithBaseCollectionField.\u003cinit\u003e(java.util.Collection): void",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "java.util.Iterator.hasNext(): boolean"
    ],
    "com.google.gson.metrics.ParseBenchmark$Document$5.\u003cinit\u003e(): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.protobuf.ProtoTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.protobuf.Message"
    ],
    "com.google.gson.internal.GsonTypesTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonElement.getAsJsonNull(): com.google.gson.JsonNull": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.GsonBuilder.setVersion(double): com.google.gson.GsonBuilder": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(double): java.lang.StringBuilder",
      "com.google.gson.internal.Excluder.withVersion(double): com.google.gson.internal.Excluder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Double.isNaN(double): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter$2.\u003cclinit\u003e(): void": [
      "com.google.gson.stream.JsonToken.values(): com.google.gson.stream.JsonToken[]",
      "com.google.gson.stream.JsonToken.ordinal(): int"
    ],
    "com.google.gson.internal.bind.TypeAdapters$19.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$Roshambo$1.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.functional.EnumTest$Roshambo.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearSimples(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.clear(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$PrivateRecord.toString(): java.lang.String": [],
    "com.google.gson.Gson$5.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.Gson$5.write(com.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicLongArray): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonDeserializer.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonParserTest.testParseString(): void": [
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonElement.getAsInt(): int",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonElement.isJsonObject(): boolean",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.stream.JsonReaderTest.testIntegersWithFractionalPartSpecified(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "java.util.GregorianCalendar.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonPrimitive.isBoolean(): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonPrimitive.getAsBoolean(): boolean"
    ],
    "com.google.gson.stream.JsonReader.peekKeyword(): int": [
      "java.lang.String.charAt(int): char",
      "java.lang.String.length(): int",
      "com.google.gson.stream.JsonReader.isLiteral(char): boolean",
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean"
    ],
    "com.example.EnumClassWithSerializedName.$values(): com.example.EnumClassWithSerializedName[]": [],
    "com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest.setUp(): void": [
      "com.google.gson.protobuf.ProtoTypeAdapter.newBuilder(): com.google.gson.protobuf.ProtoTypeAdapter$Builder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.setEnumSerialization(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization): com.google.gson.protobuf.ProtoTypeAdapter$Builder",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.build(): com.google.gson.protobuf.ProtoTypeAdapter",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.setFieldNameSerializationFormat(com.google.common.base.CaseFormat, com.google.common.base.CaseFormat): com.google.gson.protobuf.ProtoTypeAdapter$Builder"
    ],
    "com.google.gson.stream.JsonToken.$values(): com.google.gson.stream.JsonToken[]": [],
    "com.google.gson.graph.GraphAdapterBuilder.registerOn(com.google.gson.GsonBuilder): void": [
      "com.google.gson.graph.GraphAdapterBuilder$Factory.\u003cinit\u003e(java.util.Map): void",
      "java.util.Map.entrySet(): java.util.Set",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.ReflectionAccessFilter$3.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [
      "com.google.gson.internal.ReflectionAccessFilterHelper.isAndroidType(java.lang.Class): boolean"
    ],
    "com.google.gson.Gson$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.Gson$1.read(com.google.gson.stream.JsonReader): java.lang.Double"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$3.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$ClassWithObjects.\u003cinit\u003e(): void": [
      "com.google.gson.common.TestTypes$ClassWithObjects.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testLongSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "java.lang.Long.toString(long): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientPartialNonExecutePrefix(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.Strictness.values(): com.google.gson.Strictness[]": [
      "[Lcom.google.gson.Strictness;.clone(): java.lang.Object"
    ],
    "com.google.gson.functional.CollectionTest.testFieldIsArrayList(): void": [
      "com.google.gson.functional.CollectionTest$HasArrayListField.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "java.util.ArrayList.add(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$CyclicSub.\u003cinit\u003e(int): void": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$CyclicBase.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapter$1.\u003cinit\u003e(com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$BagOfPrimitiveWrappers.getExpectedJson(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parser(): com.google.protobuf.Parser": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClassJsonAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClassJsonAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClass"
    ],
    "com.google.gson.common.TestTypes$BagOfPrimitiveWrappers.\u003cinit\u003e(java.lang.Long, java.lang.Integer, java.lang.Boolean): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.metrics.PerformanceTest$ClassWithExposedField.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CollectionTest$11.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DelegateTypeAdapterTest$StatsTypeAdapterFactory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.GsonTest$2$1.run(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "java.util.concurrent.atomic.AtomicReference.set(java.lang.Object): void"
    ],
    "com.google.gson.typeadapters.PostConstructAdapterFactoryTest$Sandwich.\u003cinit\u003e(java.lang.String, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.hasHeight(): boolean": [],
    "com.google.gson.internal.Excluder.withModifiers(int[]): com.google.gson.internal.Excluder": [
      "com.google.gson.internal.Excluder.clone(): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.internal.bind.TypeAdapters.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.bind.TypeAdapters$27.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$1.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$22.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$14.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.TypeAdapters$23.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$19.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$5.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$7.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$2.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$25.nullSafe(): com.google.gson.TypeAdapter",
      "com.google.gson.internal.bind.TypeAdapters.newFactory(java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.TypeAdapters$13.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$26.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$10.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$8.nullSafe(): com.google.gson.TypeAdapter",
      "com.google.gson.internal.bind.TypeAdapters$18.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$6.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$2.nullSafe(): com.google.gson.TypeAdapter",
      "com.google.gson.internal.bind.TypeAdapters.newFactory(java.lang.Class, java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.TypeAdapters$16.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$29.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$11.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$12.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$9.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$25.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$17.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$3.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$21.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$15.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$1.nullSafe(): com.google.gson.TypeAdapter",
      "com.google.gson.internal.bind.TypeAdapters.newFactoryForMultipleTypes(java.lang.Class, java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.TypeAdapters$28.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$4.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$9.nullSafe(): com.google.gson.TypeAdapter",
      "com.google.gson.internal.bind.TypeAdapters$24.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$8.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TypeAdapters$10.nullSafe(): com.google.gson.TypeAdapter",
      "com.google.gson.internal.bind.TypeAdapters$20.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$DataOrBuilder.getHeight(): int": [],
    "com.google.gson.GsonTest$CustomClass3.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.TestExecutor.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$Roshambo.valueOf(java.lang.String): com.google.gson.functional.EnumTest$Roshambo": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.JsonParserTest.testParseEmptyString(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonElement.isJsonPrimitive(): boolean",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.metrics.BagOfPrimitives.toString(): java.lang.String": [
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest$1.shouldSkipField(com.google.gson.FieldAttributes): boolean": [],
    "com.google.gson.functional.MapTest.testConcurrentHashMap(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.MapSubject.containsKey(java.lang.Object): void",
      "java.util.concurrent.ConcurrentHashMap.get(java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.MapTest$18.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.MapTest$18.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.MapSubject.hasSize(int): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.value(float): com.google.gson.stream.JsonWriter": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(float): java.lang.StringBuilder",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.Float.isInfinite(float): boolean",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Float.isNaN(float): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeWriter.isLenient(): boolean",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setAnotherFieldBytes(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.access$000(com.google.gson.stream.JsonReader, java.lang.String): java.lang.IllegalStateException": [
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException"
    ],
    "com.google.gson.GsonTest$2.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.Thread.join(): void",
      "java.util.concurrent.atomic.AtomicInteger.incrementAndGet(): int",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.GsonTest$1DummyAdapter.\u003cinit\u003e(com.google.gson.GsonTest): void",
      "java.lang.Thread.start(): void",
      "com.google.gson.GsonTest$2$1.\u003cinit\u003e(com.google.gson.GsonTest$2, com.google.gson.Gson): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$18.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterSerializerDeserializerTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(com.google.gson.stream.JsonReader): java.util.Map"
    ],
    "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.\u003cinit\u003e(int): void": [
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.isInitialized(): boolean": [],
    "com.google.gson.functional.Java17RecordTest.testJsonAdapterAnnotation(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.Java17RecordTest$12LocalRecord.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$8.write(com.google.gson.stream.JsonWriter, java.lang.String): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.bind.TypeAdapters$9.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$9.write(com.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicBoolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.metrics.ParseBenchmark$Document$3.\u003cinit\u003e(): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.StringBuffer.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.EnumTest$Gender.values(): com.google.gson.functional.EnumTest$Gender[]": [
      "[Lcom.google.gson.functional.EnumTest$Gender;.clone(): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.ObjectTest$ArrayOfArrays.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.ObjectTest$ArrayOfArrays.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.doubleValue(): double",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(java.lang.String): java.lang.Double"
    ],
    "com.google.gson.functional.MapTest$20.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NamingPolicyTest$ClassWithComplexFieldName.\u003cinit\u003e(long): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.EnumClass.valueOf(java.lang.String): com.example.EnumClass": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization(): void": [
      "java.util.BitSet.set(int): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.util.BitSet.set(int, int): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.BitSet.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeToken.\u003cinit\u003e(java.lang.reflect.Type): void": [
      "java.lang.Object.hashCode(): int",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type): java.lang.reflect.Type",
      "com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type): java.lang.Class",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$PublicRecord.i(): int": [],
    "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest$1.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.ParameterizedTypesTest$1.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.\u003cinit\u003e(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearName(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getName(): java.lang.String",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipVeryLongQuotedString(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReaderTest.repeat(char, int): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.build(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.build(): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordSupportedHelper.getRecordComponentNames(java.lang.Class): java.lang.String[]": [
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "com.google.gson.internal.reflect.ReflectionHelper.access$300(java.lang.ReflectiveOperationException): java.lang.RuntimeException"
    ],
    "com.google.gson.interceptors.InterceptorTest$UserValidator.postDeserialize(java.lang.Object): void": [
      "com.google.gson.interceptors.InterceptorTest$UserValidator.postDeserialize(com.google.gson.interceptors.InterceptorTest$User): void"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$Student.\u003cinit\u003e(com.google.gson.functional.TreeTypeAdaptersTest$Id, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$1(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.getAccessibleObjectDescription(java.lang.reflect.AccessibleObject, boolean): java.lang.String": [
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.reflect.Method.getName(): java.lang.String",
      "com.google.gson.internal.reflect.ReflectionHelper.fieldToString(java.lang.reflect.Field): java.lang.String",
      "java.lang.reflect.Method.getDeclaringClass(): java.lang.Class",
      "java.lang.String.substring(int): java.lang.String",
      "java.lang.Character.toUpperCase(char): char",
      "com.google.gson.internal.reflect.ReflectionHelper.constructorToString(java.lang.reflect.Constructor): java.lang.String",
      "java.lang.String.charAt(int): char",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.lang.Character.isLowerCase(char): boolean",
      "java.lang.Class.getName(): java.lang.String",
      "com.google.gson.internal.reflect.ReflectionHelper.appendExecutableParameters(java.lang.reflect.AccessibleObject, java.lang.StringBuilder): void"
    ],
    "com.google.gson.functional.Java17RecordTest.lambda$testFieldNamingStrategy$1(java.lang.reflect.Field): java.lang.String": [
      "java.lang.reflect.Field.getName(): java.lang.String"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.endArray(): com.google.gson.stream.JsonWriter": [
      "java.util.List.isEmpty(): boolean",
      "java.util.List.remove(int): java.lang.Object",
      "java.util.List.size(): int",
      "java.lang.IllegalStateException.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.peek(): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getDescriptorForType(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.stream.JsonWriter.beforeName(): void": [
      "com.google.gson.stream.JsonWriter.replaceTop(int): void",
      "com.google.gson.stream.JsonWriter.newline(): void",
      "java.io.Writer.write(java.lang.String): void",
      "com.google.gson.stream.JsonWriter.peek(): int",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.ReflectionAccessTest$2.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addSimplesBuilder(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.RepeatedFieldBuilderV3.addBuilder(com.google.protobuf.AbstractMessage): com.google.protobuf.AbstractMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3"
    ],
    "com.google.gson.stream.JsonWriterTest.testSetStrictness(): void": [
      "com.google.gson.stream.JsonWriter.getStrictness(): com.google.gson.Strictness",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.internal.$Gson$Types$WildcardTypeImpl.getLowerBounds(): java.lang.reflect.Type[]": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage1OrBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.protobuf.SingleFieldBuilderV3.getMessageOrBuilder(): com.google.protobuf.MessageOrBuilder"
    ],
    "com.google.gson.internal.Streams$AppendableWriter.write(java.lang.String, int, int): void": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "java.lang.Appendable.append(java.lang.CharSequence, int, int): java.lang.Appendable"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.newDeserializer(java.lang.String): com.google.gson.JsonDeserializer": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$2.\u003cinit\u003e(com.google.gson.functional.TypeAdapterPrecedenceTest, java.lang.String): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest.testCustomJsonElementSubclass(): void": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReaderTest$1CustomSubclass.\u003cinit\u003e(com.google.gson.internal.bind.JsonTreeReaderTest): void",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureNumbersIsMutable(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$900(com.google.protobuf.Internal$LongList): com.google.protobuf.Internal$LongList"
    ],
    "com.google.gson.internal.bind.util.ISO8601Utils.\u003cclinit\u003e(): void": [
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone"
    ],
    "com.google.gson.functional.CollectionTest.testLinkedListDeserialization(): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.CollectionTest$5.getType(): java.lang.reflect.Type",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.CollectionTest$5.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers(): void": [
      "com.google.gson.functional.NullObjectAndFieldTest$ClassWithMembers.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$UserJsonAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$UserJsonAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$User"
    ],
    "com.google.gson.LongSerializationPolicy.$values(): com.google.gson.LongSerializationPolicy[]": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory$1.delegate(): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.internal.bind.TypeAdapters$1.read(com.google.gson.stream.JsonReader): java.lang.Class": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.TroubleshootingGuide.createUrl(java.lang.String): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo.valueOf(java.lang.String): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.functional.CircularReferenceTest$ContainsReferenceToSelfType.\u003cinit\u003e(): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$JsonElementAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId(): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.TreeTypeAdaptersTest$Id.getValue(): java.lang.String",
      "com.google.gson.functional.TreeTypeAdaptersTest$Course.getStudents(): java.util.List",
      "com.google.gson.functional.TreeTypeAdaptersTest$Course.getId(): com.google.gson.functional.TreeTypeAdaptersTest$Id",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.GsonBuilder.disableHtmlEscaping(): com.google.gson.GsonBuilder": [],
    "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.isJsonArray(): boolean",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$2.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$2.read(com.google.gson.stream.JsonReader): com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base"
    ],
    "com.google.gson.ObjectTypeAdapterParameterizedTest.data(): java.lang.Iterable": [
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List"
    ],
    "com.google.gson.internal.ConstructorConstructor.checkInstantiable(java.lang.Class): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.Class.getModifiers(): int",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.reflect.Modifier.isInterface(int): boolean",
      "com.google.gson.internal.TroubleshootingGuide.createUrl(java.lang.String): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getName(): java.lang.String",
      "java.lang.reflect.Modifier.isAbstract(int): boolean"
    ],
    "com.google.gson.GsonBuilderTest$CustomClass3.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1Blocked.equals(java.lang.Object): boolean": [],
    "com.google.gson.ReflectionAccessFilter$1.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [
      "com.google.gson.internal.ReflectionAccessFilterHelper.isJavaType(java.lang.Class): boolean"
    ],
    "com.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type): java.lang.reflect.GenericArrayType": [
      "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.\u003cinit\u003e(java.lang.reflect.Type): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization(): void": [
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "java.lang.String.indexOf(int): int",
      "java.lang.String.substring(int, int): java.lang.String",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.DefaultTypeAdaptersTest$ClassWithBigDecimal.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.common.TestTypes$ClassWithNoFields.equals(java.lang.Object): boolean": [],
    "com.google.gson.internal.bind.TypeAdapters$22.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testDelegatingAdapterFactory(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$5.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CustomDeserializerTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$Base": [],
    "com.google.gson.ToNumberPolicyTest.lambda$testLongOrDouble$2(com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.hasInnerMessage2(): boolean": [],
    "com.google.gson.internal.bind.JsonTreeReader.nextBoolean(): boolean": [
      "com.google.gson.internal.bind.JsonTreeReader.popStack(): java.lang.Object",
      "com.google.gson.internal.bind.JsonTreeReader.expect(com.google.gson.stream.JsonToken): void",
      "com.google.gson.JsonPrimitive.getAsBoolean(): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.PrettyPrintingTest.print(java.lang.String): void": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.JsonObjectAsMapTest.testClear(): void": [
      "com.google.gson.JsonObject.size(): int",
      "java.util.Map.clear(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.MapSubject.hasSize(int): void"
    ],
    "com.google.gson.functional.CollectionTest$10.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldNamingPolicy$4.translateName(java.lang.reflect.Field): java.lang.String": [
      "com.google.gson.FieldNamingPolicy$4.separateCamelCase(java.lang.String, char): java.lang.String",
      "java.lang.String.toUpperCase(java.util.Locale): java.lang.String",
      "java.lang.reflect.Field.getName(): java.lang.String"
    ],
    "com.google.gson.stream.JsonReaderTest.testIntegerMismatchFailuresDoNotAdvance(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$3.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.TypeAdapterPrecedenceTest$Foo): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.GsonTest$CustomClass2.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.example.ClassWithNoArgsConstructor.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilderForType(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addAllNumbers(java.lang.Iterable): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.AbstractMessageLite$Builder.addAll(java.lang.Iterable, java.util.List): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureNumbersIsMutable(): void"
    ],
    "com.example.Main.testEnum(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.FieldNamingPolicy.$values(): com.google.gson.FieldNamingPolicy[]": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateParseInvalidTime(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.internal.bind.util.ISO8601UtilsTest$1.\u003cinit\u003e(com.google.gson.internal.bind.util.ISO8601UtilsTest): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation.\u003cinit\u003e(int, int, int, int): void": [
      "com.example.ClassWithJsonAdapterAnnotation$DummyClass.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.lang.Integer.toString(int): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.access$100(com.google.gson.typeadapters.RuntimeTypeAdapterFactory): java.lang.String": [],
    "com.google.gson.internal.bind.TypeAdapters$9.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree(): void": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.TypeAdapter.fromJsonTree(com.google.gson.JsonElement): java.lang.Object",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Person.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.locationString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.getPath(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.toBuilder(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.toBuilder(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.metrics.SerializationBenchmark.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.metrics.BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1LocalRecordSerialization.hashCode(): int": [],
    "com.google.gson.functional.Java17RecordTest.\u003cinit\u003e(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$4.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$BagOfPrimitives": [
      "com.google.gson.JsonElement.getAsInt(): int",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void"
    ],
    "com.google.gson.functional.ReadersWritersTest$1CustomAppendable.append(java.lang.CharSequence, int, int): java.lang.Appendable": [
      "java.lang.StringBuilder.append(java.lang.CharSequence, int, int): java.lang.StringBuilder",
      "java.lang.CharSequence.toString(): java.lang.String"
    ],
    "com.google.gson.internal.LinkedTreeMap$EntrySet.contains(java.lang.Object): boolean": [
      "com.google.gson.internal.LinkedTreeMap.findByEntry(java.util.Map$Entry): com.google.gson.internal.LinkedTreeMap$Node"
    ],
    "com.google.gson.protobuf.functional.ProtosWithAnnotationsTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$6.\u003cinit\u003e(com.google.gson.GsonTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$2.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.example.Main.lambda$testTypeTokenWriteRead$2(com.google.gson.Gson, java.util.function.Supplier): java.lang.String": [
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.example.ClassWithAdapter.\u003cinit\u003e(int): void",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "java.util.function.Supplier.get(): java.lang.Object",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.Java17RecordTest$11LocalRecord.b(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getUnknownFields(): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.metrics.ParseBenchmark$Document.\u003cclinit\u003e(): void": [
      "com.google.gson.metrics.ParseBenchmark$Document$3.\u003cinit\u003e(): void",
      "com.google.gson.metrics.ParseBenchmark$Document$6.\u003cinit\u003e(): void",
      "com.google.gson.metrics.ParseBenchmark$Document$5.\u003cinit\u003e(): void",
      "com.google.gson.metrics.ParseBenchmark$Document$4.\u003cinit\u003e(): void",
      "com.google.gson.metrics.ParseBenchmark$Document$2.\u003cinit\u003e(): void",
      "com.google.gson.metrics.ParseBenchmark$Document$1.\u003cinit\u003e(): void",
      "com.google.gson.metrics.ParseBenchmark$Document.$values(): com.google.gson.metrics.ParseBenchmark$Document[]",
      "com.google.gson.metrics.ParseBenchmark$Document.\u003cinit\u003e(java.lang.String, int, com.google.gson.reflect.TypeToken, com.fasterxml.jackson.core.type.TypeReference): void"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.aFloat(): float": [],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest.testAsLazilyParsedNumbers(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.setObjectToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.GsonBuilder.setNumberToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilderForType(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilderForType(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, java.lang.Object): java.lang.reflect.Type",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.isReflective(com.google.gson.TypeAdapter): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataList(): java.util.List": [
      "com.google.protobuf.RepeatedFieldBuilderV3.getMessageList(): java.util.List",
      "java.util.Collections.unmodifiableList(java.util.List): java.util.List"
    ],
    "com.google.gson.internal.bind.TypeAdapters$22.write(com.google.gson.stream.JsonWriter, java.net.URI): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.net.URI.toASCIIString(): java.lang.String"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithSerializedName.i(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataOrBuilderList(): java.util.List": [
      "com.google.protobuf.RepeatedFieldBuilderV3.getMessageOrBuilderList(): java.util.List",
      "java.util.Collections.unmodifiableList(java.util.List): java.util.List"
    ],
    "com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy(): void": [
      "com.google.gson.functional.NamingPolicyTest$UpperCaseNamingStrategy.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.setFieldNamingStrategy(com.google.gson.FieldNamingStrategy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.NamingPolicyTest$ClassWithDuplicateFields.\u003cinit\u003e(java.lang.Integer): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClassJsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClass): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.stream.JsonToken.values(): com.google.gson.stream.JsonToken[]": [
      "[Lcom.google.gson.stream.JsonToken;.clone(): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearWidth(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.onChanged(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$10LocalRecord.s(): java.lang.String": [],
    "com.google.gson.internal.bind.TypeAdapters$30.\u003cinit\u003e(com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapter): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$2LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.Gson.excluder(): com.google.gson.internal.Excluder": [],
    "com.google.gson.internal.bind.TypeAdapters$23.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1Adapter.hashCode(): int": [],
    "com.google.gson.graph.GraphAdapterBuilder$Element.write(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.functional.CollectionTest$5.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest.lambda$testNewJsonWriter_Default$3(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.CustomDeserializerTest$2.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$32.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$7.createInstance(java.lang.reflect.Type): com.google.gson.GsonTest$CustomClass3": [
      "com.google.gson.GsonTest$CustomClass3.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.UnsafeAllocator.newInstance(java.lang.Class): java.lang.Object": [],
    "com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hashCode(): int": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getHeight(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasHeight(): boolean",
      "java.lang.String.hashCode(): int",
      "java.lang.Object.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasWidth(): boolean",
      "com.google.protobuf.UnknownFieldSet.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasData(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getData(): java.lang.String",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getWidth(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDescriptor(): com.google.protobuf.Descriptors$Descriptor"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$1.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part): void"
    ],
    "com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.UnsafeAllocator$4.\u003cinit\u003e(): void": [
      "com.google.gson.internal.UnsafeAllocator.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ToNumberPolicy$4.readNumber(com.google.gson.stream.JsonReader): java.lang.Number": [
      "com.google.gson.ToNumberPolicy$4.readNumber(com.google.gson.stream.JsonReader): java.math.BigDecimal"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.gson.functional.MapTest$25.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.MapTest$25.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.internal.LinkedTreeMap$EntrySet$1.next(): java.util.Map$Entry": [
      "com.google.gson.internal.LinkedTreeMap$EntrySet$1.nextNode(): com.google.gson.internal.LinkedTreeMap$Node"
    ],
    "com.google.gson.typeadapters.PostConstructAdapterFactoryTest.testList(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.typeadapters.PostConstructAdapterFactoryTest$Sandwich.\u003cinit\u003e(java.lang.String, java.lang.String): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.typeadapters.PostConstructAdapterFactoryTest$MultipleSandwiches.\u003cinit\u003e(java.util.List): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.typeadapters.PostConstructAdapterFactory.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.testTypeTokenNonAnonymousSubclass(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.ClassSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.reflect.TypeTokenTest$CustomTypeToken.\u003cinit\u003e(): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.Class): com.google.common.truth.ClassSubject"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$2.shouldSkipField(com.google.gson.FieldAttributes): boolean": [],
    "com.google.gson.stream.JsonReaderTest.testPrematurelyClosed(): void": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.close(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$17.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$34$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$16.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$16.write(com.google.gson.stream.JsonWriter, java.math.BigDecimal): void"
    ],
    "com.google.gson.functional.Java17RecordTest$11LocalRecord.hashCode(): int": [],
    "com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes(): void": [
      "java.util.concurrent.atomic.AtomicInteger.get(): int",
      "java.util.concurrent.atomic.AtomicInteger.\u003cinit\u003e(int): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.parseInt(java.lang.String): int",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.NumberLimitsTest.testBigDecimalAdapter(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.lang.String.repeat(int): java.lang.String",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.maybeForceBuilderInitialization(): void",
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void"
    ],
    "com.google.gson.JsonPrimitiveTest.testByteEqualsLong(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.VersioningTest.testVersionedUntilSerialization(): void": [
      "com.google.gson.functional.VersioningTest.gsonWithVersion(double): com.google.gson.Gson",
      "com.google.gson.functional.VersioningTest$Version1.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.createUtcCalendar(): java.util.GregorianCalendar": [
      "java.util.GregorianCalendar.\u003cinit\u003e(java.util.TimeZone): void",
      "com.google.gson.internal.bind.util.ISO8601UtilsTest.utcTimeZone(): java.util.TimeZone",
      "java.util.GregorianCalendar.clear(): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.\u003cinit\u003e(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization, com.google.common.base.CaseFormat, com.google.common.base.CaseFormat, java.util.Set, java.util.Set, com.google.gson.protobuf.ProtoTypeAdapter$1): void": [
      "com.google.gson.protobuf.ProtoTypeAdapter.\u003cinit\u003e(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization, com.google.common.base.CaseFormat, com.google.common.base.CaseFormat, java.util.Set, java.util.Set): void"
    ],
    "com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.MapTest$11.getType(): java.lang.reflect.Type",
      "com.google.common.truth.MapSubject.containsKey(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$11.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.MixedStreamTest.testWriteClosed(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.ObjectTest$3.\u003cinit\u003e(com.google.gson.functional.ObjectTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$10.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testIndentOverwritesFormattingStyle(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.setFormattingStyle(com.google.gson.FormattingStyle): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.setIndent(java.lang.String): void",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$EmployeeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$11.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.GsonTest$11.write(com.google.gson.stream.JsonWriter, com.google.gson.GsonTest$CustomClass1): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest.testJsonDeserializer_ReflectiveSerializerDelegate(): void": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Deserializer.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Container.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.example.ClassWithNamedFields.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void": [
      "java.util.ArrayList.add(java.lang.Object): boolean"
    ],
    "com.google.gson.internal.LinkedTreeMap$KeySet.size(): int": [],
    "com.google.gson.functional.PrimitiveTest.lambda$testShortDeserializationLossy$3(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseFrom(byte[]): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.Parser.parseFrom(byte[]): java.lang.Object"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriter.setSerializeNulls(boolean): void": [],
    "com.google.gson.functional.NumberLimitsTest.lambda$testLazilyParsedNumber$7(): void": [
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.LazilyParsedNumber.intValue(): int",
      "java.lang.String.repeat(int): java.lang.String"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$Circle.\u003cinit\u003e(int): void": [
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$Shape.\u003cinit\u003e(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType): void"
    ],
    "com.google.gson.ReflectionAccessFilter$2.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [
      "com.google.gson.internal.ReflectionAccessFilterHelper.isJavaType(java.lang.Class): boolean"
    ],
    "com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Float.isNaN(float): boolean",
      "java.lang.Float.floatValue(): float",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.createInstance(java.lang.reflect.Type): com.google.gson.functional.CustomTypeAdaptersTest$StringHolder"
    ],
    "com.google.gson.functional.Java17RecordTest.lambda$testReflectionFilterBlockInaccessible$6(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.internal.ConstructorConstructorTest.testGet_Interface(): void": [
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.internal.ObjectConstructor.construct(): java.lang.Object",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.internal.ConstructorConstructor.get(com.google.gson.reflect.TypeToken): com.google.gson.internal.ObjectConstructor",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByJdkUnsafe$Serializer.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.internal.Excluder$1.\u003cinit\u003e(com.google.gson.internal.Excluder, boolean, boolean, com.google.gson.Gson, com.google.gson.reflect.TypeToken): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$BaseStringAdapter.serialize(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.common.TestTypes$ClassOverridingEquals.equals(java.lang.Object): boolean": [],
    "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.Class): boolean": [
      "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonArrayAsBooleanWrapper$20(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter$Builder.\u003cinit\u003e(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization, com.google.common.base.CaseFormat, com.google.common.base.CaseFormat, com.google.gson.protobuf.ProtoTypeAdapter$1): void": [
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.\u003cinit\u003e(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization, com.google.common.base.CaseFormat, com.google.common.base.CaseFormat): void"
    ],
    "com.google.gson.functional.ObjectTest.testNestedDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.common.TestTypes$Nested.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.CollectionTest$SmallClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testAdd$5(java.util.List): void": [
      "java.util.List.set(int, java.lang.Object): java.lang.Object",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.\u003cclinit\u003e(): void": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$11.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.GenericClasses$DummyClass.toString(): java.lang.String": [],
    "com.google.gson.internal.ConstructorConstructor$20.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.access$1600(): boolean": [],
    "com.google.gson.functional.PrettyPrintingTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api$6.newParser(): com.google.gson.metrics.ParseBenchmark$Parser": [
      "com.google.gson.metrics.ParseBenchmark$GsonBindParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$24.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.CustomDeserializerTest$5.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$10.construct(): java.lang.Object": [
      "java.util.TreeSet.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$CustomClass3.\u003cinit\u003e(): void": [
      "com.google.gson.GsonTest$CustomClass3.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.GsonTest.testGetAdapter_Null(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testSetLenientFalse(): void": [
      "com.google.gson.stream.JsonWriter.getStrictness(): com.google.gson.Strictness",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonWriter.setLenient(boolean): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.functional.FieldNamingTest.testUpperCaseWithUnderscores(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.FieldNamingTest.getGsonWithNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.FieldNamingTest$TestNames.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization(): void": [
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "com.google.common.truth.ObjectArraySubject.asList(): com.google.common.truth.IterableSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseFrom(byte[]): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.Parser.parseFrom(byte[]): java.lang.Object"
    ],
    "com.google.gson.typeadapters.PostConstructAdapterFactoryTest$Sandwich.validate(): void": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.String.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataBuilder(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.protobuf.RepeatedFieldBuilderV3.getBuilder(int): com.google.protobuf.AbstractMessage$Builder"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testJsonPrimitive$2(): void": [
      "com.google.gson.JsonPrimitive.getAsBigDecimal(): java.math.BigDecimal",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$ClassWithObjectsSerializer.serialize(com.google.gson.common.TestTypes$ClassWithObjects, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.internal.UnsafeAllocator.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.UnsafeAllocator.create(): com.google.gson.internal.UnsafeAllocator"
    ],
    "com.google.gson.functional.ObjectTest.testNullFieldsSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$Nested.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives, com.google.gson.common.TestTypes$BagOfPrimitives): void",
      "com.google.gson.common.TestTypes$Nested.getExpectedJson(): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CollectionTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testEscapeCharacterQuoteInStrictMode(): void": [
      "com.google.common.truth.StringSubject.startsWith(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void"
    ],
    "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getAnnotation(java.lang.Class): com.google.gson.annotations.JsonAdapter": [
      "java.lang.Class.getAnnotation(java.lang.Class): java.lang.annotation.Annotation"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonBindParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void": [
      "com.google.gson.metrics.ParseBenchmark$GsonBindParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$1.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$23.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$23.write(com.google.gson.stream.JsonWriter, java.net.InetAddress): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testLazilyParsedNumberDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.\u003cinit\u003e(com.google.gson.Gson, com.google.gson.TypeAdapter, java.lang.reflect.Type): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonSerializer.\u003cinit\u003e(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.getRawType(): java.lang.reflect.Type": [],
    "com.google.gson.protobuf.functional.ProtosWithPrimitiveTypesTest.testDeserializeWithExplicitNullValue(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getCount(): int",
      "org.junit.Assert.assertEquals(long, long): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getMsg(): java.lang.String"
    ],
    "com.google.gson.interceptors.InterceptorTest$4.read(com.google.gson.stream.JsonReader): com.google.gson.interceptors.InterceptorTest$User": [
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.interceptors.InterceptorTest$User.\u003cinit\u003e(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.native_test.ReflectionTest$2.\u003cinit\u003e(com.google.gson.native_test.ReflectionTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.access$1400(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testSerializeMissingSubtype(): void": [
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "org.junit.Assert.fail(): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$CreditCard.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.internal.sql.SqlTimeTypeAdapter.\u003cinit\u003e(com.google.gson.internal.sql.SqlTimeTypeAdapter$1): void": [
      "com.google.gson.internal.sql.SqlTimeTypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1Allowed.a(): int": [],
    "com.google.gson.typeadapters.PostConstructAdapterFactory$PostConstructAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "java.lang.reflect.InvocationTargetException.getCause(): java.lang.Throwable",
      "java.lang.AssertionError.\u003cinit\u003e(): void",
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(java.lang.Object): com.google.gson.JsonElement": [
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.CustomDeserializerTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomDeserializerTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$Base"
    ],
    "com.google.gson.functional.SerializedNameTest.testFirstNameIsChosenForSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.SerializedNameTest$MyClass.\u003cinit\u003e(java.lang.String, java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.hasCountryCode5F55(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newInstance(com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.\u003cinit\u003e(): void"
    ],
    "com.google.gson.CommentsTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.\u003cinit\u003e(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): void": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.internal.$Gson$Types.requiresOwnerType(java.lang.reflect.Type): boolean",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type): java.lang.reflect.Type",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "[Ljava.lang.reflect.Type;.clone(): java.lang.Object",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.internal.$Gson$Types.checkNotPrimitive(java.lang.reflect.Type): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.internal.LinkedTreeMap$Node.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.stream.JsonReaderTest.testFailWithPositionOverSlashSlashEndOfLineComment(): void": [
      "com.google.gson.stream.JsonReaderTest.testFailWithPosition(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.GsonTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing.lambda$test$1(): void": [
      "com.google.gson.reflect.TypeTokenTest$1Enclosing$2.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void"
    ],
    "com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization(): void": [
      "com.google.gson.functional.EnumTest$MyEnum.toString(): java.lang.String",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.stream.JsonReader.nextDouble(): double": [
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextQuotedValue(char): java.lang.String",
      "com.google.gson.stream.JsonReader.nextUnquotedValue(): java.lang.String",
      "java.lang.StringBuilder.append(double): java.lang.StringBuilder",
      "java.lang.Double.parseDouble(java.lang.String): double",
      "java.lang.Double.isNaN(double): boolean",
      "com.google.gson.stream.JsonReader.syntaxError(java.lang.String): java.io.IOException",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.doPeek(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.String.\u003cinit\u003e(char[], int, int): void",
      "java.lang.Double.isInfinite(double): boolean"
    ],
    "com.google.gson.stream.JsonReader.nextQuotedValue(char): java.lang.String": [
      "java.lang.Math.max(int, int): int",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.append(char[], int, int): java.lang.StringBuilder",
      "java.lang.StringBuilder.\u003cinit\u003e(int): void",
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.lang.String.\u003cinit\u003e(char[], int, int): void",
      "com.google.gson.stream.JsonReader.readEscapeCharacter(): char",
      "com.google.gson.stream.JsonReader.syntaxError(java.lang.String): java.io.IOException"
    ],
    "com.google.gson.internal.bind.TypeAdapters$28.tryBeginNesting(com.google.gson.stream.JsonReader, com.google.gson.stream.JsonToken): com.google.gson.JsonElement": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonToken.ordinal(): int",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo2PartTypeAdapterFactory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.TypeAdapter.toJsonTree(java.lang.Object): com.google.gson.JsonElement": [
      "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ToNumberPolicyTest.lambda$testBigDecimal$7(com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.String): void": [
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.JsonArray.getAsByte(): byte": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsByte(): byte"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.google.gson.ObjectTypeAdapterTest.repeat(java.lang.String, int): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.String.length(): int",
      "java.lang.StringBuilder.\u003cinit\u003e(int): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$MultiParameters.hashCode(): int": [
      "java.lang.Object.hashCode(): int"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$6.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CircularReferenceTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.toBuilder(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$3.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$3.serialize(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.JsonArrayAsListTest.testAddAll(): void": [
      "com.google.gson.JsonArray.asList(): java.util.List",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "java.util.List.addAll(java.util.Collection): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getDescriptorForType(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$4.serialize(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testSetLenientTrue(): void": [
      "com.google.gson.stream.JsonWriter.getStrictness(): com.google.gson.Strictness",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonWriter.setLenient(boolean): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType$1.\u003cinit\u003e(java.lang.Class): void"
    ],
    "com.google.gson.GsonTest$2DummyAdapter.read(com.google.gson.stream.JsonReader): java.lang.Number": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.it.ShrinkingIT.\u003cclinit\u003e(): void": [
      "java.nio.file.Paths.get(java.lang.String, java.lang.String[]): java.nio.file.Path"
    ],
    "com.google.gson.ToNumberPolicyTest.testBigDecimal(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$1.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$1.serialize(com.google.gson.functional.TypeAdapterPrecedenceTest$Foo, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.GsonTypesTest.testGetFirstTypeArgument(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.internal.GsonTypesTest.getFirstTypeArgument(java.lang.reflect.Type): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): java.lang.reflect.ParameterizedType",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.ConstructorConstructor.get(com.google.gson.reflect.TypeToken): com.google.gson.internal.ObjectConstructor": [
      "com.google.gson.internal.ConstructorConstructor$1.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, com.google.gson.InstanceCreator, java.lang.reflect.Type): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.ConstructorConstructor.newUnsafeAllocator(java.lang.Class): com.google.gson.internal.ObjectConstructor",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.internal.ConstructorConstructor.newDefaultImplementationConstructor(java.lang.reflect.Type, java.lang.Class): com.google.gson.internal.ObjectConstructor",
      "com.google.gson.internal.ConstructorConstructor.newSpecialCollectionConstructor(java.lang.reflect.Type, java.lang.Class): com.google.gson.internal.ObjectConstructor",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.ReflectionAccessFilterHelper.getFilterResult(java.util.List, java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult",
      "com.google.gson.internal.ConstructorConstructor$2.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, com.google.gson.InstanceCreator, java.lang.reflect.Type): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.internal.ConstructorConstructor$4.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, java.lang.String): void",
      "com.google.gson.internal.ConstructorConstructor.checkInstantiable(java.lang.Class): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.internal.ConstructorConstructor$3.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, java.lang.String): void",
      "com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(java.lang.Class, com.google.gson.ReflectionAccessFilter$FilterResult): com.google.gson.internal.ObjectConstructor"
    ],
    "com.google.gson.JsonParserTest.repeat(java.lang.String, int): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.String.length(): int",
      "java.lang.StringBuilder.\u003cinit\u003e(int): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(com.google.gson.stream.JsonWriter, java.util.Collection): void"
    ],
    "com.google.gson.internal.UnsafeAllocatorInstantiationTest$ConcreteClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FormattingStyle.withSpaceAfterSeparators(boolean): com.google.gson.FormattingStyle": [
      "com.google.gson.FormattingStyle.\u003cinit\u003e(java.lang.String, java.lang.String, boolean): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Serializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.example.ClassWithJsonAdapterAnnotation$Serializer.serialize(com.example.ClassWithJsonAdapterAnnotation$DummyClass, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.internal.sql.SqlDateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.sql.SqlDateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.sql.Date): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.hashCode(): int": [
      "java.lang.String.hashCode(): int",
      "java.lang.Object.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getNameThatTestsCaseFormatCount(): int",
      "com.google.protobuf.UnknownFieldSet.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.hasAnotherField(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getNameThatTestsCaseFormatList(): com.google.protobuf.ProtocolStringList",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getDescriptor(): com.google.protobuf.Descriptors$Descriptor",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getAnotherField(): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$26.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$26.read(com.google.gson.stream.JsonReader): java.util.Calendar"
    ],
    "com.google.gson.internal.sql.SqlTypesGsonTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.LongSerializationPolicy.values(): com.google.gson.LongSerializationPolicy[]": [
      "[Lcom.google.gson.LongSerializationPolicy;.clone(): java.lang.Object"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.NoSerializedNameMain.runTestNoJdkUnsafe(): java.lang.String": [
      "com.google.gson.GsonBuilder.disableJdkUnsafe(): com.google.gson.GsonBuilder",
      "com.example.TestExecutor.same(java.lang.Object): java.lang.Object",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void": [
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.maybeForceBuilderInitialization(): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization(): void": [
      "com.google.gson.functional.NullObjectAndFieldTest$1.\u003cinit\u003e(com.google.gson.functional.NullObjectAndFieldTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.NullObjectAndFieldTest$ObjectWithField.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.hasData(): boolean": [],
    "com.google.gson.functional.CustomTypeAdaptersTest$DataHolderDeserializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InstanceCreatorTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.\u003cinit\u003e(java.lang.Class, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData, boolean): void": [
      "com.google.gson.internal.reflect.ReflectionHelper.getRecordComponentNames(java.lang.Class): java.lang.String[]",
      "com.google.gson.internal.reflect.ReflectionHelper.makeAccessible(java.lang.reflect.AccessibleObject): void",
      "com.google.gson.internal.reflect.ReflectionHelper.getCanonicalRecordConstructor(java.lang.Class): java.lang.reflect.Constructor",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.\u003cinit\u003e(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData): void",
      "java.lang.reflect.Constructor.getParameterTypes(): java.lang.Class[]",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$000(java.lang.Object, java.lang.reflect.AccessibleObject): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonObject.isEmpty(): boolean": [
      "com.google.gson.internal.LinkedTreeMap.size(): int"
    ],
    "com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark.timeBagOfPrimitivesStreaming(int): void": [
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.gson.metrics.BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.io.IOException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1LocalRecordSerialization.toString(): java.lang.String": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onBuilt(): void",
      "com.google.protobuf.SingleFieldBuilderV3.build(): com.google.protobuf.AbstractMessage"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$MyClassTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.DefaultTypeAdaptersTest$MyClassTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Class"
    ],
    "com.google.gson.JsonArray.getAsNumber(): java.lang.Number": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsNumber(): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.protobuf.CodedInputStream.readTag(): int",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseUnknownField(com.google.protobuf.CodedInputStream, com.google.protobuf.UnknownFieldSet$Builder, com.google.protobuf.ExtensionRegistryLite, int): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.protobuf.CodedInputStream.readBytes(): com.google.protobuf.ByteString",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.makeExtensionsImmutable(): void",
      "com.google.protobuf.UnknownFieldSet.newBuilder(): com.google.protobuf.UnknownFieldSet$Builder",
      "com.google.protobuf.CodedInputStream.readMessage(com.google.protobuf.Parser, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.MessageLite",
      "com.google.protobuf.InvalidProtocolBufferException.setUnfinishedMessage(com.google.protobuf.MessageLite): com.google.protobuf.InvalidProtocolBufferException",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.protobuf.InvalidProtocolBufferException.\u003cinit\u003e(java.io.IOException): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.protobuf.UnknownFieldSet$Builder.build(): com.google.protobuf.UnknownFieldSet",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.GsonBuilderTest$4.serialize(com.google.gson.GsonBuilderTest$CustomClass2, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization(): void": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.stream.JsonReaderPathTest.skipNestedStructures(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder.addType(java.lang.reflect.Type, com.google.gson.InstanceCreator): com.google.gson.graph.GraphAdapterBuilder": [
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.GsonTest.testClonedTypeAdapterFactoryListsAreIndependent(): void": [
      "com.google.gson.Gson.newBuilder(): com.google.gson.GsonBuilder",
      "java.util.Collections.emptyList(): java.util.List",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.GsonTest$TestTypeAdapter.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "java.util.List.size(): int",
      "com.google.gson.Gson.\u003cinit\u003e(com.google.gson.internal.Excluder, com.google.gson.FieldNamingStrategy, java.util.Map, boolean, boolean, boolean, boolean, com.google.gson.FormattingStyle, com.google.gson.Strictness, boolean, boolean, com.google.gson.LongSerializationPolicy, java.lang.String, int, int, java.util.List, java.util.List, java.util.List, com.google.gson.ToNumberStrategy, com.google.gson.ToNumberStrategy, java.util.List): void",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlTypesGsonTest.testDefaultSqlDateSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.sql.Date.\u003cinit\u003e(long): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Person.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserFieldAnnotationAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.build(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.build(): com.google.gson.protobuf.generated.Bag$SimpleProto"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testGet$0(java.util.List): void": [
      "java.util.List.get(int): java.lang.Object"
    ],
    "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest.setUp(): void": [
      "java.lang.Class.forName(java.lang.String): java.lang.Class"
    ],
    "com.google.gson.stream.JsonReaderTest.testMalformedDocuments(): void": [
      "com.google.gson.stream.JsonReaderTest.assertDocument(java.lang.String, java.lang.Object[]): void"
    ],
    "com.example.Main.lambda$testGenericClasses$26(com.google.gson.Gson): java.lang.String": [
      "com.example.GenericClasses$GenericClass.toString(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.example.Main$2.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testValueString(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.example.Main.lambda$testNamedFields$5(com.google.gson.Gson): java.lang.String": [
      "java.lang.Integer.toString(int): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.JsonParser.parse(java.lang.String): com.google.gson.JsonElement": [
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement"
    ],
    "com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration(): void": [
      "com.google.gson.GsonBuilder.setLongSerializationPolicy(com.google.gson.LongSerializationPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.ConcurrencyTest$MyObject.\u003cinit\u003e(java.lang.String, java.lang.String, int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializer.serialize(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities(): void": [
      "com.google.gson.internal.bind.JsonTreeWriter.value(double): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.value(float): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.setStrictness(com.google.gson.Strictness): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$DelegatingAndOverwriting.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$1.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.MixedStreamTest.testWriteHtmlSafe(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.GsonBuilder.disableHtmlEscaping(): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.MixedStreamTest$2.\u003cinit\u003e(com.google.gson.MixedStreamTest): void",
      "com.google.gson.MixedStreamTest$2.getType(): java.lang.reflect.Type",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomFieldAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.native_test.ReflectionTest$ClassWithCustomFieldAdapter.\u003cinit\u003e(int): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Adapter.write(com.google.gson.stream.JsonWriter, com.example.ClassWithJsonAdapterAnnotation$DummyClass): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.JsonPrimitiveTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest.testCustomAccessor(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomAccessor.\u003cinit\u003e(int): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$11.check(java.lang.Class): com.google.gson.ReflectionAccessFilter$FilterResult": [],
    "com.google.gson.JsonArray.getAsFloat(): float": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsFloat(): float"
    ],
    "com.google.gson.protobuf.functional.ProtosWithComplexAndRepeatedFieldsTest.testDeserializeDifferentCaseFormat(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getNameThatTestsCaseFormat(int): java.lang.String",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getAnotherField(): java.lang.String"
    ],
    "com.google.gson.internal.bind.JsonTreeReader$2.\u003cclinit\u003e(): void": [
      "com.google.gson.stream.JsonToken.values(): com.google.gson.stream.JsonToken[]",
      "com.google.gson.stream.JsonToken.ordinal(): int"
    ],
    "com.google.gson.JsonArray.set(int, com.google.gson.JsonElement): com.google.gson.JsonElement": [
      "java.util.ArrayList.set(int, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.\u003cinit\u003e(): void",
      "com.google.protobuf.CodedInputStream.readTag(): int",
      "com.google.protobuf.LazyStringArrayList.\u003cinit\u003e(): void",
      "com.google.protobuf.LazyStringList.getUnmodifiableView(): com.google.protobuf.LazyStringList",
      "com.google.protobuf.CodedInputStream.readBytes(): com.google.protobuf.ByteString",
      "com.google.protobuf.UnknownFieldSet.newBuilder(): com.google.protobuf.UnknownFieldSet$Builder",
      "com.google.protobuf.InvalidProtocolBufferException.setUnfinishedMessage(com.google.protobuf.MessageLite): com.google.protobuf.InvalidProtocolBufferException",
      "com.google.protobuf.LazyStringList.add(com.google.protobuf.ByteString): void",
      "com.google.protobuf.InvalidProtocolBufferException.\u003cinit\u003e(java.io.IOException): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseUnknownField(com.google.protobuf.CodedInputStream, com.google.protobuf.UnknownFieldSet$Builder, com.google.protobuf.ExtensionRegistryLite, int): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.makeExtensionsImmutable(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.protobuf.UnknownFieldSet$Builder.build(): com.google.protobuf.UnknownFieldSet"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper.canAccess(java.lang.reflect.AccessibleObject, java.lang.Object): boolean": [
      "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker.canAccess(java.lang.reflect.AccessibleObject, java.lang.Object): boolean"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$1.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.NullObjectAndFieldTest$1.serialize(com.google.gson.functional.NullObjectAndFieldTest$ObjectWithField, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.$Gson$Preconditions.checkNotNull(java.lang.Object): java.lang.Object": [
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testJsonReader$0(com.google.gson.stream.JsonReader): void": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.getAccessor(java.lang.Class, java.lang.reflect.Field): java.lang.reflect.Method": [],
    "com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.MapTest$ClassWithAMap.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$DataOrBuilder.getData(): java.lang.String": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesOrBuilder(int): com.google.gson.protobuf.generated.Bag$SimpleProtoOrBuilder": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.protobuf.RepeatedFieldBuilderV3.getMessageOrBuilder(int): com.google.protobuf.MessageOrBuilder"
    ],
    "com.google.gson.internal.ConstructorConstructor$15.construct(): java.lang.Object": [
      "java.util.concurrent.ConcurrentHashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField.\u003cinit\u003e(java.lang.String, java.lang.reflect.Field): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.lang.reflect.Field.getName(): java.lang.String"
    ],
    "com.google.gson.internal.$Gson$Types.requiresOwnerType(java.lang.reflect.Type): boolean": [
      "java.lang.Class.getModifiers(): int",
      "java.lang.reflect.Modifier.isStatic(int): boolean",
      "java.lang.Class.getDeclaringClass(): java.lang.Class"
    ],
    "com.google.gson.functional.MapTest$26.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testUnquotedStringDeserializationFails$6(java.lang.String): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.stream.JsonReaderTest.testStringAsNumberWithTruncatedExponent(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.internal.Streams$AppendableWriter.write(char[], int, int): void": [
      "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite.setChars(char[]): void",
      "java.lang.Appendable.append(java.lang.CharSequence, int, int): java.lang.Appendable"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testEntrySetValueNull(): void": [
      "com.google.gson.internal.LinkedTreeMap.containsValue(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.LinkedTreeMap.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.LinkedTreeMap.entrySet(): java.util.Set",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Map$Entry.setValue(java.lang.Object): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.internal.LinkedTreeMap.containsKey(java.lang.Object): boolean",
      "com.google.common.truth.StringSubject.isNull(): void",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.hashCode(): int": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getNumbersList(): java.util.List",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getName(): java.lang.String",
      "java.lang.String.hashCode(): int",
      "java.lang.Object.hashCode(): int",
      "com.google.protobuf.UnknownFieldSet.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getSimplesList(): java.util.List",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getSimplesCount(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.hasName(): boolean",
      "java.util.List.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getNumbersCount(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getDescriptor(): com.google.protobuf.Descriptors$Descriptor"
    ],
    "com.google.gson.internal.bind.NumberTypeAdapter.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.bind.NumberTypeAdapter.newFactory(com.google.gson.ToNumberStrategy): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.buildPartial(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Factory.access$000(com.google.gson.graph.GraphAdapterBuilder$Factory): java.lang.ThreadLocal": [],
    "com.google.gson.graph.GraphAdapterBuilder$Graph.access$702(com.google.gson.graph.GraphAdapterBuilder$Graph, com.google.gson.graph.GraphAdapterBuilder$Element): com.google.gson.graph.GraphAdapterBuilder$Element": [],
    "com.google.gson.JsonObjectAsMapTest.testContainsValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.Map.containsValue(java.lang.Object): boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory, com.google.gson.Gson, com.google.gson.reflect.TypeToken): void"
    ],
    "com.google.gson.functional.EnumTest$CustomToString.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.EnumTest$CustomToString.$values(): com.google.gson.functional.EnumTest$CustomToString[]",
      "com.google.gson.functional.EnumTest$CustomToString.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest$SampleObjectForTest.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.addDeserializationExclusionStrategy(com.google.gson.ExclusionStrategy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.it.ShrinkingIT.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder",
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder"
    ],
    "com.google.gson.internal.Excluder$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.Excluder$1.delegate(): com.google.gson.TypeAdapter",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.functional.EnumTest.testTopLevelEnumSerialization(): void": [
      "com.google.gson.functional.EnumTest$MyEnum.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$3.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$NullableClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.sortedSetContains(char[]): boolean": [
      "java.util.SortedSet.contains(java.lang.Object): boolean",
      "java.lang.Character.valueOf(char): java.lang.Character"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapterTest.\u003cinit\u003e(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.typeadapters.UtcDateTypeAdapter.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$ManagerAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.FieldExclusionTest$NestedClass.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonObjectAsMapTest.testRemove(): void": [
      "com.google.gson.JsonObject.size(): int",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.util.Map.remove(java.lang.Object): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory$Factory$1.delegate(): com.google.gson.TypeAdapter",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getParserForType(): com.google.protobuf.Parser": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.getCount(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.onBuilt(): void",
      "com.google.protobuf.LazyStringList.getUnmodifiableView(): com.google.protobuf.LazyStringList",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$DummyClass.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testStringAsNumberWithDigitAndNonDigitExponent(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.set(int, java.lang.Object): java.lang.Object": [
      "java.util.ArrayList.set(int, java.lang.Object): java.lang.Object",
      "com.google.gson.internal.NonNullElementWrapperList.nonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$6.serialize(com.google.gson.functional.CustomTypeAdaptersTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.GsonTest.\u003cclinit\u003e(): void": [
      "com.google.gson.GsonTest$1.\u003cinit\u003e(): void",
      "com.google.gson.internal.Excluder.disableInnerClassSerialization(): com.google.gson.internal.Excluder",
      "com.google.gson.internal.Excluder.excludeFieldsWithoutExposeAnnotation(): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.functional.MapTest.testMapSerializationEmpty(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.MapTest$3.getType(): java.lang.reflect.Type",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$3.\u003cinit\u003e(com.google.gson.functional.MapTest): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserFieldAnnotationAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserFieldAnnotationAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User"
    ],
    "com.example.ClassWithSerializedName.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.peekNumber(): int": [
      "com.google.gson.stream.JsonReader.isLiteral(char): boolean",
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder.getCountryCode5F55(): java.lang.String": [],
    "com.google.gson.stream.JsonWriterTest.testFloats(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.value(float): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$14.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getSimpleName(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.locationString(): java.lang.String"
    ],
    "com.example.Main.lambda$testVersionAnnotations$23(com.google.gson.Gson): java.lang.String": [
      "com.example.ClassWithVersionAnnotations.\u003cinit\u003e(): void",
      "com.example.Main.toJson(com.google.gson.Gson, java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$MultiParameters.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.RawSerializationTest.testParameterizedObject(): void": [
      "com.google.gson.functional.RawSerializationTest$Foo.\u003cinit\u003e(int): void",
      "com.google.gson.functional.RawSerializationTest$Bar.\u003cinit\u003e(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.RawSerializationTest$1.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.RawSerializationTest$1.\u003cinit\u003e(com.google.gson.functional.RawSerializationTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearInnerMessage1(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.protobuf.SingleFieldBuilderV3.clear(): com.google.protobuf.SingleFieldBuilderV3"
    ],
    "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void": [
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void"
    ],
    "com.google.gson.JsonPrimitiveTest.testByteEqualsShort(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Short.valueOf(short): java.lang.Short",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.ConstructorConstructor$3.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest.lambda$testGetDelegateAdapter$2(com.google.gson.Gson, com.google.gson.GsonTest$1DummyFactory): void": [
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone(): void": [
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.assertParsed(java.lang.String, com.google.gson.TypeAdapterFactory): void",
      "java.util.Locale.getDefault(): java.util.Locale",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.assertFormatted(java.lang.String, com.google.gson.TypeAdapterFactory): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createDefaultsAdapterFactory(): com.google.gson.TypeAdapterFactory",
      "java.util.TimeZone.getDefault(): java.util.TimeZone",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Enum": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.JsonPrimitiveTest.testShortEqualsLong(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Short.valueOf(short): java.lang.Short",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.JavaVersion.extractBeginningInt(java.lang.String): int": [
      "java.lang.String.charAt(int): char",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Character.isDigit(char): boolean",
      "java.lang.String.length(): int",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.lang.Integer.parseInt(java.lang.String): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDataCount(): int": [
      "java.util.List.size(): int"
    ],
    "com.google.gson.stream.JsonWriterTest.testNonFiniteNumbersWhenStrict(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testLazilyParsedNumber$8(): void": [
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.LazilyParsedNumber.intValue(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.build(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.readField(java.lang.Object, com.google.gson.stream.JsonReader, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField): void",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.finalize(java.lang.Object): java.lang.Object",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "com.google.gson.internal.reflect.ReflectionHelper.createExceptionForUnexpectedIllegalAccess(java.lang.IllegalAccessException): java.lang.RuntimeException",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.createAccumulator(): java.lang.Object",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.fromJson(java.io.Reader, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.IntegerSubject.isNull(): void"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class, java.lang.String): com.google.gson.typeadapters.RuntimeTypeAdapterFactory": [
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.\u003cinit\u003e(java.lang.Class, java.lang.String, boolean): void"
    ],
    "com.google.gson.functional.ObjectTest.testStaticFieldSerialization(): void": [
      "com.google.gson.GsonBuilder.excludeFieldsWithModifiers(int[]): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.ObjectTest$ClassWithStaticField.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.ObjectTest$ClassWithStaticFinalField.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.getCachedMethod(java.lang.Class, java.lang.String, java.lang.Class[]): java.lang.reflect.Method": [
      "com.google.common.collect.MapMaker.\u003cinit\u003e(): void",
      "com.google.common.collect.MapMaker.makeMap(): java.util.concurrent.ConcurrentMap",
      "java.util.concurrent.ConcurrentMap.get(java.lang.Object): java.lang.Object",
      "java.lang.Class.getMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method",
      "java.util.concurrent.ConcurrentMap.putIfAbsent(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.GsonTest$1DummyFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomAccessor.hashCode(): int": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.build(): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.newUninitializedMessageException(com.google.protobuf.Message): com.google.protobuf.UninitializedMessageException",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.isInitialized(): boolean"
    ],
    "com.google.gson.internal.GsonBuildConfigTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$4.shouldSkipClass(java.lang.Class): boolean": [],
    "com.google.gson.protobuf.functional.ProtosWithAnnotationsTest.testProtoWithAnnotations_deserializeWithEnumNumbers(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getContent(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.EnumTest$MyEnumTypeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.EnumTest$MyEnumTypeAdapter.serialize(com.google.gson.functional.EnumTest$Roshambo, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomDefaultConstructor.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1EmptyRecord.\u003cinit\u003e(): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.ReflectionTest.testInstanceCreator(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.native_test.ReflectionTest$1.\u003cinit\u003e(com.google.gson.native_test.ReflectionTest): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter(): void": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$Foo.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newTypeAdapter(java.lang.String): com.google.gson.TypeAdapter",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newSerializer(java.lang.String): com.google.gson.JsonSerializer",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newDeserializer(java.lang.String): com.google.gson.JsonDeserializer",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Node.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testUnescapingTruncatedSequence(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.MixedStreamTest.testWriteLenient(): void": [
      "com.google.gson.MixedStreamTest$3.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.serializeSpecialFloatingPointValues(): com.google.gson.GsonBuilder",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.MixedStreamTest$3.\u003cinit\u003e(com.google.gson.MixedStreamTest): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Annotations.registerAllExtensions(com.google.protobuf.ExtensionRegistry): void": [
      "com.google.gson.protobuf.generated.Annotations.registerAllExtensions(com.google.protobuf.ExtensionRegistryLite): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$5.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.lang.Number.byteValue(): byte"
    ],
    "com.google.gson.metrics.ParseBenchmark$JacksonBindParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void": [
      "com.google.gson.metrics.ParseBenchmark$JacksonBindParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.forNumber(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type": [],
    "com.google.gson.functional.FieldExclusionTest$Outer$Inner.\u003cinit\u003e(com.google.gson.functional.FieldExclusionTest$Outer, java.lang.String): void": [
      "com.google.gson.functional.FieldExclusionTest$NestedClass.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldReflectionAdapter.\u003cinit\u003e(com.google.gson.internal.ObjectConstructor, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData): void": [
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.\u003cinit\u003e(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData): void"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testNullTypeFieldName(): void": [
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class, java.lang.String): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type): boolean",
      "java.lang.reflect.Field.getGenericType(): java.lang.reflect.Type",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Class.getDeclaredField(java.lang.String): java.lang.reflect.Field",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientSemicolonDelimitedArray(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder.hasMonth(): boolean": [],
    "com.google.gson.internal.bind.DateTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.DateTypeAdapter.read(com.google.gson.stream.JsonReader): java.util.Date"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testGet$1(java.util.List): void": [
      "java.util.List.get(int): java.lang.Object"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$JsonElementAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.JsonElement": [
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.stream.JsonReader.hasNext(): boolean": [
      "com.google.gson.stream.JsonReader.doPeek(): int"
    ],
    "com.google.gson.stream.MalformedJsonException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void": [
      "java.io.IOException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void"
    ],
    "com.google.gson.functional.EnumTest.testEnumToStringRead(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.ComparableSubject.isNull(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson"
    ],
    "com.google.gson.JsonElement.getAsInt(): int": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Truck.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Document$1.\u003cinit\u003e(): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializingNonZeroDecimalPointValuesAsIntegerFails$28(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictMultipleTopLevelValues(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void"
    ],
    "com.google.gson.JsonArrayAsListTest.testRemoveElement(): void": [
      "com.google.gson.JsonArray.asList(): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.util.List.remove(java.lang.Object): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$JacksonStreamParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void": [
      "com.google.gson.metrics.ParseBenchmark$JacksonStreamParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.Parser.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$RegisteredUserAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testShortDeserializationLossy$5(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.JsonArrayAsListTest.testViewUpdates(): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.JsonArray.asList(): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseFrom(com.google.protobuf.CodedInputStream): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearData(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getData(): java.lang.String",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.onChanged(): void"
    ],
    "com.google.gson.functional.TypeVariableTest$Bar.\u003cinit\u003e(java.lang.String, java.lang.Integer, boolean): void": [
      "com.google.gson.functional.TypeVariableTest$Foo.\u003cinit\u003e(java.lang.Object, java.lang.Object, java.lang.Boolean): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType.$values(): com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType[]",
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonDeserializer(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonDeserializer.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.MapTest$24.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.MapTest$24.serialize(java.util.Map, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.setUp(): void": [
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.util.Locale.getDefault(): java.util.Locale",
      "java.util.TimeZone.getDefault(): java.util.TimeZone",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.JsonNull.deepCopy(): com.google.gson.JsonElement": [
      "com.google.gson.JsonNull.deepCopy(): com.google.gson.JsonNull"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api$2.newParser(): com.google.gson.metrics.ParseBenchmark$Parser": [
      "com.google.gson.metrics.ParseBenchmark$JacksonBindParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.functional.EnumTest$Gender.$values(): com.google.gson.functional.EnumTest$Gender[]": [],
    "com.google.gson.functional.Java17RecordTest$8LocalRecord.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$BagOfPrimitives.toString(): java.lang.String": [
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void": [
      "com.google.gson.JsonElement.\u003cinit\u003e(): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.internal.ConstructorConstructor$8.construct(): java.lang.Object": [
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getData(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.protobuf.RepeatedFieldBuilderV3.getMessage(int): com.google.protobuf.AbstractMessage"
    ],
    "com.google.gson.CommentsTest$1.\u003cinit\u003e(com.google.gson.CommentsTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$1.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$LongToStringTypeAdapterFactory$1.write(com.google.gson.stream.JsonWriter, java.lang.Long): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.lang.Long.toString(): java.lang.String"
    ],
    "com.google.gson.functional.EnumTest$3.\u003cinit\u003e(com.google.gson.functional.EnumTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testPeekLargerThanLongMaxValue(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.nextLong(): long",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonSkipParser.\u003cinit\u003e(com.google.gson.metrics.ParseBenchmark$1): void": [
      "com.google.gson.metrics.ParseBenchmark$GsonSkipParser.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Strictness.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String": [
      "java.lang.StringBuilder.append(long): java.lang.StringBuilder",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(boolean): java.lang.StringBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getNameThatTestsCaseFormatList(): java.util.List": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getNameThatTestsCaseFormatList(): com.google.protobuf.ProtocolStringList"
    ],
    "com.google.gson.TypeAdapterTest.testNullSafe(): void": [
      "com.google.gson.TypeAdapterTest$1.nullSafe(): com.google.gson.TypeAdapter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.gson.TypeAdapterTest$1.\u003cinit\u003e(com.google.gson.TypeAdapterTest): void",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isNull(): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData.\u003cclinit\u003e(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldsData.\u003cinit\u003e(java.util.Map, java.util.List): void",
      "java.util.Collections.emptyMap(): java.util.Map"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilderTest$ClassWithoutNoArgsConstructor.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$LongToStringTypeAdapterFactory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$LongToStringTypeAdapterFactory$1.write(com.google.gson.stream.JsonWriter, java.lang.Long): void"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory, java.util.Map, java.util.Map): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.functional.CollectionTest.testLinkedListSerialization(): void": [
      "java.util.LinkedList.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.CollectionTest$4.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.functional.CollectionTest$4.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.metrics.ParseBenchmark$JacksonBindParser.parse(char[], com.google.gson.metrics.ParseBenchmark$Document): void": [
      "java.io.CharArrayReader.\u003cinit\u003e(char[]): void",
      "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.Reader, com.fasterxml.jackson.core.type.TypeReference): java.lang.Object",
      "com.google.gson.metrics.ParseBenchmark$Document.access$800(com.google.gson.metrics.ParseBenchmark$Document): com.fasterxml.jackson.core.type.TypeReference"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1LocalRecordDeserialization.toString(): java.lang.String": [],
    "com.google.gson.functional.NullObjectAndFieldTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1LocalRecordSerialization.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.getNumber(): int": [],
    "com.google.gson.internal.bind.JsonTreeWriter.close(): void": [
      "java.util.List.isEmpty(): boolean",
      "java.util.List.add(java.lang.Object): boolean",
      "java.io.IOException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.JsonElement.isJsonObject(): boolean": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testDelegating_SameFactoryInstance_OnClassAndField(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField$Factory.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$8.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilder(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$NumberAsStringAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.DefaultTypeAdaptersTest$NumberAsStringAdapter.read(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.functional.Java17RecordTest$PrivateRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesBuilderList(): java.util.List": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.protobuf.RepeatedFieldBuilderV3.getBuilderList(): java.util.List"
    ],
    "com.google.gson.functional.Java17RecordTest.testAccessorIsCalled(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.Java17RecordTest$7LocalRecord.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.Gson.longAdapter(com.google.gson.LongSerializationPolicy): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson$3.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$2.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.StreamingTypeAdaptersTest$Person): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.CustomDeserializerTest$3.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomDeserializerTest$3.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$Base"
    ],
    "com.google.gson.GsonBuilder.addTypeAdaptersForDate(java.lang.String, int, int, java.util.List): void": [
      "java.lang.String.trim(): java.lang.String",
      "java.lang.String.isEmpty(): boolean",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(int, int): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(java.lang.String): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Factory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.graph.GraphAdapterBuilder$Factory$1.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilder$Factory, com.google.gson.TypeAdapter, com.google.gson.TypeAdapter): void",
      "java.util.Map.containsKey(java.lang.Object): boolean",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GadgetWithOptionalPart.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.MapTest$37.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilderTest$5.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.GsonBuilderTest$5.createInstance(java.lang.reflect.Type): com.google.gson.GsonBuilderTest$CustomClass3"
    ],
    "com.google.gson.functional.ObjectTest.testNullFieldsDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.common.TestTypes$Nested.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls(): void": [
      "com.google.gson.functional.NullObjectAndFieldTest$ClassWithMembers.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject(): void": [
      "com.google.gson.JsonElement.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testEscapeCharacterQuoteWithoutStrictMode(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$21.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$2.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.StreamingTypeAdaptersTest$2.read(com.google.gson.stream.JsonReader): com.google.gson.functional.StreamingTypeAdaptersTest$Person"
    ],
    "com.google.gson.internal.UnsafeAllocatorInstantiationTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getOuterMessageBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getOuterMessageFieldBuilder(): com.google.protobuf.SingleFieldBuilderV3",
      "com.google.protobuf.SingleFieldBuilderV3.getBuilder(): com.google.protobuf.AbstractMessage$Builder"
    ],
    "com.google.gson.VersionExclusionStrategyTest$MockClassUntil.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson$5.\u003cinit\u003e(com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data"
    ],
    "com.google.gson.functional.Java17RecordTest$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.Java17RecordTest$1.read(com.google.gson.stream.JsonReader): java.lang.Byte"
    ],
    "com.google.gson.ToNumberPolicy.\u003cclinit\u003e(): void": [
      "com.google.gson.ToNumberPolicy$4.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.ToNumberPolicy$2.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.ToNumberPolicy.$values(): com.google.gson.ToNumberPolicy[]",
      "com.google.gson.ToNumberPolicy$3.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.ToNumberPolicy$1.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testNegativeZero(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.ObjectTest$ClassWithObjectField.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessTest$2.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessTest, java.util.concurrent.atomic.AtomicBoolean): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality(): void": [
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "java.lang.reflect.ParameterizedType.getRawType(): java.lang.reflect.Type",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Subject.isNull(): void",
      "java.lang.reflect.ParameterizedType.getOwnerType(): java.lang.reflect.Type",
      "com.google.gson.ParameterizedTypeTest$1.\u003cinit\u003e(com.google.gson.ParameterizedTypeTest): void",
      "java.lang.Object.hashCode(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Subject.isSameInstanceAs(java.lang.Object): void",
      "com.google.gson.ParameterizedTypeTest$1.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.build(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.build(): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.functional.ReflectionAccessTest$1.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessTest, java.security.Permission, java.security.Permission): void": [
      "java.lang.SecurityManager.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat"
    ],
    "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.getGenericComponentType(): java.lang.reflect.Type": [],
    "com.google.gson.functional.CustomTypeAdaptersTest$10.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): byte[]": [
      "java.lang.String.charAt(int): char",
      "java.lang.String.length(): int",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "java.lang.Byte.parseByte(java.lang.String): byte"
    ],
    "com.google.gson.internal.bind.SerializationDelegatingTypeAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$17.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ReflectionAccessFilter$2.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonSkipParser.parse(char[], com.google.gson.metrics.ParseBenchmark$Document): void": [
      "java.io.CharArrayReader.\u003cinit\u003e(char[]): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.close(): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest$13.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.getExpectedJson(): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest$13.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.\u003cinit\u003e(java.lang.Number, java.lang.Number[], java.util.List, java.util.List[], java.util.List, java.util.List[]): void"
    ],
    "com.google.gson.interceptors.InterceptorTest$AddressValidator.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.getInnerMessage1(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [],
    "com.google.gson.JsonParser.parse(com.google.gson.stream.JsonReader): com.google.gson.JsonElement": [
      "com.google.gson.JsonParser.parseReader(com.google.gson.stream.JsonReader): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.utcTimeZone(): java.util.TimeZone": [
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.finalize(java.lang.Object[]): java.lang.Object": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void",
      "java.lang.reflect.InvocationTargetException.getCause(): java.lang.Throwable",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.reflect.ReflectionHelper.createExceptionForUnexpectedIllegalAccess(java.lang.IllegalAccessException): java.lang.RuntimeException",
      "java.lang.reflect.Constructor.newInstance(java.lang.Object[]): java.lang.Object",
      "java.util.Arrays.toString(java.lang.Object[]): java.lang.String",
      "com.google.gson.internal.reflect.ReflectionHelper.constructorToString(java.lang.reflect.Constructor): java.lang.String"
    ],
    "com.google.gson.functional.CollectionTest$14.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$22.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$22.write(com.google.gson.stream.JsonWriter, java.net.URI): void"
    ],
    "com.google.gson.functional.CollectionTest$7.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.serialize(com.google.protobuf.Message, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "java.util.Map.entrySet(): java.util.Set",
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.protobuf.Message.getAllFields(): java.util.Map",
      "com.google.gson.JsonSerializationContext.serialize(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void",
      "com.google.gson.protobuf.ProtoTypeAdapter.getEnumValue(com.google.protobuf.Descriptors$EnumValueDescriptor): java.lang.Object",
      "com.google.protobuf.Descriptors$FieldDescriptor.getName(): java.lang.String",
      "com.google.protobuf.Descriptors$FieldDescriptor.getOptions(): com.google.protobuf.DescriptorProtos$FieldOptions",
      "com.google.protobuf.Descriptors$FieldDescriptor.getType(): com.google.protobuf.Descriptors$FieldDescriptor$Type",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "com.google.gson.protobuf.ProtoTypeAdapter.getCustSerializedName(com.google.protobuf.DescriptorProtos$FieldOptions, java.lang.String): java.lang.String",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.Set.iterator(): java.util.Iterator",
      "java.util.Collection.iterator(): java.util.Iterator"
    ],
    "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicIntegerArray(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.concurrent.atomic.AtomicIntegerArray.get(int): int",
      "java.util.concurrent.atomic.AtomicIntegerArray.length(): int",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.MapTest$22.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization(): void": [
      "java.lang.String.startsWith(java.lang.String): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Iterator.next(): java.lang.Object",
      "java.lang.String.endsWith(java.lang.String): boolean",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.util.List.iterator(): java.util.Iterator",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.Java17RecordTest.lambda$testSerializedNameOnAccessor$0(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.InstanceCreatorTest$2.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.String.equals(java.lang.Object): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.JsonElement.getAsBigInteger(): java.math.BigInteger": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.example.Main.testVersionAnnotations(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "com.google.gson.GsonBuilder.setVersion(double): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.internal.StreamsTest.testWriterForAppendable(): void": [
      "java.io.Writer.append(char): java.io.Writer",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.Streams.writerForAppendable(java.lang.Appendable): java.io.Writer",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "java.io.Writer.append(java.lang.CharSequence): java.io.Writer",
      "java.io.Writer.write(char[]): void",
      "java.io.Writer.close(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.io.Writer.flush(): void",
      "java.io.Writer.write(char[], int, int): void",
      "java.io.Writer.append(java.lang.CharSequence, int, int): java.io.Writer",
      "java.io.Writer.write(java.lang.String, int, int): void",
      "java.io.Writer.write(java.lang.String): void",
      "java.io.Writer.write(int): void",
      "java.lang.String.toCharArray(): char[]"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType$1.deserialize(java.util.Date): java.util.Date": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gadget.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonParserTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api$5.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.metrics.ParseBenchmark$Api.\u003cinit\u003e(java.lang.String, int, com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.internal.UnsafeAllocatorInstantiationTest.testConcreteClassInstantiation(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.internal.UnsafeAllocator.newInstance(java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.GsonTypesTest.lambda$testNewParameterizedTypeWithoutOwner$0(): void": [
      "com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): java.lang.reflect.ParameterizedType"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getNameThatTestsCaseFormat(int): java.lang.String": [
      "com.google.protobuf.LazyStringList.get(int): java.lang.Object"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.UUID.toString(): java.lang.String"
    ],
    "com.google.gson.internal.sql.SqlDateTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.sql.SqlDateTypeAdapter.read(com.google.gson.stream.JsonReader): java.sql.Date"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getParentForChildren(): com.google.protobuf.GeneratedMessageV3$BuilderParent",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.isClean(): boolean",
      "com.google.protobuf.RepeatedFieldBuilderV3.\u003cinit\u003e(java.util.List, boolean, com.google.protobuf.AbstractMessage$BuilderParent, boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.stream.JsonWriter.value(float): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.writeDeferredName(): void",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Float.toString(float): java.lang.String",
      "java.lang.StringBuilder.append(float): java.lang.StringBuilder",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.Float.isInfinite(float): boolean",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Float.isNaN(float): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonWriter.beforeValue(): void",
      "java.io.Writer.append(java.lang.CharSequence): java.io.Writer"
    ],
    "com.google.gson.stream.JsonReader.checkLenient(): void": [
      "com.google.gson.stream.JsonReader.syntaxError(java.lang.String): java.io.IOException"
    ],
    "com.google.gson.Gson$5.write(com.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicLongArray): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "java.util.concurrent.atomic.AtomicLongArray.length(): int",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.util.concurrent.atomic.AtomicLongArray.get(int): long",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.JsonArrayTest.testRemove(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.IterableSubject.doesNotContain(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonArray.remove(int): com.google.gson.JsonElement",
      "com.google.common.truth.IterableSubject.contains(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.JsonArray.remove(com.google.gson.JsonElement): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.writeDeferredName(): void",
      "com.google.gson.stream.JsonWriter.open(int, char): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.GsonTest.assertCustomGson(com.google.gson.Gson): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonTest$CustomClass2.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonTest$CustomClass1.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonReader.endObject(): void": [
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.doPeek(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$FooJsonAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$FooJsonAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo"
    ],
    "com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.FieldNamingPolicyTest.testUpperCasingLocaleIndependent(): void": [
      "com.google.common.truth.StandardSubjectBuilder.that(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.String.toUpperCase(java.util.Locale): java.lang.String",
      "java.util.Locale.getDefault(): java.util.Locale",
      "java.lang.reflect.Field.getName(): java.lang.String",
      "com.google.common.truth.Truth.assertWithMessage(java.lang.String, java.lang.Object[]): com.google.common.truth.StandardSubjectBuilder",
      "com.google.common.truth.StringSubject.matches(java.lang.String): void",
      "java.lang.Class.getDeclaredField(java.lang.String): java.lang.reflect.Field",
      "java.util.Locale.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.doesNotMatch(java.lang.String): void",
      "com.google.common.truth.Truth.assertWithMessage(java.lang.String): com.google.common.truth.StandardSubjectBuilder",
      "com.google.gson.FieldNamingPolicy.translateName(java.lang.reflect.Field): java.lang.String",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testEmptyString(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapterTest.testUtcDatesOnJdkBefore1_7(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.typeadapters.UtcDateTypeAdapter.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testExcludeSerializePrecedence(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$2.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$DelegatingAndOverwriting.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.GsonBuilder.addSerializationExclusionStrategy(com.google.gson.ExclusionStrategy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [],
    "com.google.gson.internal.bind.JsonTreeWriter.peek(): com.google.gson.JsonElement": [
      "java.util.List.get(int): java.lang.Object",
      "java.util.List.size(): int"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testNulls(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeReader.nextNull(): void",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.example.Main.lambda$testConstructorNoArgs$10(com.google.gson.Gson): java.lang.String": [
      "java.lang.Integer.toString(int): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.native_test.ReflectionTest.testCustomFieldAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.native_test.ReflectionTest$ClassWithCustomFieldAdapter.\u003cinit\u003e(int): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonElement.deepCopy(): com.google.gson.JsonElement": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getDescriptorForType(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateParseInvalidMonth(): void": [
      "com.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition): java.util.Date",
      "java.text.ParsePosition.\u003cinit\u003e(int): void",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest$2.write(com.google.gson.stream.JsonWriter, java.lang.String): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.lang.String.toUpperCase(java.util.Locale): java.lang.String"
    ],
    "com.google.gson.functional.MapTest$7.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.JsonSerializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.TreeTypeAdapter.delegate(): com.google.gson.TypeAdapter",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void",
      "com.google.gson.internal.Streams.write(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter): void"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNameInArray$3(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.TypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [],
    "com.google.gson.LongSerializationPolicyTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.InterceptorTest$User.\u003cinit\u003e(java.lang.String, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement": [
      "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.bind.TypeAdapters$11.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$11.read(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.common.TestTypes$BaseSerializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.common.TestTypes$BaseSerializer.serialize(com.google.gson.common.TestTypes$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteNumbersWhenStrict$21(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.functional.Java17RecordTest$4LocalRecord.\u003cinit\u003e(java.lang.Integer, java.lang.Integer): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale(): void": [
      "java.text.DateFormat.format(java.util.Date): java.lang.String",
      "java.util.Locale.getDefault(): java.util.Locale",
      "java.text.DateFormat.getDateInstance(int): java.text.DateFormat",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createDefaultsAdapterFactory(): com.google.gson.TypeAdapterFactory",
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.assertParsed(java.lang.String, com.google.gson.TypeAdapterFactory): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(int): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(int, int): com.google.gson.TypeAdapterFactory",
      "java.util.TimeZone.getDefault(): java.util.TimeZone",
      "java.util.Date.\u003cinit\u003e(long): void",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "java.text.DateFormat.getDateTimeInstance(int, int): java.text.DateFormat",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$25.write(com.google.gson.stream.JsonWriter, java.util.Currency): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.util.Currency.getCurrencyCode(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest$PublicRecord.hashCode(): int": [],
    "com.google.gson.JsonNullTest.testEqualsAndHashcode(): void": [
      "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void",
      "com.google.gson.JsonNull.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonTreeTest.assertContains(com.google.gson.JsonObject, com.google.gson.JsonPrimitive): void": [
      "com.google.gson.JsonObject.entrySet(): java.util.Set",
      "com.google.gson.JsonElement.getAsJsonPrimitive(): com.google.gson.JsonPrimitive",
      "com.google.gson.JsonElement.isJsonPrimitive(): boolean",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "org.junit.Assert.fail(): void",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.gson.JsonPrimitive.equals(java.lang.Object): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.internal.bind.TypeAdapters$4.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.buildPartial(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.createExceptionForRecordReflectionException(java.lang.ReflectiveOperationException): java.lang.RuntimeException": [
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String, java.lang.Throwable): void"
    ],
    "com.google.gson.common.TestTypes$Nested.getExpectedJson(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.common.TestTypes$Nested.appendFields(java.lang.StringBuilder): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearAnotherField(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getAnotherField(): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.testByteDeserializationLossy(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.regression.OSGiTest.testSunMiscImportPackage(): void": [
      "java.lang.String.contains(java.lang.CharSequence): boolean",
      "com.google.common.truth.StandardSubjectBuilder.that(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.regression.OSGiTest.findManifest(java.lang.String): java.util.jar.Manifest",
      "com.google.common.base.Splitter.split(java.lang.CharSequence): java.lang.Iterable",
      "com.google.common.base.Splitter.on(char): com.google.common.base.Splitter",
      "com.google.gson.regression.OSGiTest.assertSubstring(java.lang.String, java.lang.String, java.lang.String): void",
      "java.lang.Iterable.iterator(): java.util.Iterator",
      "java.util.jar.Attributes.getValue(java.lang.String): java.lang.String",
      "org.junit.Assert.fail(java.lang.String): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.jar.Manifest.getMainAttributes(): java.util.jar.Attributes",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.common.truth.Truth.assertWithMessage(java.lang.String): com.google.common.truth.StandardSubjectBuilder",
      "com.google.common.truth.StringSubject.isNotNull(): void"
    ],
    "com.google.gson.internal.Excluder.\u003cinit\u003e(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilder.enableComplexMapKeySerialization(): com.google.gson.GsonBuilder": [],
    "com.google.gson.functional.NumberLimitsTest.jsonReader(java.lang.String): com.google.gson.stream.JsonReader": [
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$3.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.common.TestTypes$Sub.\u003cclinit\u003e(): void": [
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.Strictness.$values(): com.google.gson.Strictness[]": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.MixedStreamTest$1.\u003cinit\u003e(com.google.gson.MixedStreamTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldAttributes.toString(): java.lang.String": [
      "java.lang.reflect.Field.toString(): java.lang.String"
    ],
    "com.google.gson.extras.examples.rawcollections.RawCollectionsExample.main(java.lang.String[]): void": [
      "java.util.Collection.add(java.lang.Object): boolean",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement",
      "java.io.PrintStream.printf(java.lang.String, java.lang.Object[]): java.io.PrintStream",
      "java.lang.Integer.intValue(): int",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.extras.examples.rawcollections.RawCollectionsExample$Event.\u003cinit\u003e(java.lang.String, java.lang.String, com.google.gson.extras.examples.rawcollections.RawCollectionsExample$1): void",
      "java.io.PrintStream.println(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.common.TestTypes$ClassWithBaseField.\u003cinit\u003e(com.google.gson.common.TestTypes$Base): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$2$1.\u003cinit\u003e(com.google.gson.GsonTest$2, com.google.gson.Gson): void": [
      "java.lang.Thread.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.NamingPolicyTest$ClassWithDuplicateFields.\u003cinit\u003e(java.lang.Integer): void": [
      "com.google.gson.functional.NamingPolicyTest$ClassWithDuplicateFields.\u003cinit\u003e(java.lang.Integer, java.lang.Double): void"
    ],
    "com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonSerializer$Serializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonSerializer$Serializer.serialize(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonSerializer, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.common.TestTypes$PrimitiveArray.\u003cinit\u003e(): void": [
      "com.google.gson.common.TestTypes$PrimitiveArray.\u003cinit\u003e(long[]): void"
    ],
    "com.google.gson.TypeAdapter.fromJsonTree(com.google.gson.JsonElement): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization(): void": [
      "com.google.gson.functional.ObjectTest$4.\u003cinit\u003e(com.google.gson.functional.ObjectTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.ObjectTest$5.\u003cinit\u003e(com.google.gson.functional.ObjectTest): void",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest.testSerializationWithMultipleTypes(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.graph.GraphAdapterBuilderTest$Company.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.graph.GraphAdapterBuilderTest$Employee.\u003cinit\u003e(java.lang.String, com.google.gson.graph.GraphAdapterBuilderTest$Company): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.graph.GraphAdapterBuilder.addType(java.lang.reflect.Type): com.google.gson.graph.GraphAdapterBuilder",
      "com.google.gson.graph.GraphAdapterBuilder.\u003cinit\u003e(): void",
      "com.google.gson.graph.GraphAdapterBuilder.registerOn(com.google.gson.GsonBuilder): void"
    ],
    "com.google.gson.functional.LeniencyTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo.values(): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo[]": [
      "[Lcom.google.gson.functional.JsonAdapterAnnotationOnClassesTest$Foo;.clone(): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFieldsOrBuilder.getNumbers(int): long": [],
    "com.google.gson.functional.TreeTypeAdaptersTest.setUp(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.functional.TreeTypeAdaptersTest$Assignment.\u003cinit\u003e(com.google.gson.functional.TreeTypeAdaptersTest$Id, java.lang.Object): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.TreeTypeAdaptersTest$Course.\u003cinit\u003e(com.google.gson.functional.TreeTypeAdaptersTest$Id, int, com.google.gson.functional.TreeTypeAdaptersTest$Assignment, java.util.List): void",
      "com.google.gson.functional.TreeTypeAdaptersTest$IdTreeTypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Factory$1.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilder$Factory, com.google.gson.TypeAdapter, com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault(): void": [
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class, java.lang.String): com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.util.Map.containsKey(java.lang.Object): boolean",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField.readIntoArray(com.google.gson.stream.JsonReader, int, java.lang.Object[]): void": [],
    "com.google.gson.functional.ParameterizedTypesTest$6.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest.testLocalRecordSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.native_test.Java17RecordReflectionTest$1LocalRecordSerialization.\u003cinit\u003e(int): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant(): void": [
      "java.util.Locale.getVariant(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Locale.getLanguage(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.Locale.getCountry(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1RecordWithExpose.toString(): java.lang.String": [],
    "com.google.gson.it.ShrinkingIT.lambda$test$1(java.lang.StringBuilder, java.lang.Class): void": [
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "java.lang.Class.getMethod(java.lang.String, java.lang.Class[]): java.lang.reflect.Method"
    ],
    "com.google.gson.JsonParserParameterizedTest.data(): java.lang.Iterable": [
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List"
    ],
    "com.google.gson.functional.MapTest.testSortedMap(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.MapSubject.containsKey(java.lang.Object): void",
      "java.util.SortedMap.get(java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$16.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$16.getType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.MapSubject.hasSize(int): void"
    ],
    "com.google.gson.interceptors.InterceptorTest$UserValidator.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ArrayTest.testNullsInArraySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub(): void": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.JsonArrayAsListTest.testSize(): void": [
      "com.google.gson.JsonArray.asList(): java.util.List",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.InstanceCreatorTest$4.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.functional.InstanceCreatorTest$4.createInstance(java.lang.reflect.Type): java.util.List"
    ],
    "com.google.gson.native_test.ReflectionTest.testCustomAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.native_test.ReflectionTest$ClassWithRegisteredAdapter.\u003cinit\u003e(int): void",
      "com.google.gson.native_test.ReflectionTest$2.\u003cinit\u003e(com.google.gson.native_test.ReflectionTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.onBuilt(): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter$Builder.setEnumSerialization(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization): com.google.gson.protobuf.ProtoTypeAdapter$Builder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseDelimitedFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, int, com.google.gson.internal.bind.DefaultDateTypeAdapter$1): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter.\u003cinit\u003e(com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType, int): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.close(): void": [],
    "com.google.gson.functional.Java17RecordTest$7LocalRecord.hashCode(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.\u003cinit\u003e(java.lang.String, int, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.internal.bind.DateTypeAdapter.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.bind.DateTypeAdapter$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getNumbersList(): java.util.List": [
      "java.util.Collections.unmodifiableList(java.util.List): java.util.List"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.removeSimples(int): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "java.util.List.remove(int): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureSimplesIsMutable(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.remove(int): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter$Builder.build(): com.google.gson.protobuf.ProtoTypeAdapter": [
      "com.google.gson.protobuf.ProtoTypeAdapter.\u003cinit\u003e(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization, com.google.common.base.CaseFormat, com.google.common.base.CaseFormat, java.util.Set, java.util.Set, com.google.gson.protobuf.ProtoTypeAdapter$1): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testReadArray(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.reflect.ClassSatisfyingBounds.\u003cinit\u003e(): void": [
      "java.lang.Number.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.addNameThatTestsCaseFormatBytes(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.onChanged(): void",
      "com.google.protobuf.LazyStringList.add(com.google.protobuf.ByteString): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.ensureNameThatTestsCaseFormatIsMutable(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.typeadapters.PostConstructAdapterFactoryTest$Sandwich.equals(java.lang.Object): boolean": [
      "java.lang.String.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.internal.bind.TypeAdapters$3.write(com.google.gson.stream.JsonWriter, java.lang.Boolean): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Boolean): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter.createAccumulator(): java.lang.Object[]": [
      "[Ljava.lang.Object;.clone(): java.lang.Object"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$1.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$1.serialize(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Base, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.internal.bind.TypeAdapters$7.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$7.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.assertParsed(java.lang.String, com.google.gson.TypeAdapterFactory): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.toLiteral(java.lang.String): java.lang.String",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.dateAdapter(com.google.gson.TypeAdapterFactory): com.google.gson.TypeAdapter",
      "java.util.Date.\u003cinit\u003e(long): void",
      "com.google.common.truth.StandardSubjectBuilder.that(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.Truth.assertWithMessage(java.lang.String): com.google.common.truth.StandardSubjectBuilder"
    ],
    "com.google.gson.JsonStreamParserTest.testMalformedInput(): void": [
      "com.google.gson.JsonStreamParser.\u003cinit\u003e(java.lang.String): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest$2.read(com.google.gson.stream.JsonReader): java.lang.String": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.lang.String.toLowerCase(java.util.Locale): java.lang.String"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Properties.getProperty(java.lang.String): java.lang.String"
    ],
    "com.google.gson.functional.CollectionTest$18.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe(): void": [
      "java.util.List.get(int): java.lang.Object",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Truck.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.nullSafe(): com.google.gson.TypeAdapter",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Person.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.functional.StreamingTypeAdaptersTest$7.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void"
    ],
    "com.google.gson.functional.ArrayTest.testMultidimensionalPrimitiveArraysDeserialization(): void": [
      "com.google.common.truth.ObjectArraySubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Properties.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Properties.setProperty(java.lang.String, java.lang.String): java.lang.Object"
    ],
    "com.google.gson.JsonArrayTest.testGetAs_WrongArraySize(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonArray.add(java.lang.Boolean): void",
      "com.google.gson.JsonArray.getAsByte(): byte"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithSerializedName.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api$4.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.metrics.ParseBenchmark$Api.\u003cinit\u003e(java.lang.String, int, com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.internal.Streams$AppendableWriter.write(int): void": [
      "java.lang.Appendable.append(char): java.lang.Appendable"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.putFactoryAndGetCurrent(java.lang.Class, com.google.gson.TypeAdapterFactory): com.google.gson.TypeAdapterFactory": [
      "java.util.concurrent.ConcurrentMap.putIfAbsent(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.graph.GraphAdapterBuilder.addType(java.lang.reflect.Type): com.google.gson.graph.GraphAdapterBuilder": [
      "com.google.gson.internal.ConstructorConstructor.get(com.google.gson.reflect.TypeToken): com.google.gson.internal.ObjectConstructor",
      "com.google.gson.graph.GraphAdapterBuilder.addType(java.lang.reflect.Type, com.google.gson.InstanceCreator): com.google.gson.graph.GraphAdapterBuilder",
      "com.google.gson.graph.GraphAdapterBuilder$1.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilder, com.google.gson.internal.ObjectConstructor): void",
      "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clear(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clear(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.value(java.lang.Boolean): com.google.gson.stream.JsonWriter": [
      "com.google.gson.internal.bind.JsonTreeWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$1.\u003cclinit\u003e(): void": [
      "com.google.gson.stream.JsonToken.values(): com.google.gson.stream.JsonToken[]",
      "com.google.gson.stream.JsonToken.ordinal(): int",
      "com.fasterxml.jackson.core.JsonToken.ordinal(): int",
      "com.fasterxml.jackson.core.JsonToken.values(): com.fasterxml.jackson.core.JsonToken[]"
    ],
    "com.google.gson.internal.GsonTypesTest.testNewParameterizedTypeWithoutOwner(): void": [
      "com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): java.lang.reflect.ParameterizedType",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "java.lang.reflect.ParameterizedType.getRawType(): java.lang.reflect.Type",
      "com.google.common.truth.ObjectArraySubject.asList(): com.google.common.truth.IterableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "java.lang.reflect.ParameterizedType.getOwnerType(): java.lang.reflect.Type",
      "com.google.gson.internal.GsonTypesTest.getFirstTypeArgument(java.lang.reflect.Type): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.JsonNull.hashCode(): int": [
      "java.lang.Object.hashCode(): int"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$PointWithProperty.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree(): void": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.functional.InternationalizationTest.testSupplementaryUnicodeSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.String.\u003cinit\u003e(int[], int, int): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void": [
      "com.google.protobuf.UnknownFieldSet.newBuilder(): com.google.protobuf.UnknownFieldSet$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseUnknownField(com.google.protobuf.CodedInputStream, com.google.protobuf.UnknownFieldSet$Builder, com.google.protobuf.ExtensionRegistryLite, int): boolean",
      "com.google.protobuf.InvalidProtocolBufferException.setUnfinishedMessage(com.google.protobuf.MessageLite): com.google.protobuf.InvalidProtocolBufferException",
      "com.google.protobuf.CodedInputStream.readTag(): int",
      "com.google.protobuf.InvalidProtocolBufferException.\u003cinit\u003e(java.io.IOException): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.protobuf.CodedInputStream.readInt32(): int",
      "com.google.protobuf.CodedInputStream.readBytes(): com.google.protobuf.ByteString",
      "com.google.protobuf.UnknownFieldSet$Builder.build(): com.google.protobuf.UnknownFieldSet",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.makeExtensionsImmutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.\u003cinit\u003e(): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.newInstance(com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.\u003cinit\u003e(): void"
    ],
    "com.google.gson.LongSerializationPolicyTest.testStringLongSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonPrimitive.isString(): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonElement.getAsJsonPrimitive(): com.google.gson.JsonPrimitive",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.LongSerializationPolicy.serialize(java.lang.Long): com.google.gson.JsonElement",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonElement.isJsonPrimitive(): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.lambda$testNameAsTopLevelValue$1(com.google.gson.internal.bind.JsonTreeWriter): void": [
      "com.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$3.\u003cinit\u003e(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByInstanceCreator$Serializer.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$Foo.\u003cinit\u003e(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$Foo.\u003cinit\u003e(int, long): void"
    ],
    "com.google.gson.functional.Java17RecordTest$13LocalRecord.i(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.writeTo(com.google.protobuf.CodedOutputStream): void": [
      "com.google.protobuf.CodedOutputStream.writeInt32(int, int): void",
      "java.util.List.get(int): java.lang.Object",
      "com.google.protobuf.CodedOutputStream.writeMessage(int, com.google.protobuf.MessageLite): void",
      "java.util.List.size(): int",
      "com.google.protobuf.UnknownFieldSet.writeTo(com.google.protobuf.CodedOutputStream): void",
      "com.google.protobuf.CodedOutputStream.writeEnum(int, int): void"
    ],
    "com.google.gson.functional.CollectionTest$2.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void"
    ],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest.testDefault(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.functional.CustomDeserializerTest$4.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomDeserializerTest$4.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$Base"
    ],
    "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getAnnotation(java.lang.Class): com.google.gson.annotations.JsonAdapter",
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, com.google.gson.Gson, com.google.gson.reflect.TypeToken, com.google.gson.annotations.JsonAdapter, boolean): com.google.gson.TypeAdapter",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class"
    ],
    "com.google.gson.internal.Excluder.excludeFieldsWithoutExposeAnnotation(): com.google.gson.internal.Excluder": [
      "com.google.gson.internal.Excluder.clone(): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder.getYear(): int": [],
    "com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.isReflective(com.google.gson.TypeAdapter): boolean": [
      "com.google.gson.internal.bind.SerializationDelegatingTypeAdapter.getSerializationDelegate(): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setName(java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$WithNullSafe.\u003cinit\u003e(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapterTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.TypeAdapterTest$1.write(com.google.gson.stream.JsonWriter, java.lang.String): void"
    ],
    "com.google.gson.metrics.BagOfPrimitives.\u003cinit\u003e(): void": [
      "com.google.gson.metrics.BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void"
    ],
    "com.google.gson.metrics.PerformanceTest$3.\u003cinit\u003e(com.google.gson.metrics.PerformanceTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$EntrySet$1.\u003cinit\u003e(com.google.gson.internal.LinkedTreeMap$EntrySet): void": [
      "com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.\u003cinit\u003e(com.google.gson.internal.LinkedTreeMap): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$1.serialize(com.google.gson.common.TestTypes$ClassWithCustomTypeConverter, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory, java.lang.String, java.lang.reflect.Field, boolean, java.lang.reflect.Method, com.google.gson.TypeAdapter, com.google.gson.TypeAdapter, boolean, boolean): void": [
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField.\u003cinit\u003e(java.lang.String, java.lang.reflect.Field): void"
    ],
    "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.writeDeferredName(): void",
      "com.google.gson.stream.JsonWriter.open(int, char): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition): java.util.Date": [
      "java.util.Calendar.setLenient(boolean): void",
      "java.util.Calendar.set(int, int): void",
      "java.text.ParsePosition.getIndex(): int",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.util.ISO8601Utils.parseInt(java.lang.String, int, int): int",
      "java.util.Calendar.getTime(): java.util.Date",
      "java.lang.String.substring(int): java.lang.String",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.text.ParseException.initCause(java.lang.Throwable): java.lang.Throwable",
      "java.lang.String.charAt(int): char",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.String.isEmpty(): boolean",
      "java.lang.String.length(): int",
      "java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence): java.lang.String",
      "java.lang.IndexOutOfBoundsException.\u003cinit\u003e(java.lang.String): void",
      "java.text.ParseException.\u003cinit\u003e(java.lang.String, int): void",
      "java.lang.Math.min(int, int): int",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "com.google.gson.internal.bind.util.ISO8601Utils.checkOffset(java.lang.String, int, char): boolean",
      "java.lang.String.equals(java.lang.Object): boolean",
      "java.util.GregorianCalendar.\u003cinit\u003e(java.util.TimeZone): void",
      "java.util.TimeZone.getID(): java.lang.String",
      "java.text.ParsePosition.setIndex(int): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.util.GregorianCalendar.\u003cinit\u003e(int, int, int): void",
      "java.lang.Exception.getMessage(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.util.ISO8601Utils.indexOfNonDigit(java.lang.String, int): int",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$IdTreeTypeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.TreeTypeAdaptersTest$IdTreeTypeAdapter.serialize(com.google.gson.functional.TreeTypeAdaptersTest$Id, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.InvalidProtocolBufferException.getUnfinishedMessage(): com.google.protobuf.MessageLite",
      "com.google.protobuf.InvalidProtocolBufferException.unwrapIOException(): java.io.IOException",
      "com.google.protobuf.Parser.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$7(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest.testPublicRecord(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.reflect.TypeTokenTest$1SubTypeToken.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldNamingPolicy$7.translateName(java.lang.reflect.Field): java.lang.String": [
      "com.google.gson.FieldNamingPolicy$7.separateCamelCase(java.lang.String, char): java.lang.String",
      "java.lang.String.toLowerCase(java.util.Locale): java.lang.String",
      "java.lang.reflect.Field.getName(): java.lang.String"
    ],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest$3.readNumber(com.google.gson.stream.JsonReader): java.lang.Number": [
      "com.google.gson.functional.ToNumberPolicyFunctionalTest$3.readNumber(com.google.gson.stream.JsonReader): java.lang.Byte"
    ],
    "com.google.gson.JsonObjectAsMapTest.testGet(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.asMap(): java.util.Map",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getLongTimestamp(): long": [],
    "com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedStringsWithSkipValue(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization(): void": [
      "com.google.gson.common.TestTypes$ClassWithSerializedNameFields.\u003cinit\u003e(int, int): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.common.TestTypes$ClassWithSerializedNameFields.getExpectedJson(): java.lang.String",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addDataBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.protobuf.RepeatedFieldBuilderV3.addBuilder(com.google.protobuf.AbstractMessage): com.google.protobuf.AbstractMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode(): void": [
      "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void",
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.ConstructorConstructor$11.construct(): java.lang.Object": [
      "java.util.LinkedHashSet.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.onBuilt(): void"
    ],
    "com.google.gson.internal.LazilyParsedNumber.equals(java.lang.Object): boolean": [
      "java.lang.String.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.TypeAdapter.fromJsonTree(com.google.gson.JsonElement): java.lang.Object",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.Streams.parse(com.google.gson.stream.JsonReader): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.build(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.getInnerMessage2(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [],
    "com.google.gson.functional.ParameterizedTypesTest$12.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.assertIterationOrder(java.lang.Iterable, java.lang.Object[]): void": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.lang.Iterable.iterator(): java.util.Iterator",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "java.util.ArrayList.add(java.lang.Object): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriter.\u003cclinit\u003e(): void": [
      "java.util.regex.Pattern.compile(java.lang.String): java.util.regex.Pattern",
      "[Ljava.lang.String;.clone(): java.lang.Object",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.annotations.Until.value(): double": [],
    "com.google.gson.metrics.ParseBenchmark$Api$1.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.metrics.ParseBenchmark$Api.\u003cinit\u003e(java.lang.String, int, com.google.gson.metrics.ParseBenchmark$1): void"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.add(int, java.lang.Object): void": [
      "java.util.ArrayList.add(int, java.lang.Object): void",
      "com.google.gson.internal.NonNullElementWrapperList.nonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.GsonTest$TestTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilderForType(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientMultipleTopLevelValues(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.MixedStreamTest.testWriteDoesNotMutateState(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.isLenient(): boolean",
      "com.google.gson.stream.JsonWriter.setHtmlSafe(boolean): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.stream.JsonWriter.isHtmlSafe(): boolean",
      "com.google.gson.stream.JsonWriter.setLenient(boolean): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.Streams$AppendableWriter.close(): void": [],
    "com.google.gson.internal.bind.TypeAdapters$11.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "java.lang.Number.longValue(): long",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFieldsOrBuilder.getSimplesCount(): int": [],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization(): void": [
      "java.lang.Integer.intValue(): int",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldReflectionAdapter.readField(java.lang.Object, com.google.gson.stream.JsonReader, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField): void": [
      "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField.readIntoField(com.google.gson.stream.JsonReader, java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.getValueDescriptor(): com.google.protobuf.Descriptors$EnumValueDescriptor": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.getDescriptor(): com.google.protobuf.Descriptors$EnumDescriptor",
      "com.google.protobuf.Descriptors$EnumDescriptor.getValues(): java.util.List",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.ordinal(): int"
    ],
    "com.example.Main.testNamedFields(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.example.Main.lambda$testExposeAnnotation$22(com.google.gson.Gson): java.lang.String": [
      "com.example.ClassWithExposeAnnotation.\u003cinit\u003e(): void",
      "com.example.Main.toJson(com.google.gson.Gson, java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(boolean): void": [
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(java.util.Comparator, boolean): void"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.\u003cinit\u003e(com.google.gson.internal.reflect.ReflectionHelper$1): void": [
      "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.metrics.ParseBenchmark$Document.$values(): com.google.gson.metrics.ParseBenchmark$Document[]": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GadgetWithPrimitivePart.\u003cinit\u003e(long): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.JsonArrayTest.testSameAddition(): void": [
      "com.google.gson.JsonArray.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.JsonArray.add(java.lang.Character): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.JsonArray.add(java.lang.Boolean): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1LocalRecord.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.nextInt(): int": [
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.NumberFormatException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextQuotedValue(char): java.lang.String",
      "com.google.gson.stream.JsonReader.nextUnquotedValue(): java.lang.String",
      "java.lang.Double.parseDouble(java.lang.String): double",
      "java.lang.Integer.parseInt(java.lang.String): int",
      "java.lang.StringBuilder.append(long): java.lang.StringBuilder",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.unexpectedTokenError(java.lang.String): java.lang.IllegalStateException",
      "com.google.gson.stream.JsonReader.doPeek(): int",
      "com.google.gson.stream.JsonReader.locationString(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.String.\u003cinit\u003e(char[], int, int): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.access$1200(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.common.TestTypes.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlTypesSupport$1.\u003cinit\u003e(java.lang.Class): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.\u003cinit\u003e(java.lang.Class): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.assertEqualsDate(java.util.Date, int, int, int): void": [
      "java.util.Date.getDate(): int",
      "java.util.Date.getMonth(): int",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.Date.getYear(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getNIdCt(): int": [],
    "com.google.gson.internal.LinkedTreeMap.findByEntry(java.util.Map$Entry): com.google.gson.internal.LinkedTreeMap$Node": [
      "com.google.gson.internal.LinkedTreeMap.equal(java.lang.Object, java.lang.Object): boolean",
      "java.util.Map$Entry.getKey(): java.lang.Object",
      "java.util.Map$Entry.getValue(): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.findByObject(java.lang.Object): com.google.gson.internal.LinkedTreeMap$Node"
    ],
    "com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.JsonArray.iterator(): java.util.Iterator": [
      "java.util.ArrayList.iterator(): java.util.Iterator"
    ],
    "com.google.gson.internal.LinkedTreeMap$Node.last(): com.google.gson.internal.LinkedTreeMap$Node": [],
    "com.google.gson.internal.bind.TreeTypeAdapter.\u003cinit\u003e(com.google.gson.JsonSerializer, com.google.gson.JsonDeserializer, com.google.gson.Gson, com.google.gson.reflect.TypeToken, com.google.gson.TypeAdapterFactory, boolean): void": [
      "com.google.gson.internal.bind.SerializationDelegatingTypeAdapter.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.\u003cinit\u003e(com.google.gson.internal.bind.TreeTypeAdapter, com.google.gson.internal.bind.TreeTypeAdapter$1): void"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter.readTerminal(com.google.gson.stream.JsonReader, com.google.gson.stream.JsonToken): java.lang.Object": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.stream.JsonToken.ordinal(): int",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.GsonBuilder.isTypeObjectOrJsonElement(java.lang.reflect.Type): boolean": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean"
    ],
    "com.google.gson.stream.JsonReaderTest.testMalformedNumbers(): void": [
      "com.google.gson.stream.JsonReaderTest.assertNotANumber(java.lang.String): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictComments(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.GsonTest$2.\u003cinit\u003e(com.google.gson.GsonTest, java.util.concurrent.atomic.AtomicReference, java.lang.Class, java.util.concurrent.atomic.AtomicInteger): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest$5.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$Base": [],
    "com.google.gson.functional.JsonParserTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArrayAsListTest.testEqualsHashCode(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.gson.JsonArray.asList(): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.util.List.equals(java.lang.Object): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.Collections.singletonList(java.lang.Object): java.util.List",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.ConstructorConstructor$13.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addSimples(com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureSimplesIsMutable(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.addMessage(com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3"
    ],
    "com.google.gson.functional.RawSerializationTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilderTest.assertCustomGson(com.google.gson.Gson): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilderTest$CustomClass2.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilderTest$CustomClass1.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$9.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum.values(): com.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum[]": [
      "[Lcom.google.gson.functional.ReusedTypeVariablesFullyResolveTest$TestEnum;.clone(): java.lang.Object"
    ],
    "com.google.gson.ReflectionAccessFilter$FilterResult.values(): com.google.gson.ReflectionAccessFilter$FilterResult[]": [
      "[Lcom.google.gson.ReflectionAccessFilter$FilterResult;.clone(): java.lang.Object"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapter.parseInt(java.lang.String, int, int): int": [
      "java.lang.Character.digit(char, int): int",
      "java.lang.String.charAt(int): char",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.NumberFormatException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.String.length(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object": [
      "com.example.TestExecutor.same(java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.bind.TypeAdapters$17.write(com.google.gson.stream.JsonWriter, java.math.BigInteger): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.nextInt(): int": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peekStack(): java.lang.Object",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeReader.popStack(): java.lang.Object",
      "com.google.gson.JsonPrimitive.getAsInt(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.bind.JsonTreeReader.locationString(): java.lang.String"
    ],
    "com.google.gson.protobuf.functional.ProtosWithAnnotationsTest.testProtoWithAnnotations_deserialize(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addData(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setYear(int): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getOuterMessage(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.build(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setCountryCode5F55(java.lang.String): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setNIdCt(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setData(java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setWidth(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setLongTimestamp(long): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setContent(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.setHeight(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage2(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setMonth(int): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.hasInnerMessage1(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getId(): java.lang.String"
    ],
    "com.google.gson.internal.sql.SqlTypesSupport.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonElement.getAsByte(): byte": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void": [
      "java.lang.Object.hashCode(): int",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type): java.lang.Class",
      "com.google.gson.reflect.TypeToken.getTypeTokenTypeArgument(): java.lang.reflect.Type"
    ],
    "com.google.gson.Gson$1.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "java.lang.Number.doubleValue(): double",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter",
      "com.google.gson.Gson.checkValidFloatingPoint(double): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createDuplicateFieldException(java.lang.Class, java.lang.String, java.lang.reflect.Field, java.lang.reflect.Field): java.lang.IllegalArgumentException": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.TroubleshootingGuide.createUrl(java.lang.String): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.reflect.ReflectionHelper.fieldToString(java.lang.reflect.Field): java.lang.String",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordNotSupportedHelper.getCanonicalRecordConstructor(java.lang.Class): java.lang.reflect.Constructor": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$StringHolder.\u003cinit\u003e(java.lang.String, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.EnumTest$Color.\u003cinit\u003e(java.lang.String, int, java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.\u003cinit\u003e(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization, com.google.common.base.CaseFormat, com.google.common.base.CaseFormat, java.util.Set, java.util.Set): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.InterceptorTest$Address.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testFailWithPositionDeepPath(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.internal.Excluder.excludeClass(java.lang.Class, boolean): boolean": [
      "com.google.gson.internal.Excluder.excludeClassChecks(java.lang.Class): boolean",
      "com.google.gson.internal.Excluder.excludeClassInStrategy(java.lang.Class, boolean): boolean"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Locale.\u003cinit\u003e(java.lang.String, java.lang.String, java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.native_test.ReflectionTest$2.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.native_test.ReflectionTest$2.write(com.google.gson.stream.JsonWriter, com.google.gson.native_test.ReflectionTest$ClassWithRegisteredAdapter): void"
    ],
    "com.google.gson.ObjectTypeAdapterTest.testDeserializeDeeplyNestedObjects(): void": [
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "com.google.gson.ObjectTypeAdapterTest.repeat(java.lang.String, int): java.lang.String",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$NumberAsStringAdapter.\u003cinit\u003e(java.lang.Class): void": [
      "java.lang.Class.getConstructor(java.lang.Class[]): java.lang.reflect.Constructor",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$User.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale(): void": [
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.assertParsed(java.lang.String, com.google.gson.TypeAdapterFactory): void",
      "java.util.Locale.getDefault(): java.util.Locale",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(int): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createDefaultsAdapterFactory(): com.google.gson.TypeAdapterFactory",
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createAdapterFactory(int, int): com.google.gson.TypeAdapterFactory",
      "java.util.TimeZone.getDefault(): java.util.TimeZone",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.metrics.PerformanceTest$2.\u003cinit\u003e(com.google.gson.metrics.PerformanceTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$14.construct(): java.lang.Object": [
      "java.util.concurrent.ConcurrentSkipListMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$3.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isInstanceOf(java.lang.Class): void",
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.Throwable): void",
      "java.util.concurrent.CountDownLatch.countDown(): void",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "java.util.concurrent.CountDownLatch.await(): void",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void",
      "com.google.gson.GsonTest$1WrappingAdapter.\u003cinit\u003e(com.google.gson.GsonTest, com.google.gson.TypeAdapter): void"
    ],
    "com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement, java.lang.Appendable): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.toBuilder(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.functional.EnumTest.testEnumCaseMapping(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$14.read(com.google.gson.stream.JsonReader): java.lang.Character": [
      "java.lang.String.charAt(int): char",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "java.lang.String.length(): int",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserClassAnnotationAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$UserClassAnnotationAdapter.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$User"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeHierarchyAdapterTest$Employee.\u003cinit\u003e(java.lang.String, long): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.TypeHierarchyAdapterTest$Manager.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeHierarchyAdapterTest$Company.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeHierarchyAdapterTest$CEO.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder",
      "com.google.gson.functional.TypeHierarchyAdapterTest$EmployeeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$1EmptyRecord.hashCode(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.\u003cinit\u003e(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.maybeForceBuilderInitialization(): void",
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testGsonFromJsonTypeToken(): void": [
      "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.gson.Gson.fromJson(java.io.Reader, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.ParameterizedTypesTest$19.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.functional.ParameterizedTypesTest.assertCorrectlyDeserialized(java.lang.Object): void",
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.io.Reader, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.gson.Gson.fromJson(com.google.gson.stream.JsonReader, com.google.gson.reflect.TypeToken): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Truck.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest.arrayOf(java.lang.Object[]): java.lang.Object[]",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.getExpectedJson(): java.lang.String",
      "com.google.gson.functional.ParameterizedTypesTest$12.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.ParameterizedTypesTest$12.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.\u003cinit\u003e(java.lang.Number, java.lang.Number[], java.util.List, java.util.List[], java.util.List, java.util.List[]): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.toBuilder(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clone(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.JsonObject.remove(java.lang.String): com.google.gson.JsonElement": [
      "com.google.gson.internal.LinkedTreeMap.remove(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.ReflectionAccessTest.loadClassWithDifferentClassLoader(java.lang.Class): java.lang.Class": [
      "java.security.ProtectionDomain.getCodeSource(): java.security.CodeSource",
      "java.lang.Class.getProtectionDomain(): java.security.ProtectionDomain",
      "java.security.CodeSource.getLocation(): java.net.URL",
      "java.net.URLClassLoader.loadClass(java.lang.String): java.lang.Class",
      "java.net.URLClassLoader.\u003cinit\u003e(java.net.URL[], java.lang.ClassLoader): void",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$2.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictNameValueSeparatorWithSkipValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.includeField(java.lang.reflect.Field, boolean): boolean": [
      "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean",
      "com.google.gson.internal.Excluder.excludeClass(java.lang.Class, boolean): boolean",
      "java.lang.reflect.Field.getType(): java.lang.Class"
    ],
    "com.google.gson.functional.ArrayTest.testMultidimensionalArraysDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest$ClassWithContainersOfBaseFields.\u003cinit\u003e(java.util.Collection, java.util.Map): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.getNameThatTestsCaseFormatCount(): int": [
      "com.google.protobuf.LazyStringList.size(): int"
    ],
    "com.google.gson.internal.reflect.Java17ReflectionHelperTest.testJava17Record(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.ObjectArraySubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.reflect.ReflectionHelper.getRecordComponentNames(java.lang.Class): java.lang.String[]",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "com.google.gson.internal.reflect.ReflectionHelper.isRecord(java.lang.Class): boolean",
      "com.google.gson.internal.reflect.ReflectionHelper.getCanonicalRecordConstructor(java.lang.Class): java.lang.reflect.Constructor",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Class.forName(java.lang.String): java.lang.Class",
      "java.lang.reflect.Constructor.getParameterTypes(): java.lang.Class[]",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement): java.lang.String"
    ],
    "com.google.gson.JsonPrimitive.getAsBigInteger(): java.math.BigInteger": [
      "com.google.gson.internal.NumberLimits.parseBigInteger(java.lang.String): java.math.BigInteger",
      "java.lang.Number.longValue(): long",
      "java.math.BigInteger.valueOf(long): java.math.BigInteger",
      "com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive): boolean",
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$11(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.functional.EnumTest$InterchangedToString.\u003cinit\u003e(java.lang.String, int, java.lang.String): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.JsonObject.\u003cinit\u003e(): void": [
      "com.google.gson.JsonElement.\u003cinit\u003e(): void",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(boolean): void"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.common.truth.BooleanSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.\u003cinit\u003e(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonObjectAsNumber$26(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.bind.TypeAdapters$10.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$10.read(com.google.gson.stream.JsonReader): java.util.concurrent.atomic.AtomicIntegerArray"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$B.\u003cinit\u003e(java.lang.String): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.nextDouble(): double": [
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peekStack(): java.lang.Object",
      "java.lang.StringBuilder.append(double): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeReader.popStack(): java.lang.Object",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.JsonPrimitive.getAsDouble(): double",
      "com.google.gson.internal.bind.JsonTreeReader.locationString(): java.lang.String",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Double.isNaN(double): boolean",
      "com.google.gson.stream.MalformedJsonException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.isLenient(): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.Double.isInfinite(double): boolean"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.getDefaultInstanceForType(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$SimpleProto"
    ],
    "com.example.GenericClasses$DummyClass.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parser(): com.google.protobuf.Parser": [],
    "com.google.gson.stream.JsonReaderPathTest.skipObjectNames(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.OverrideCoreTypeAdaptersTest$1.read(com.google.gson.stream.JsonReader): java.lang.Boolean"
    ],
    "com.google.gson.functional.EnumTest$Roshambo$3.defeats(): com.google.gson.functional.EnumTest$Roshambo": [],
    "com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$BagOfPrimitiveWrappers.\u003cinit\u003e(java.lang.Long, java.lang.Integer, java.lang.Boolean): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.common.TestTypes$BagOfPrimitiveWrappers.getExpectedJson(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.TypeAdapters$1.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ExposeFieldsTest.setUp(): void": [
      "com.google.gson.GsonBuilder.excludeFieldsWithoutExposeAnnotation(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.ExposeFieldsTest$SomeInterfaceInstanceCreator.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseFrom(java.io.InputStream): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.$values(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type[]": [],
    "com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.buildPartial(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String": [
      "com.google.gson.stream.JsonReader.getPath(boolean): java.lang.String"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect(): void": [
      "com.google.gson.GsonBuilder.enableComplexMapKeySerialization(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$6.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$Point.\u003cinit\u003e(int, int): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.functional.MapAsArrayTypeAdapterTest$6.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical(): void": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$Foo.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newTypeAdapter(java.lang.String): com.google.gson.TypeAdapter",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newSerializer(java.lang.String): com.google.gson.JsonSerializer",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newDeserializer(java.lang.String): com.google.gson.JsonDeserializer",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getParserForType(): com.google.protobuf.Parser": [],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType.values(): com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType[]": [
      "[Lcom.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType;.clone(): java.lang.Object"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter$1.\u003cinit\u003e(): void": [
      "java.io.Writer.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.getPath(boolean): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelayedDelegatingFactory.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$ArrayOfObjects.getExpectedJson(): java.lang.String",
      "com.google.gson.common.TestTypes$ArrayOfObjects.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$6.read(com.google.gson.stream.JsonReader): java.lang.Number": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "java.lang.Short.valueOf(short): java.lang.Short",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.stream.JsonWriterTest.testSetStrictnessNull(): void": [
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.JsonArray.deepCopy(): com.google.gson.JsonElement": [
      "com.google.gson.JsonArray.deepCopy(): com.google.gson.JsonArray"
    ],
    "com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Double.doubleValue(): double",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Double.isInfinite(double): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.ConcurrencyTest$2.\u003cinit\u003e(com.google.gson.functional.ConcurrencyTest, java.util.concurrent.CountDownLatch, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.CountDownLatch): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder": [
      "com.google.gson.GsonBuilder.setFormattingStyle(com.google.gson.FormattingStyle): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.internal.Streams$AppendableWriter.flush(): void": [],
    "com.google.gson.functional.EscapingTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapterTest$1.read(com.google.gson.stream.JsonReader): java.lang.String": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType(): void": [
      "com.google.gson.functional.JsonTreeTest$SubTypeOfBagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String, float): void",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonObject.entrySet(): java.util.Set",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement",
      "com.google.gson.functional.JsonTreeTest.assertContains(com.google.gson.JsonObject, com.google.gson.JsonPrimitive): void",
      "com.google.gson.JsonElement.isJsonObject(): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.stream.JsonReaderTest.assertDocument(java.lang.String, java.lang.Object[]): void": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.common.truth.ClassSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Class): com.google.common.truth.ClassSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.stream.JsonReaderPathTest.path(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getUnknownFields(): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.createAdapter(com.google.gson.internal.ConstructorConstructor, java.lang.Class): java.lang.Object": [
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "com.google.gson.internal.ObjectConstructor.construct(): java.lang.Object",
      "com.google.gson.internal.ConstructorConstructor.get(com.google.gson.reflect.TypeToken): com.google.gson.internal.ObjectConstructor"
    ],
    "com.google.gson.internal.LinkedTreeMap.writeReplace(): java.lang.Object": [
      "java.util.LinkedHashMap.\u003cinit\u003e(java.util.Map): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type$1.findValueByNumber(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.forNumber(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$13.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolder.\u003cinit\u003e(java.lang.String, java.lang.String): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.CustomTypeAdaptersTest$13.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances(): void": [
      "com.google.gson.common.TestTypes$ClassWithBaseArrayField.\u003cinit\u003e(com.google.gson.common.TestTypes$Base[]): void",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.common.TestTypes$SubSerializer.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonArray.iterator(): java.util.Iterator",
      "com.google.gson.common.TestTypes$BaseSerializer.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "java.util.Iterator.hasNext(): boolean"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$7.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.StreamingTypeAdaptersTest$Person): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.example.EnumClassWithSerializedName.\u003cinit\u003e(java.lang.String, int): void": [
      "java.lang.Enum.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.stream.JsonWriter.isTrustedNumberType(java.lang.Class): boolean": [],
    "com.google.gson.internal.sql.SqlTimestampTypeAdapter$1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing$7.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapter.toJson(java.io.Writer, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor): void": [
      "java.util.concurrent.ConcurrentHashMap.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest.testAsLongsOrDoubles(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.GsonBuilder.setObjectToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.GsonBuilder.setNumberToNumberStrategy(com.google.gson.ToNumberStrategy): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.nextInt(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextLong(): long",
      "com.google.gson.internal.bind.JsonTreeReader.nextDouble(): double",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$1000(): com.google.protobuf.Internal$LongList": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.emptyLongList(): com.google.protobuf.Internal$LongList"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.build(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data"
    ],
    "com.google.gson.metrics.BagOfPrimitivesDeserializationBenchmark.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.metrics.BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters$27.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$27.read(com.google.gson.stream.JsonReader): java.util.Locale"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.retainAll(java.util.Collection): boolean": [
      "java.util.ArrayList.retainAll(java.util.Collection): boolean"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonSerializer$Serializer.serialize(java.util.List, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictNonFiniteDoubles(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void"
    ],
    "com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.hashCode(): int": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasLongTimestamp(): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getCountryCode5F55(): java.lang.String",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasMonth(): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getMonth(): int",
      "com.google.protobuf.UnknownFieldSet.hashCode(): int",
      "com.google.protobuf.Internal.hashLong(long): int",
      "java.lang.String.hashCode(): int",
      "java.lang.Object.hashCode(): int",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasYear(): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getLongTimestamp(): long",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.hasCountryCode5F55(): boolean",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getDescriptor(): com.google.protobuf.Descriptors$Descriptor",
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getYear(): int"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.NullObjectAndFieldTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.NullObjectAndFieldTest$ObjectWithField"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$11.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolder.\u003cinit\u003e(java.lang.String, java.lang.String): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "java.util.Set.add(java.lang.Object): boolean",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.CustomTypeAdaptersTest$11.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void",
      "java.util.HashSet.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.lambda$testNameAsTopLevelValue$0(com.google.gson.internal.bind.JsonTreeWriter): void": [
      "com.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicBoolean(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.concurrent.atomic.AtomicBoolean.get(): boolean",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite.charAt(int): char": [],
    "com.google.gson.Strictness.\u003cclinit\u003e(): void": [
      "com.google.gson.Strictness.$values(): com.google.gson.Strictness[]",
      "com.google.gson.Strictness.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.common.TestTypes$PrimitiveArray.\u003cinit\u003e(long[]): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization(): void": [
      "com.google.gson.functional.ParameterizedTypesTest$4.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.functional.ParameterizedTypesTest$4.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.functional.ParameterizedTypesTest$MultiParameters.\u003cinit\u003e(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Float.valueOf(float): java.lang.Float"
    ],
    "com.google.gson.stream.JsonReaderTest.testFailWithPositionOverUnquotedString(): void": [
      "com.google.gson.stream.JsonReaderTest.testFailWithPosition(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.internal.bind.TypeAdapters$18.write(com.google.gson.stream.JsonWriter, com.google.gson.internal.LazilyParsedNumber): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.interceptors.InterceptorFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.Class.getAnnotation(java.lang.Class): java.lang.annotation.Annotation",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.gson.interceptors.InterceptorFactory$InterceptorAdapter.\u003cinit\u003e(com.google.gson.TypeAdapter, com.google.gson.interceptors.Intercept): void"
    ],
    "com.google.gson.FieldAttributes.getDeclaredClass(): java.lang.Class": [
      "java.lang.reflect.Field.getType(): java.lang.Class"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.\u003cinit\u003e(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.maybeForceBuilderInitialization(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$800(): com.google.protobuf.Internal$LongList"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A$JsonAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A$JsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A): void"
    ],
    "com.google.gson.functional.ExposeFieldsTest$ClassWithInterfaceField.\u003cinit\u003e(com.google.gson.functional.ExposeFieldsTest$SomeInterface): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$CyclicBase.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithSerializedName.hashCode(): int": [],
    "com.google.gson.functional.InheritanceTest$ClassWithSubInterfacesOfCollection.queueContains(long[]): boolean": [
      "java.util.Queue.contains(java.lang.Object): boolean",
      "java.lang.Long.valueOf(long): java.lang.Long"
    ],
    "com.google.gson.internal.ConstructorConstructor$12.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testNextJsonElement(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.nextName(): java.lang.String",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.internal.bind.JsonTreeReader.endObject(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.bind.JsonTreeReader.beginObject(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextJsonElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.functional.EnumWithObfuscatedTest$Gender.values(): com.google.gson.functional.EnumWithObfuscatedTest$Gender[]": [
      "[Lcom.google.gson.functional.EnumWithObfuscatedTest$Gender;.clone(): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations"
    ],
    "com.google.gson.metrics.PerformanceTest$ClassWithList.\u003cinit\u003e(java.lang.String): void": [
      "java.util.ArrayList.\u003cinit\u003e(int): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.CustomDeserializerTest$DataHolder.getData(): java.lang.String",
      "com.google.gson.functional.CustomDeserializerTest$DataHolder.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [],
    "com.google.gson.functional.MapTest.testMapSerializationWithNullValue(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.MapTest$5.getType(): java.lang.reflect.Type",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$5.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.ReadersWritersTest.testToJsonAppendable(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.Appendable): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.functional.ReadersWritersTest$1CustomAppendable.\u003cinit\u003e(com.google.gson.functional.ReadersWritersTest): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipArrayAfterPeek(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.sql.SqlTypesSupport$1.deserialize(java.util.Date): java.util.Date": [
      "com.google.gson.internal.sql.SqlTypesSupport$1.deserialize(java.util.Date): java.sql.Date"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$14.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming(): void": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$Foo.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newSerializer(java.lang.String): com.google.gson.JsonSerializer",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newDeserializer(java.lang.String): com.google.gson.JsonDeserializer",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest$1.read(com.google.gson.stream.JsonReader): java.lang.Byte": [
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$11.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$11.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.FieldNamingPolicy.valueOf(java.lang.String): com.google.gson.FieldNamingPolicy": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.functional.Java17RecordTest$11LocalRecord.equals(java.lang.Object): boolean": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithCustomClassAdapter$CustomAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$10.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.ReflectionAccessFilterTest$10.serialize(com.google.gson.functional.ReflectionAccessFilterTest$OtherClass, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.EscapingTest.testEscapingObjectFields(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.doesNotContain(java.lang.CharSequence): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.getNameThatTestsCaseFormatCount(): int": [
      "com.google.protobuf.LazyStringList.size(): int"
    ],
    "com.google.gson.internal.sql.SqlTimeTypeAdapter.write(com.google.gson.stream.JsonWriter, java.sql.Time): void": [
      "java.text.DateFormat.format(java.util.Date): java.lang.String",
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.JsonArrayTest.testEqualsOnEmptyArray(): void": [
      "com.google.gson.common.MoreAsserts.assertEqualsAndHashCode(java.lang.Object, java.lang.Object): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$A$JsonAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.valueOf(com.google.protobuf.Descriptors$EnumValueDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.getDescriptor(): com.google.protobuf.Descriptors$EnumDescriptor",
      "com.google.protobuf.Descriptors$EnumValueDescriptor.getType(): com.google.protobuf.Descriptors$EnumDescriptor",
      "com.google.protobuf.Descriptors$EnumValueDescriptor.getIndex(): int"
    ],
    "com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader(): void": [
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$38.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.functional.MapTest$38.getType(): java.lang.reflect.Type",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.reflect.Type): java.lang.Object"
    ],
    "com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer(): void": [
      "com.google.gson.GsonBuilder.enableComplexMapKeySerialization(): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.MapTest$MapClass.\u003cinit\u003e(): void",
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.MapTest$MapClass.addSub(java.lang.String, com.google.gson.common.TestTypes$Sub): void",
      "com.google.gson.functional.MapTest$29.\u003cinit\u003e(com.google.gson.functional.MapTest, com.google.gson.JsonElement): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.MapTest$MapClass.addBase(java.lang.String, com.google.gson.common.TestTypes$Base): void",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$SimpleProto"
    ],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest$TestType2.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [],
    "com.google.gson.internal.sql.SqlTypesGsonTest.testSqlDateSerialization(): void": [
      "com.google.gson.GsonBuilder.setDateFormat(java.lang.String): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "java.sql.Date.\u003cinit\u003e(long): void",
      "java.util.Locale.getDefault(): java.util.Locale",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.TimeZone.getDefault(): java.util.TimeZone",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.Locale.setDefault(java.util.Locale): void",
      "java.sql.Date.getTime(): long"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipValueAfterEndOfDocument(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$4.read(com.google.gson.stream.JsonReader): java.lang.Boolean": [
      "java.lang.Boolean.valueOf(java.lang.String): java.lang.Boolean",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextNull(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.build(): com.google.protobuf.MessageLite": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomTypeAdaptersTest$2.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.common.TestTypes$ClassWithCustomTypeConverter"
    ],
    "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader": [],
    "com.google.gson.JsonPrimitiveTest.testValidJsonOnToString(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.toString(): java.lang.String",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonArrayAsLongWrapper$8(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.common.TestTypes$ClassWithArray.\u003cinit\u003e(java.lang.Object[]): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void": [
      "com.google.gson.JsonElement.\u003cinit\u003e(): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.DefaultTypeAdaptersTest.assertEqualsDate(java.util.Date, int, int, int): void",
      "com.google.gson.functional.DefaultTypeAdaptersTest.assertEqualsTime(java.util.Date, int, int, int): void"
    ],
    "com.google.gson.internal.bind.util.ISO8601Utils.checkOffset(java.lang.String, int, char): boolean": [
      "java.lang.String.charAt(int): char",
      "java.lang.String.length(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.\u003cinit\u003e(): void": [
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.maybeForceBuilderInitialization(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Item.toString(): java.lang.String": [
      "java.lang.StringBuilder.append(long): java.lang.StringBuilder",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setInnerMessage2(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.protobuf.SingleFieldBuilderV3.setMessage(com.google.protobuf.AbstractMessage): com.google.protobuf.SingleFieldBuilderV3"
    ],
    "com.google.gson.JsonPrimitive.deepCopy(): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.deepCopy(): com.google.gson.JsonPrimitive"
    ],
    "com.example.EnumClass.values(): com.example.EnumClass[]": [
      "[Lcom.example.EnumClass;.clone(): java.lang.Object"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$9(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$13.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Container.\u003cinit\u003e(): void": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Subclass.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest$Department.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonObjectTest.testKeySet(): void": [
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "java.util.Iterator.remove(): void",
      "com.google.common.truth.Ordered.inOrder(): void",
      "java.util.Iterator.next(): java.lang.Object",
      "java.util.ArrayDeque.\u003cinit\u003e(java.util.Collection): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void",
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Boolean): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "java.util.Deque.getFirst(): java.lang.Object",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.util.Set.iterator(): java.util.Iterator",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonObject.size(): int",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.keySet(): java.util.Set",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "java.util.ArrayList.\u003cinit\u003e(java.util.Collection): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Deque.removeFirst(): java.lang.Object",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper$RecordHelper.getRecordComponentNames(java.lang.Class): java.lang.String[]": [],
    "com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree(): void": [
      "com.google.gson.JsonArray.add(com.google.gson.JsonElement): void",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number): void",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.JsonArray.getAsLong(): long": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsLong(): long"
    ],
    "com.google.gson.internal.LinkedTreeMap.size(): int": [],
    "com.google.gson.FieldNamingPolicy$2.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.FieldNamingPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.FieldNamingPolicy$1): void"
    ],
    "com.google.gson.functional.Java17RecordTest$2LocalRecord.i(): int": [],
    "com.google.gson.regression.OSGiTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$5.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo2PartTypeAdapterFactory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithJsonSerializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.FieldNamingTest.getGsonWithNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.FieldNamingTest$TestNames.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type): java.lang.reflect.WildcardType": [
      "java.lang.reflect.WildcardType.getUpperBounds(): java.lang.reflect.Type[]",
      "com.google.gson.internal.$Gson$Types$WildcardTypeImpl.\u003cinit\u003e(java.lang.reflect.Type[], java.lang.reflect.Type[]): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValuesLenient(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.hasYear(): boolean": [],
    "com.example.ClassWithJsonAdapterAnnotation$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.example.ClassWithJsonAdapterAnnotation$Deserializer.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.example.ClassWithJsonAdapterAnnotation$DummyClass"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictUnquotedNames(): void": [
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteFloats$5(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(float): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.GsonTest.testGetAdapter_Concurrency(): void": [
      "java.util.concurrent.atomic.AtomicInteger.get(): int",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "java.util.concurrent.atomic.AtomicReference.\u003cinit\u003e(): void",
      "com.google.common.truth.Subject.isInstanceOf(java.lang.Class): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonTest$2.\u003cinit\u003e(com.google.gson.GsonTest, java.util.concurrent.atomic.AtomicReference, java.lang.Class, java.util.concurrent.atomic.AtomicInteger): void",
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "java.util.concurrent.atomic.AtomicInteger.\u003cinit\u003e(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.util.concurrent.atomic.AtomicReference.get(): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseFrom(byte[]): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.Parser.parseFrom(byte[]): java.lang.Object"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$MultiParameters.equals(java.lang.Object): boolean": [
      "com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object): boolean"
    ],
    "com.google.gson.GsonTest$9.serialize(com.google.gson.GsonTest$CustomClass2, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.FieldAttributes.hasModifier(int): boolean": [
      "java.lang.reflect.Field.getModifiers(): int"
    ],
    "com.google.gson.JsonObject.getAsJsonPrimitive(java.lang.String): com.google.gson.JsonPrimitive": [
      "com.google.gson.internal.LinkedTreeMap.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.CircularReferenceTest$1.\u003cinit\u003e(com.google.gson.functional.CircularReferenceTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Document.valueOf(java.lang.String): com.google.gson.metrics.ParseBenchmark$Document": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$18.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.beginObject(): void": [
      "com.google.gson.JsonObject.entrySet(): java.util.Set",
      "com.google.gson.internal.bind.JsonTreeReader.peekStack(): java.lang.Object",
      "com.google.gson.internal.bind.JsonTreeReader.expect(com.google.gson.stream.JsonToken): void",
      "java.util.Set.iterator(): java.util.Iterator",
      "com.google.gson.internal.bind.JsonTreeReader.push(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonWriterTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.nextDouble(): double",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextString(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.Parser.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.functional.PrettyPrintingTest.testMultipleArrays(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.TypeAdapterTest.testFromJson_String_TrailingData(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Document.access$700(com.google.gson.metrics.ParseBenchmark$Document): com.google.gson.reflect.TypeToken": [],
    "com.google.gson.functional.ReflectionAccessFilterTest$SubTestClass.\u003cinit\u003e(): void": [
      "com.google.gson.functional.ReflectionAccessFilterTest$SuperTestClass.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails(): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipObjectNameSingleQuoted(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.stream.JsonReader.skipValue(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonObjectTest.testIsEmpty(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.JsonObject.remove(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.JsonObject.isEmpty(): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.functional.Java17RecordTest$3LocalRecord.hashCode(): int": [],
    "com.google.gson.GsonBuilderTest$CustomClass3.\u003cinit\u003e(): void": [
      "com.google.gson.GsonBuilderTest$CustomClass3.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): java.lang.reflect.ParameterizedType": [
      "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.\u003cinit\u003e(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[]): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder",
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$Shape$JsonAdapterFactory.\u003cinit\u003e(): void": [
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$ShapeType.toString(): java.lang.String",
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory.\u003cinit\u003e(java.lang.Class, java.lang.String): void",
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$Shape$JsonAdapterFactory.registerSubtype(java.lang.Class, java.lang.String): com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.functional.UncategorizedTest$2.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.UncategorizedTest$OperationType.values(): com.google.gson.functional.UncategorizedTest$OperationType[]",
      "com.google.gson.functional.UncategorizedTest$OperationType.ordinal(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getInnerMessage2OrBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.GsonTypeAdapterTest$AtomicIntegerTypeAdapter.serialize(java.util.concurrent.atomic.AtomicInteger, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "java.util.concurrent.atomic.AtomicInteger.incrementAndGet(): int",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.TreeTypeAdaptersTest$Id.getValue(): java.lang.String": [],
    "com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming(): void": [
      "com.google.gson.functional.TypeAdapterPrecedenceTest$Foo.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newTypeAdapter(java.lang.String): com.google.gson.TypeAdapter",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newSerializer(java.lang.String): com.google.gson.JsonSerializer",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.functional.TypeAdapterPrecedenceTest.newDeserializer(java.lang.String): com.google.gson.JsonDeserializer",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.valueOf(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.protobuf.CodedInputStream.readTag(): int",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.makeExtensionsImmutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.\u003cinit\u003e(): void",
      "java.util.Collections.unmodifiableList(java.util.List): java.util.List",
      "com.google.protobuf.UnknownFieldSet.newBuilder(): com.google.protobuf.UnknownFieldSet$Builder",
      "com.google.protobuf.UnknownFieldSet$Builder.mergeVarintField(int, int): com.google.protobuf.UnknownFieldSet$Builder",
      "com.google.protobuf.CodedInputStream.readMessage(com.google.protobuf.Parser, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.MessageLite",
      "com.google.protobuf.InvalidProtocolBufferException.setUnfinishedMessage(com.google.protobuf.MessageLite): com.google.protobuf.InvalidProtocolBufferException",
      "com.google.protobuf.InvalidProtocolBufferException.\u003cinit\u003e(java.io.IOException): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseUnknownField(com.google.protobuf.CodedInputStream, com.google.protobuf.UnknownFieldSet$Builder, com.google.protobuf.ExtensionRegistryLite, int): boolean",
      "com.google.protobuf.CodedInputStream.readInt32(): int",
      "com.google.protobuf.CodedInputStream.readEnum(): int",
      "com.google.protobuf.UnknownFieldSet$Builder.build(): com.google.protobuf.UnknownFieldSet"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.nullValue(): com.google.gson.stream.JsonWriter": [
      "com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$15.read(com.google.gson.stream.JsonReader): java.lang.String": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "java.lang.Boolean.toString(boolean): java.lang.String",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.nextNull(): void"
    ],
    "com.google.gson.GsonBuilderTest$1.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1LocalRecordDeserialization.hashCode(): int": [],
    "com.google.gson.it.ShrinkingIT.testNoSerializedName_HasArgsConstructor(): void": [
      "com.google.gson.it.ShrinkingIT.runTest(java.lang.String, com.google.gson.it.ShrinkingIT$TestAction): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest$Employee.\u003cinit\u003e(java.lang.String, com.google.gson.graph.GraphAdapterBuilderTest$Company): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean"
    ],
    "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory$DummyTypeAdapterFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$11.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest$ClassWithThrowingConstructor.\u003cclinit\u003e(): void": [
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.isInitialized(): boolean": [],
    "com.google.gson.functional.EnumTest$1.\u003cinit\u003e(com.google.gson.functional.EnumTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$StringHolderTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.CustomTypeAdaptersTest$StringHolder": [
      "com.google.gson.functional.CustomTypeAdaptersTest$StringHolder.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonElement.getAsString(): java.lang.String"
    ],
    "com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization(): void": [
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setYear(int): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.onChanged(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testBeginObject(): void": [
      "com.google.gson.internal.bind.JsonTreeWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapterTest$3.read(com.google.gson.stream.JsonReader): java.lang.String": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String"
    ],
    "com.google.gson.FieldNamingPolicy$6.translateName(java.lang.reflect.Field): java.lang.String": [
      "java.lang.String.toLowerCase(java.util.Locale): java.lang.String",
      "java.lang.reflect.Field.getName(): java.lang.String",
      "com.google.gson.FieldNamingPolicy$6.separateCamelCase(java.lang.String, char): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder.hasYear(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.protobuf.Parser.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "java.util.concurrent.atomic.AtomicLong.\u003cinit\u003e(long): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.Gson$1.read(com.google.gson.stream.JsonReader): java.lang.Double": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextDouble(): double",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.example.EnumClass.$values(): com.example.EnumClass[]": [],
    "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Boolean): void": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter.getCustSerializedName(com.google.protobuf.DescriptorProtos$FieldOptions, java.lang.String): java.lang.String": [
      "com.google.protobuf.DescriptorProtos$FieldOptions.getExtension(com.google.protobuf.Extension): java.lang.Object",
      "java.util.Iterator.hasNext(): boolean",
      "com.google.common.base.CaseFormat.to(com.google.common.base.CaseFormat, java.lang.String): java.lang.String",
      "java.util.Iterator.next(): java.lang.Object",
      "com.google.protobuf.DescriptorProtos$FieldOptions.hasExtension(com.google.protobuf.Extension): boolean",
      "java.util.Set.iterator(): java.util.Iterator"
    ],
    "com.google.gson.stream.JsonReaderPathTest$Factory.values(): com.google.gson.stream.JsonReaderPathTest$Factory[]": [
      "[Lcom.google.gson.stream.JsonReaderPathTest$Factory;.clone(): java.lang.Object"
    ],
    "com.google.gson.internal.bind.NumberTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.NumberTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.regression.OSGiTest.findManifest(java.lang.String): java.util.jar.Manifest": [
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "java.util.jar.Attributes.getValue(java.lang.String): java.lang.String",
      "org.junit.Assert.fail(java.lang.String): void",
      "java.net.URL.openStream(): java.io.InputStream",
      "java.lang.String.equals(java.lang.Object): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "java.lang.Class.getClassLoader(): java.lang.ClassLoader",
      "java.util.ArrayList.iterator(): java.util.Iterator",
      "java.util.Collections.list(java.util.Enumeration): java.util.ArrayList",
      "java.lang.ClassLoader.getResources(java.lang.String): java.util.Enumeration",
      "java.util.jar.Manifest.getMainAttributes(): java.util.jar.Attributes",
      "java.util.jar.Manifest.\u003cinit\u003e(java.io.InputStream): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.io.InputStream.close(): void",
      "java.util.Iterator.hasNext(): boolean"
    ],
    "com.google.gson.functional.MapTest$Point.toString(): java.lang.String": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilder(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.toBuilder(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers(): void": [
      "com.google.gson.functional.NullObjectAndFieldTest$ClassWithMembers.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseFrom(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString): java.lang.Object"
    ],
    "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker$2.\u003cinit\u003e(): void": [
      "com.google.gson.internal.ReflectionAccessFilterHelper$AccessChecker.\u003cinit\u003e(com.google.gson.internal.ReflectionAccessFilterHelper$1): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest.disable_testCustomSerializersOfSelf(): void": [
      "com.google.gson.functional.CustomTypeAdaptersTest$Foo.\u003cinit\u003e(int, long): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.CustomTypeAdaptersTest.createGsonObjectWithFooTypeAdapter(): com.google.gson.Gson"
    ],
    "com.google.gson.stream.JsonReaderTest.testUnterminatedObject(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.functional.JavaUtilConcurrentAtomicTest$AtomicLongHolder.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$1.write(com.google.gson.stream.JsonWriter, java.lang.Class): void": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.TroubleshootingGuide.createUrl(java.lang.String): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DateTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomTypeAdaptersTest$DateTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.util.Date"
    ],
    "com.google.gson.functional.Java17RecordTest$13LocalRecord.toString(): java.lang.String": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.access$000(com.google.gson.typeadapters.RuntimeTypeAdapterFactory): boolean",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.access$100(com.google.gson.typeadapters.RuntimeTypeAdapterFactory): java.lang.String",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.access$200(com.google.gson.typeadapters.RuntimeTypeAdapterFactory): java.lang.Class",
      "java.util.Map.get(java.lang.Object): java.lang.Object",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.JsonObject.remove(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.TypeAdapter.fromJsonTree(com.google.gson.JsonElement): java.lang.Object"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.aDouble(): double": [],
    "com.google.gson.JsonArray.getAsString(): java.lang.String": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsString(): java.lang.String"
    ],
    "com.google.gson.it.ShrinkingIT.lambda$testUnusedClassRemoved$8(java.lang.Class): void": [
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing$4.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTypeAdapterTest.assertSerialized(java.lang.String, java.lang.Class, boolean, boolean, java.lang.Object): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonTypeAdapterTest$1.\u003cinit\u003e(com.google.gson.GsonTypeAdapterTest): void"
    ],
    "com.google.gson.JsonArray.hashCode(): int": [
      "java.util.ArrayList.hashCode(): int"
    ],
    "com.google.gson.GsonTest$3.\u003cinit\u003e(com.google.gson.GsonTest, java.util.concurrent.CountDownLatch, java.util.concurrent.CountDownLatch): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilder.setLongSerializationPolicy(com.google.gson.LongSerializationPolicy): com.google.gson.GsonBuilder": [
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$Computer2.\u003cinit\u003e(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User2): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonObjectAsMapTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GizmoPartTypeAdapterFactory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.tryMakeAccessible(java.lang.reflect.Constructor): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.reflect.ReflectionHelper.getInaccessibleTroubleshootingSuffix(java.lang.Exception): java.lang.String",
      "java.lang.reflect.Constructor.setAccessible(boolean): void",
      "java.lang.Exception.getMessage(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.reflect.ReflectionHelper.constructorToString(java.lang.reflect.Constructor): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.FieldAttributes.getName(): java.lang.String": [
      "java.lang.reflect.Field.getName(): java.lang.String"
    ],
    "com.google.gson.ToNumberPolicy$2.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.ToNumberPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.ToNumberPolicy$1): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest$4.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldNamingPolicy$7.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.FieldNamingPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.FieldNamingPolicy$1): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.functional.InstanceCreatorTest$1SubTreeSet.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void": [
      "java.util.TreeSet.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonBuilderTest.testRegisterTypeHierarchyAdapterJsonElements(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.JsonParserParameterizedTest.testParse(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testFailWithPositionIsOffsetByBom(): void": [
      "com.google.gson.stream.JsonReaderTest.testFailWithPosition(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder",
      "com.google.protobuf.Internal$LongList.isEmpty(): boolean",
      "com.google.protobuf.Internal$LongList.addAll(java.util.Collection): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$600(): boolean",
      "java.util.List.isEmpty(): boolean",
      "java.util.List.addAll(java.util.Collection): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.addAllMessages(java.lang.Iterable): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields",
      "com.google.protobuf.RepeatedFieldBuilderV3.isEmpty(): boolean",
      "com.google.protobuf.RepeatedFieldBuilderV3.dispose(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.hasName(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$700(com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields): com.google.protobuf.UnknownFieldSet",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureSimplesIsMutable(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getSimplesFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureNumbersIsMutable(): void"
    ],
    "com.google.gson.stream.JsonWriter.beforeValue(): void": [
      "com.google.gson.stream.JsonWriter.replaceTop(int): void",
      "com.google.gson.stream.JsonWriter.newline(): void",
      "java.io.Writer.append(java.lang.CharSequence): java.io.Writer",
      "com.google.gson.stream.JsonWriter.peek(): int",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.example.Main.testExposeAnnotation(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.excludeFieldsWithoutExposeAnnotation(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$21.write(com.google.gson.stream.JsonWriter, java.net.URL): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "java.net.URL.toExternalForm(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.common.TestTypes$StringWrapper.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.getInaccessibleTroubleshootingSuffix(java.lang.Exception): java.lang.String": [
      "java.lang.String.contains(java.lang.CharSequence): boolean",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Exception.getMessage(): java.lang.String",
      "com.google.gson.internal.TroubleshootingGuide.createUrl(java.lang.String): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.String.equals(java.lang.Object): boolean",
      "java.lang.Class.getName(): java.lang.String"
    ],
    "com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Class.getField(java.lang.String): java.lang.reflect.Field"
    ],
    "com.example.Main.testConstructorHasArgs(java.util.function.BiConsumer): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.example.TestExecutor.run(java.util.function.BiConsumer, java.lang.String, java.util.function.Supplier): void",
      "com.google.gson.GsonBuilder.setPrettyPrinting(): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.internal.bind.TreeTypeAdapter.delegate(): com.google.gson.TypeAdapter": [
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$8.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomTypeAdaptersTest$8.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.getHeight(): int": [],
    "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.createFactory(com.google.gson.internal.bind.DefaultDateTypeAdapter): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.TypeAdapters.newFactory(java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest.\u003cclinit\u003e(): void": [
      "com.google.gson.OverrideCoreTypeAdaptersTest$2.\u003cinit\u003e(): void",
      "com.google.gson.OverrideCoreTypeAdaptersTest$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$GsonSkipParser.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap$KeySet.clear(): void": [
      "com.google.gson.internal.LinkedTreeMap.clear(): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Factory.\u003cinit\u003e(java.util.Map): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.lang.ThreadLocal.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testStrictUnquotedStrings(): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReaderTest.assertStrictError(com.google.gson.stream.MalformedJsonException, java.lang.String): void"
    ],
    "com.google.gson.internal.Excluder.disableInnerClassSerialization(): com.google.gson.internal.Excluder": [
      "com.google.gson.internal.Excluder.clone(): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.aChar(): char": [],
    "com.google.gson.functional.InheritanceTest.testSubClassDeserialization(): void": [
      "com.google.gson.functional.InheritanceTest$SubTypeOfNested.getExpectedJson(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelegatingFactory$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.String): void": [
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest$2.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.OverrideCoreTypeAdaptersTest$2.read(com.google.gson.stream.JsonReader): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clear(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.JsonParserTest.testExtraCommasInMaps(): void": [
      "com.google.gson.functional.JsonParserTest$2.\u003cinit\u003e(com.google.gson.functional.JsonParserTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "org.junit.Assert.fail(): void",
      "com.google.gson.functional.JsonParserTest$2.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object": [
      "java.lang.NullPointerException.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.internal.LinkedTreeMap.find(java.lang.Object, boolean): com.google.gson.internal.LinkedTreeMap$Node"
    ],
    "com.google.gson.internal.ConstructorConstructor.newUnsafeAllocator(java.lang.Class): com.google.gson.internal.ObjectConstructor": [
      "com.google.gson.internal.ConstructorConstructor$20.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.ConstructorConstructor$19.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, java.lang.Class): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getDeclaredConstructors(): java.lang.reflect.Constructor[]"
    ],
    "com.google.gson.JsonPrimitiveTest.testStringsAndChar(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.isString(): boolean",
      "java.lang.Character.valueOf(char): java.lang.Character",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Character): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.getAsCharacter(): char",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.GsonBuilder.serializeNulls(): com.google.gson.GsonBuilder",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement): java.lang.String"
    ],
    "com.google.gson.functional.NumberLimitsTest.lambda$testLazilyParsedNumber$9(): void": [
      "com.google.gson.internal.LazilyParsedNumber.longValue(): long",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.toBuilder(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.toBuilder(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.stream.JsonWriterTest.testBoxedBooleans(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.stream.JsonWriter.value(java.lang.Boolean): com.google.gson.stream.JsonWriter",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.JsonParserTest.testParseDeeplyNestedObjects(): void": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.JsonObject.size(): int",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.JsonParserTest.repeat(java.lang.String, int): java.lang.String",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.\u003cinit\u003e(java.util.ArrayList): void": [
      "java.util.AbstractList.\u003cinit\u003e(): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$ObjectWithTypeVariables.toString(java.lang.Number): java.lang.String": [
      "java.lang.Object.toString(): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$8.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode(): void": [
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest$SampleObjectForTest.\u003cinit\u003e(int, java.lang.String, long): void",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest.createGson(com.google.gson.ExclusionStrategy, boolean): com.google.gson.Gson",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest$MyExclusionStrategy.\u003cinit\u003e(java.lang.Class): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonElement.getAsInt(): int",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsLong(): long",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clearHeight(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.onChanged(): void"
    ],
    "com.google.gson.internal.sql.SqlTimestampTypeAdapter.write(com.google.gson.stream.JsonWriter, java.sql.Timestamp): void": [
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setNameBytes(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriter.newline(): void": [
      "com.google.gson.FormattingStyle.getNewline(): java.lang.String",
      "java.io.Writer.write(java.lang.String): void",
      "com.google.gson.FormattingStyle.getIndent(): java.lang.String"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$8.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.ReflectionAccessFilterTest$8.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.ReflectionAccessFilterTest$ClassWithoutNoArgsConstructor): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$4.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.LongSerializationPolicy$2.\u003cinit\u003e(java.lang.String, int): void": [
      "com.google.gson.LongSerializationPolicy.\u003cinit\u003e(java.lang.String, int, com.google.gson.LongSerializationPolicy$1): void"
    ],
    "com.google.gson.GsonBuilderTest.testTransientFieldExclusion(): void": [
      "com.google.gson.GsonBuilder.excludeFieldsWithModifiers(int[]): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilderTest$HasTransients.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.getOuterMessage(): com.google.gson.protobuf.generated.Bag$OuterMessage": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.functional.RawSerializationTest$2.\u003cinit\u003e(com.google.gson.functional.RawSerializationTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testNumbers(): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDotPolicyDeserialiation(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.setFieldNamingPolicy(com.google.gson.FieldNamingPolicy): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilderTest$3.\u003cinit\u003e(com.google.gson.graph.GraphAdapterBuilderTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.example.ClassWithVersionAnnotations.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.reflect.ReflectionHelper.appendExecutableParameters(java.lang.reflect.AccessibleObject, java.lang.StringBuilder): void": [
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.lang.Class.getSimpleName(): java.lang.String",
      "java.lang.reflect.Constructor.getParameterTypes(): java.lang.Class[]",
      "java.lang.reflect.Method.getParameterTypes(): java.lang.Class[]"
    ],
    "com.google.gson.functional.MapTest$23.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldReflectionAdapter.createAccumulator(): java.lang.Object": [
      "com.google.gson.internal.ObjectConstructor.construct(): java.lang.Object"
    ],
    "com.google.gson.functional.MapTest$27.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.VersionExclusionStrategyTest.testSameVersion(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.internal.Excluder.withVersion(double): com.google.gson.internal.Excluder",
      "com.google.gson.internal.Excluder.excludeClass(java.lang.Class, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Class.getField(java.lang.String): java.lang.reflect.Field"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testRuntimeTypeAdapterRecognizeSubtypes(): void": [
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.recognizeSubtypes(): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest$CreditCard.\u003cinit\u003e(java.lang.String, int): void",
      "org.junit.Assert.assertTrue(boolean): void"
    ],
    "com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.internal.Excluder.excludeClass(java.lang.Class, boolean): boolean",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$2.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testFailWithPositionGreaterThanBufferSize(): void": [
      "com.google.gson.stream.JsonReaderTest.testFailWithPosition(java.lang.String, java.lang.String): void",
      "com.google.gson.stream.JsonReaderTest.repeat(char, int): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory$1.read(com.google.gson.stream.JsonReader): com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.keyToString(com.google.gson.JsonElement): java.lang.String": [
      "java.lang.String.valueOf(java.lang.Object): java.lang.String",
      "com.google.gson.JsonPrimitive.isString(): boolean",
      "java.lang.Boolean.toString(boolean): java.lang.String",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.JsonPrimitive.isBoolean(): boolean",
      "java.lang.AssertionError.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.getAsJsonPrimitive(): com.google.gson.JsonPrimitive",
      "com.google.gson.JsonElement.isJsonPrimitive(): boolean",
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "com.google.gson.JsonPrimitive.getAsString(): java.lang.String",
      "com.google.gson.JsonPrimitive.getAsBoolean(): boolean"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.internal.Streams.parse(com.google.gson.stream.JsonReader): com.google.gson.JsonElement": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.Throwable): void"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$8.read(com.google.gson.stream.JsonReader): com.google.gson.functional.ReflectionAccessFilterTest$ClassWithoutNoArgsConstructor": [
      "com.google.gson.functional.ReflectionAccessFilterTest$ClassWithoutNoArgsConstructor.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.internal.sql.SqlTimestampTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.sql.SqlTimestampTypeAdapter.read(com.google.gson.stream.JsonReader): java.sql.Timestamp"
    ],
    "com.google.gson.native_test.ReflectionTest$ClassWithFinalField.nonConstant(): int": [
      "java.lang.String.length(): int"
    ],
    "com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization(): void": [
      "com.google.gson.common.MoreAsserts.assertContains(java.util.Collection, java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.EnumTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.EnumTest$2.\u003cinit\u003e(com.google.gson.functional.EnumTest): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.getMsgBytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.internal.ConstructorConstructor$4.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testDefaultStrictness(): void": [
      "com.google.gson.stream.JsonWriter.getStrictness(): com.google.gson.Strictness",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.stream.JsonReader.skipQuotedValue(char): void": [
      "com.google.gson.stream.JsonReader.fillBuffer(int): boolean",
      "com.google.gson.stream.JsonReader.readEscapeCharacter(): char",
      "com.google.gson.stream.JsonReader.syntaxError(java.lang.String): java.io.IOException"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.build(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.newUninitializedMessageException(com.google.protobuf.Message): com.google.protobuf.UninitializedMessageException",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.isInitialized(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.hasName(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.protobuf.AbstractMessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.metrics.PerformanceTest$ExceptionHolder.\u003cinit\u003e(): void": [
      "com.google.gson.metrics.PerformanceTest$ExceptionHolder.\u003cinit\u003e(java.lang.String, java.lang.String): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Serializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testNextFailuresDoNotAdvance(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.assertUnexpectedStructureError(java.lang.IllegalStateException, java.lang.String, java.lang.String, java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.close(): void",
      "com.google.gson.stream.JsonReader.endArray(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.GsonTypeAdapterTest$ExceptionTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.GsonTypeAdapterTest$ExceptionTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.util.concurrent.atomic.AtomicLong"
    ],
    "com.google.gson.metrics.CollectionsDeserializationBenchmark.\u003cclinit\u003e(): void": [
      "com.google.gson.metrics.CollectionsDeserializationBenchmark$1.\u003cinit\u003e(): void",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.Java17RecordTest.lambda$testRecordBaseClass$9(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.bind.TypeAdapters$18.read(com.google.gson.stream.JsonReader): com.google.gson.internal.LazilyParsedNumber": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.nextNull(): void"
    ],
    "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Character): void": [
      "com.google.gson.JsonElement.\u003cinit\u003e(): void",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "java.lang.Character.toString(): java.lang.String"
    ],
    "com.google.gson.reflect.TypeTokenTest$11.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonReader.syntaxError(java.lang.String): java.io.IOException": [
      "com.google.gson.stream.MalformedJsonException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.TroubleshootingGuide.createUrl(java.lang.String): java.lang.String",
      "com.google.gson.stream.JsonReader.locationString(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$DateTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.util.Date": [
      "com.google.gson.JsonElement.getAsLong(): long",
      "java.sql.Date.\u003cinit\u003e(long): void",
      "java.util.Date.\u003cinit\u003e(long): void"
    ],
    "com.google.gson.functional.MapTest$MapClass.addSub(java.lang.String, com.google.gson.common.TestTypes$Sub): void": [
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.endObject(): com.google.gson.stream.JsonWriter": [
      "java.util.List.isEmpty(): boolean",
      "java.util.List.remove(int): java.lang.Object",
      "java.util.List.size(): int",
      "java.lang.IllegalStateException.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.peek(): com.google.gson.JsonElement"
    ],
    "com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive): boolean": [],
    "com.google.gson.GsonBuilderTest$CustomClass1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNonFiniteNumbers$20(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage2OrBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessageOrBuilder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.protobuf.SingleFieldBuilderV3.getMessageOrBuilder(): com.google.protobuf.MessageOrBuilder"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.internal.JavaVersionTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest$PrincipalTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest$PrincipalTypeAdapter.read(com.google.gson.stream.JsonReader): java.security.Principal"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.util.Locale.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.TypeAdapterTest.lambda$testToJson_ThrowingIOException$1(com.google.gson.TypeAdapter): void": [
      "com.google.gson.TypeAdapter.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.stream.JsonWriterTest.lambda$testNameInArray$4(com.google.gson.stream.JsonWriter): void": [
      "com.google.gson.stream.JsonWriter.name(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.aLong(): long": [],
    "com.google.gson.internal.LinkedTreeMap.rotateRight(com.google.gson.internal.LinkedTreeMap$Node): void": [
      "java.lang.Math.max(int, int): int",
      "com.google.gson.internal.LinkedTreeMap.replaceInParent(com.google.gson.internal.LinkedTreeMap$Node, com.google.gson.internal.LinkedTreeMap$Node): void"
    ],
    "com.google.gson.JsonArrayTest.testDoublePrimitiveAddition(): void": [
      "com.google.gson.JsonArray.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializerDeserializer.serialize(com.google.gson.functional.JsonAdapterSerializerDeserializerTest$User, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.Gson$FutureTypeAdapter.setDelegate(com.google.gson.TypeAdapter): void": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.internal.Streams$AppendableWriter$CurrentWrite.toString(): java.lang.String": [
      "java.lang.String.\u003cinit\u003e(char[]): void"
    ],
    "com.google.gson.stream.JsonWriter.value(java.lang.Boolean): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.writeDeferredName(): void",
      "java.lang.Boolean.booleanValue(): boolean",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beforeValue(): void",
      "java.io.Writer.write(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type.valueOf(java.lang.String): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.JsonElement.getAsLong(): long": [
      "java.lang.UnsupportedOperationException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "java.lang.Class.getSimpleName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.MapTest$Point.equals(java.lang.Object): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testLenientExtraCommasInMaps(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void"
    ],
    "com.google.gson.internal.reflect.Java17ReflectionHelperTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$UserJsonAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$UserJsonAdapter.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$User): void"
    ],
    "com.google.gson.internal.LazilyParsedNumber.longValue(): long": [
      "java.math.BigDecimal.longValue(): long",
      "java.lang.Long.parseLong(java.lang.String): long",
      "com.google.gson.internal.LazilyParsedNumber.asBigDecimal(): java.math.BigDecimal"
    ],
    "com.google.gson.functional.PrettyPrintingTest$1.\u003cinit\u003e(com.google.gson.functional.PrettyPrintingTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.MoreAsserts.isProtectedOrPublic(java.lang.reflect.Method): boolean": [
      "java.lang.reflect.Method.getModifiers(): int",
      "java.lang.reflect.Modifier.isPublic(int): boolean",
      "java.lang.reflect.Modifier.isProtected(int): boolean"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$MyQuantity.\u003cinit\u003e(): void": [
      "com.google.gson.functional.ParameterizedTypesTest$Quantity.\u003cinit\u003e(): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomAccessor.i(): int": [],
    "com.google.gson.it.ShrinkingIT.testNoSerializedName_NoArgsConstructor(): void": [
      "com.google.gson.it.ShrinkingIT.runTest(java.lang.String, com.google.gson.it.ShrinkingIT$TestAction): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonSerializer(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonSerializer.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.getData(int): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "java.util.List.get(int): java.lang.Object"
    ],
    "com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithCustomNames.b(): java.lang.String": [],
    "com.google.gson.internal.LinkedTreeMap.removeInternal(com.google.gson.internal.LinkedTreeMap$Node, boolean): void": [
      "java.lang.Math.max(int, int): int",
      "com.google.gson.internal.LinkedTreeMap$Node.first(): com.google.gson.internal.LinkedTreeMap$Node",
      "com.google.gson.internal.LinkedTreeMap$Node.last(): com.google.gson.internal.LinkedTreeMap$Node",
      "com.google.gson.internal.LinkedTreeMap.removeInternal(com.google.gson.internal.LinkedTreeMap$Node, boolean): void",
      "com.google.gson.internal.LinkedTreeMap.replaceInParent(com.google.gson.internal.LinkedTreeMap$Node, com.google.gson.internal.LinkedTreeMap$Node): void",
      "com.google.gson.internal.LinkedTreeMap.rebalance(com.google.gson.internal.LinkedTreeMap$Node, boolean): void"
    ],
    "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.hashCode(): int": [
      "java.lang.Object.hashCode(): int"
    ],
    "com.google.gson.functional.ObjectTest.testTruncatedDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "org.junit.Assert.fail(): void",
      "com.google.gson.functional.ObjectTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.ObjectTest$2.\u003cinit\u003e(com.google.gson.functional.ObjectTest): void"
    ],
    "com.google.gson.internal.sql.SqlTypesSupport$2.\u003cinit\u003e(java.lang.Class): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapter$DateType.\u003cinit\u003e(java.lang.Class): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage"
    ],
    "com.google.gson.native_test.ReflectionTest.testCustomDefaultConstructor(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.hasName(): boolean": [],
    "com.google.gson.metrics.PerformanceTest.buildJsonForClassWithList(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.parseFrom(java.nio.ByteBuffer): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer): java.lang.Object"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter$CustomAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Integer): void": [
      "java.lang.Integer.intValue(): int",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.ToNumberPolicyTest.testDouble(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter.hashCode(): int": [],
    "com.google.gson.functional.NamingPolicyTest$ClassWithTwoFields.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$7.read(com.google.gson.stream.JsonReader): java.lang.Number": [
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.Throwable): void",
      "com.google.gson.stream.JsonReader.nextNull(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$Sub.\u003cinit\u003e(int, int): void",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ClassWithBaseFields.\u003cinit\u003e(com.google.gson.functional.MoreSpecificTypeSerializationTest$Base): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.stream.JsonWriter.setLenient(boolean): void": [
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void"
    ],
    "com.example.GenericClasses$DummyClass$Adapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.example.GenericClasses$DummyClass$Adapter.read(com.google.gson.stream.JsonReader): com.example.GenericClasses$DummyClass"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.Gson$3.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.Gson$3.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.functional.MapTest.testComplexKeysDeserialization(): void": [
      "com.google.gson.functional.MapTest$31.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.gson.functional.MapTest$31.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$5LocalRecord.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.LongSerializationPolicy.\u003cclinit\u003e(): void": [
      "com.google.gson.LongSerializationPolicy.$values(): com.google.gson.LongSerializationPolicy[]",
      "com.google.gson.LongSerializationPolicy$2.\u003cinit\u003e(java.lang.String, int): void",
      "com.google.gson.LongSerializationPolicy$1.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProtoOrBuilder.getMsg(): java.lang.String": [],
    "com.google.gson.functional.CircularReferenceTest.testCircularSerialization(): void": [
      "java.util.Collection.add(java.lang.Object): boolean",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.functional.CircularReferenceTest$ContainsReferenceToSelfType.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest.createGson(com.google.gson.ExclusionStrategy, boolean): com.google.gson.Gson",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest$MyExclusionStrategy.\u003cinit\u003e(java.lang.Class): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonObject.getAsJsonObject(java.lang.String): com.google.gson.JsonObject": [
      "com.google.gson.internal.LinkedTreeMap.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilderForType(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.doubleValue(): double",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Double.valueOf(java.lang.String): java.lang.Double"
    ],
    "com.google.gson.common.MoreAsserts.getMethodSignature(java.lang.reflect.Method): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.reflect.Method.getName(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "java.lang.Class.getName(): java.lang.String",
      "java.lang.reflect.Method.getParameterTypes(): java.lang.Class[]"
    ],
    "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory.of(java.lang.Class, java.lang.String): com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory": [
      "com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest$RuntimeTypeAdapterFactory.\u003cinit\u003e(java.lang.Class, java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.getId(): java.lang.String": [],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializeJsonArrayAsBigInteger$23(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getParserForType(): com.google.protobuf.Parser": [],
    "com.google.gson.protobuf.ProtoTypeAdapter$Builder.setFieldNameSerializationFormat(com.google.common.base.CaseFormat, com.google.common.base.CaseFormat): com.google.gson.protobuf.ProtoTypeAdapter$Builder": [],
    "com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.CollectionTest$14.\u003cinit\u003e(com.google.gson.functional.CollectionTest): void",
      "com.google.gson.functional.CollectionTest$14.getType(): java.lang.reflect.Type",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$DataOrBuilder.hasData(): boolean": [],
    "com.google.gson.functional.ToNumberPolicyFunctionalTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$UserJsonAdapter.\u003cinit\u003e(): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.toString(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(int): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.$Gson$Types.typeToString(java.lang.reflect.Type): java.lang.String"
    ],
    "com.google.gson.JsonArray.getAsInt(): int": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsInt(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.functional.JavaUtilTest.testCurrency(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "java.util.Currency.getCurrencyCode(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testSet$4(java.util.List): void": [
      "java.util.List.set(int, java.lang.Object): java.lang.Object"
    ],
    "com.example.NoSerializedNameMain.runTestHasArgsConstructor(): java.lang.String": [
      "com.example.TestExecutor.same(java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest.testSkipValue_afterEndOfDocument(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.beginObject(): void",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.internal.bind.JsonTreeReader.endObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.skipValue(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader$1.read(char[], int, int): int": [
      "java.lang.AssertionError.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson$1.\u003cinit\u003e(com.google.gson.Gson): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$7.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$7.write(com.google.gson.stream.JsonWriter, java.lang.String): void"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.contains(java.lang.Object): boolean": [
      "java.util.ArrayList.contains(java.lang.Object): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.common.MoreAsserts.assertOverridesMethods(java.lang.Class, java.lang.Class, java.util.List): void": [
      "java.util.Set.isEmpty(): boolean",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.common.MoreAsserts.isProtectedOrPublic(java.lang.reflect.Method): boolean",
      "java.util.Iterator.next(): java.lang.Object",
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.util.LinkedHashSet.\u003cinit\u003e(): void",
      "java.lang.Class.getDeclaredMethods(): java.lang.reflect.Method[]",
      "com.google.gson.common.MoreAsserts.getMethodSignature(java.lang.reflect.Method): java.lang.String",
      "java.util.Set.add(java.lang.Object): boolean",
      "java.util.Set.remove(java.lang.Object): boolean",
      "java.lang.Class.getSimpleName(): java.lang.String",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.List.iterator(): java.util.Iterator"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.equals(java.lang.Object): boolean": [
      "java.util.ArrayList.equals(java.lang.Object): boolean"
    ],
    "com.google.gson.internal.bind.TypeAdapters$5.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$5.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newInstance(com.google.protobuf.GeneratedMessageV3$UnusedPrivateParameter): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonSyntaxException.\u003cinit\u003e(java.lang.String): void": [
      "com.google.gson.JsonParseException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.parseFrom(com.google.protobuf.CodedInputStream): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.stream.JsonWriter.open(int, char): com.google.gson.stream.JsonWriter": [
      "com.google.gson.stream.JsonWriter.beforeValue(): void",
      "com.google.gson.stream.JsonWriter.push(int): void",
      "java.io.Writer.write(int): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder$Graph.\u003cinit\u003e(java.util.Map): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.util.ArrayDeque.\u003cinit\u003e(): void"
    ],
    "com.google.gson.common.TestTypes$ClassWithCustomTypeConverter.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives, int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo2PartTypeAdapterFactory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo2PartTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo2PartTypeAdapterFactory): void"
    ],
    "com.google.gson.JsonElement.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.ClassWithJsonAdapterAnnotation$Factory$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.example.ClassWithJsonAdapterAnnotation$Factory$1.read(com.google.gson.stream.JsonReader): com.example.ClassWithJsonAdapterAnnotation$DummyClass"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testAddAll$10(java.util.List): void": [
      "java.util.List.addAll(java.util.Collection): boolean",
      "java.util.Collections.singletonList(java.lang.Object): java.util.List"
    ],
    "com.google.gson.functional.InstanceCreatorTest$1.createInstance(java.lang.reflect.Type): com.google.gson.common.TestTypes$Base": [
      "com.google.gson.common.TestTypes$Base.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$6.\u003cinit\u003e(java.lang.reflect.Type): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest.tearDown(): void": [
      "java.util.TimeZone.setDefault(java.util.TimeZone): void",
      "java.util.Locale.setDefault(java.util.Locale): void"
    ],
    "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object": [
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object",
      "java.lang.Class.cast(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.Primitives.wrap(java.lang.Class): java.lang.Class"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest$1CustomSubclass.deepCopy(): com.google.gson.JsonElement": [],
    "com.example.NoSerializedNameMain.runTestNoArgsConstructor(): java.lang.String": [
      "com.example.TestExecutor.same(java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$DelegatingAndOverwriting$DelegatingAdapterFactory.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonPrimitive.getAsString(): java.lang.String": [
      "java.lang.Object.toString(): java.lang.String",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.JsonPrimitive.isBoolean(): boolean",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "com.google.gson.JsonPrimitive.getAsNumber(): java.lang.Number",
      "com.google.gson.JsonPrimitive.isNumber(): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void",
      "java.lang.Boolean.toString(): java.lang.String"
    ],
    "com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.access$300(com.google.gson.typeadapters.RuntimeTypeAdapterFactory): java.util.Map": [],
    "com.google.gson.JsonArray.getAsShort(): short": [
      "com.google.gson.JsonArray.getAsSingleElement(): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsShort(): short"
    ],
    "com.google.gson.internal.ConstructorConstructorTest$AbstractClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.maybeForceBuilderInitialization(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.access$1300(): boolean"
    ],
    "com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.LinkedTreeMap.get(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.LinkedTreeMap.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.LinkedTreeMap.\u003cinit\u003e(): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.internal.LinkedTreeMap.containsKey(java.lang.Object): boolean"
    ],
    "com.google.gson.internal.sql.SqlTimeTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.sql.SqlTimeTypeAdapter.read(com.google.gson.stream.JsonReader): java.sql.Time"
    ],
    "com.google.gson.reflect.TypeToken.get(java.lang.reflect.Type): com.google.gson.reflect.TypeToken": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(java.lang.reflect.Type): void"
    ],
    "com.google.gson.functional.ReadersWritersTest$1CustomAppendable.\u003cinit\u003e(com.google.gson.functional.ReadersWritersTest): void": [
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.UncategorizedTest$OperationType.\u003cclinit\u003e(): void": [
      "com.google.gson.functional.UncategorizedTest$OperationType.$values(): com.google.gson.functional.UncategorizedTest$OperationType[]",
      "com.google.gson.functional.UncategorizedTest$OperationType.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): java.lang.Object": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testEmptyObject(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.beginObject(): void",
      "com.google.gson.internal.bind.JsonTreeReader.endObject(): void",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter.\u003cinit\u003e(com.google.gson.Gson, com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$NumberAsStringAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.DefaultTypeAdaptersTest$NumberAsStringAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.functional.Java17RecordTest.testConstructorRuns(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.Java17RecordTest$5LocalRecord.s(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.Java17RecordTest$5LocalRecord.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder",
      "com.google.protobuf.SingleFieldBuilderV3.clear(): com.google.protobuf.SingleFieldBuilderV3"
    ],
    "com.google.gson.functional.UncategorizedTest$Derived1.\u003cinit\u003e(): void": [
      "com.google.gson.functional.UncategorizedTest$Base.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReaderTest.testSkipValue_name(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.beginObject(): void",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String): void",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.skipValue(): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextString(): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest.testDuplicateJsonProperties(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.Java17RecordTest$4LocalRecord.\u003cinit\u003e(java.lang.Integer, java.lang.Integer): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.Java17RecordTest.lambda$testPrimitiveAdapterNullValue$3(com.google.gson.Gson, java.lang.String): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.internal.sql.SqlTypesSupportTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GizmoPartTypeAdapterFactory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GizmoPartTypeAdapterFactory): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.reflect.TypeTokenTest.lambda$testParameterizedFactory_Invalid$12(): void": [
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$400(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$1.parsePartialFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.\u003cinit\u003e(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): void"
    ],
    "com.google.gson.functional.NumberLimitsTest.testBigIntegerAdapter(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.String.repeat(int): java.lang.String",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.getIdBytes(): com.google.protobuf.ByteString": [],
    "com.google.gson.native_test.ReflectionTest$2.write(com.google.gson.stream.JsonWriter, com.google.gson.native_test.ReflectionTest$ClassWithRegisteredAdapter): void": [
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.EnumTest$Roshambo$1.defeats(): com.google.gson.functional.EnumTest$Roshambo": [],
    "com.google.gson.functional.ObjectTest$ClassWithStaticField.\u003cclinit\u003e(): void": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, java.io.InputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataBuilderList(): java.util.List": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.getDataFieldBuilder(): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.protobuf.RepeatedFieldBuilderV3.getBuilderList(): java.util.List"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.internal.JavaVersion.parseDotted(java.lang.String): int": [
      "java.lang.String.split(java.lang.String, int): java.lang.String[]",
      "java.lang.Integer.parseInt(java.lang.String): int"
    ],
    "com.google.gson.JsonArray.isEmpty(): boolean": [
      "java.util.ArrayList.isEmpty(): boolean"
    ],
    "com.google.gson.GsonTest.testNewBuilderModification(): void": [
      "com.google.gson.Gson.newBuilder(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonTest.assertCustomGson(com.google.gson.Gson): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonTest$12.\u003cinit\u003e(com.google.gson.GsonTest): void",
      "com.google.gson.GsonTest$13.\u003cinit\u003e(com.google.gson.GsonTest): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.GsonTest$9.\u003cinit\u003e(com.google.gson.GsonTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonTest$CustomClass2.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonTest$11.\u003cinit\u003e(com.google.gson.GsonTest): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.GsonTest$10.\u003cinit\u003e(com.google.gson.GsonTest): void",
      "com.google.gson.GsonTest$CustomClass1.\u003cinit\u003e(): void",
      "com.google.gson.GsonTest$8.\u003cinit\u003e(com.google.gson.GsonTest): void"
    ],
    "com.google.gson.internal.LazilyParsedNumber.writeReplace(): java.lang.Object": [
      "com.google.gson.internal.LazilyParsedNumber.asBigDecimal(): java.math.BigDecimal"
    ],
    "com.google.gson.Gson.fromJson(java.io.Reader, java.lang.Class): java.lang.Object": [
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "java.lang.Class.cast(java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.fromJson(java.io.Reader, com.google.gson.reflect.TypeToken): java.lang.Object",
      "com.google.gson.internal.Primitives.wrap(java.lang.Class): java.lang.Class"
    ],
    "com.google.gson.internal.bind.TypeAdapters$29.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "java.lang.Class.isAssignableFrom(java.lang.Class): boolean",
      "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.\u003cinit\u003e(java.lang.Class): void",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "java.lang.Class.isEnum(): boolean",
      "java.lang.Class.getSuperclass(): java.lang.Class"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$Person.hashCode(): int": [
      "java.lang.String.hashCode(): int"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testNameInArray(): void": [
      "com.google.gson.JsonElement.toString(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.internal.bind.JsonTreeWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization(): void": [
      "com.google.gson.functional.CircularReferenceTest$ClassWithSelfReference.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.CircularReferenceTest$1.\u003cinit\u003e(com.google.gson.functional.CircularReferenceTest): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getOuterMessageOrBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.getDefaultInstance(): com.google.gson.protobuf.generated.Bag$OuterMessage",
      "com.google.protobuf.SingleFieldBuilderV3.getMessageOrBuilder(): com.google.protobuf.MessageOrBuilder"
    ],
    "com.google.gson.JsonPrimitiveTest.testShortEqualsInteger(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Short.valueOf(short): java.lang.Short",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonNull.deepCopy(): com.google.gson.JsonNull": [],
    "com.google.gson.typeadapters.UtcDateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.util.Date): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.typeadapters.UtcDateTypeAdapter.format(java.util.Date, boolean, java.util.TimeZone): java.lang.String",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.functional.MapTest$Point.hashCode(): int": [],
    "com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys(): void": [
      "com.google.gson.functional.MapTest$35.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "org.junit.Assert.fail(): void",
      "com.google.gson.functional.MapTest$35.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.protobuf.generated.Bag.\u003cclinit\u003e(): void": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.\u003cinit\u003e(com.google.protobuf.Descriptors$Descriptor, java.lang.String[]): void",
      "java.util.List.get(int): java.lang.Object",
      "com.google.protobuf.Descriptors$FileDescriptor.internalUpdateFileDescriptor(com.google.protobuf.Descriptors$FileDescriptor, com.google.protobuf.ExtensionRegistry): void",
      "com.google.protobuf.ExtensionRegistry.add(com.google.protobuf.GeneratedMessage$GeneratedExtension): void",
      "com.google.protobuf.Descriptors$Descriptor.getNestedTypes(): java.util.List",
      "com.google.gson.protobuf.generated.Annotations.getDescriptor(): com.google.protobuf.Descriptors$FileDescriptor",
      "com.google.protobuf.ExtensionRegistry.newInstance(): com.google.protobuf.ExtensionRegistry",
      "com.google.protobuf.Descriptors$FileDescriptor.getMessageTypes(): java.util.List",
      "com.google.protobuf.Descriptors$FileDescriptor.internalBuildGeneratedFileFrom(java.lang.String[], com.google.protobuf.Descriptors$FileDescriptor[]): com.google.protobuf.Descriptors$FileDescriptor",
      "com.google.gson.protobuf.generated.Bag.getDescriptor(): com.google.protobuf.Descriptors$FileDescriptor"
    ],
    "com.google.gson.internal.sql.SqlTimeTypeAdapter.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.sql.SqlTimeTypeAdapter$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testSetGetFormattingStyle(): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.FormattingStyle.withIndent(java.lang.String): com.google.gson.FormattingStyle",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.setFormattingStyle(com.google.gson.FormattingStyle): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "com.google.gson.FormattingStyle.withNewline(java.lang.String): com.google.gson.FormattingStyle",
      "com.google.gson.FormattingStyle.getNewline(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.getFormattingStyle(): com.google.gson.FormattingStyle",
      "com.google.common.truth.Subject.isSameInstanceAs(java.lang.Object): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.OverrideCoreTypeAdaptersTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Boolean): void"
    ],
    "com.google.gson.functional.TypeAdapterPrecedenceTest$2.\u003cinit\u003e(com.google.gson.functional.TypeAdapterPrecedenceTest, java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.getSimples(int): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "java.util.List.get(int): java.lang.Object"
    ],
    "com.google.gson.functional.RawSerializationTest.testCollectionOfObjects(): void": [
      "com.google.gson.functional.RawSerializationTest$Foo.\u003cinit\u003e(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.JsonArrayTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializingNonZeroDecimalPointValuesAsIntegerFails$27(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField(): void": [
      "com.google.gson.functional.InstanceCreatorTest$3.\u003cinit\u003e(com.google.gson.functional.InstanceCreatorTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.native_test.ReflectionTest$2.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.native_test.ReflectionTest$2.read(com.google.gson.stream.JsonReader): com.google.gson.native_test.ReflectionTest$ClassWithRegisteredAdapter"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.value(java.lang.String): com.google.gson.stream.JsonWriter": [
      "com.google.gson.internal.bind.JsonTreeWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotationsOrBuilder.hasInnerMessage2(): boolean": [],
    "com.google.gson.metrics.ParseBenchmark$Link.toString(): java.lang.String": [],
    "com.google.gson.GenericArrayTypeTest$3.\u003cinit\u003e(com.google.gson.GenericArrayTypeTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Tweet.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.setCountryCode5F55(java.lang.String): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.onChanged(): void",
      "java.lang.NullPointerException.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$GetAdapterDelegation.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.typeadapters.UtcDateTypeAdapter.\u003cinit\u003e(): void": [
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone",
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.GsonVersionDiagnosticsTest$1.\u003cinit\u003e(com.google.gson.functional.GsonVersionDiagnosticsTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$6.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C$JsonAdapterFactory$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.JsonPrimitiveTest.testDeepCopy(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isSameInstanceAs(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.deepCopy(): com.google.gson.JsonPrimitive",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest.testJsonDeserializer_SubclassBackwardCompatibility(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$4.\u003cinit\u003e(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Container.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$5.\u003cinit\u003e(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest): void"
    ],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest$TestType.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.RecursiveTypesResolveTest.testRecursiveResolveSimple(): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.common.truth.Subject.isNotNull(): void",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipTopLevelUnquotedString(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReaderTest.repeat(char, int): java.lang.String",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateFormatWithTimezone(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date, boolean, java.util.TimeZone): java.lang.String",
      "java.util.Date.\u003cinit\u003e(long): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.TimeZone.getTimeZone(java.lang.String): java.util.TimeZone"
    ],
    "com.google.gson.internal.bind.TypeAdapters.newFactoryForMultipleTypes(java.lang.Class, java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.TypeAdapters$33.\u003cinit\u003e(java.lang.Class, java.lang.Class, com.google.gson.TypeAdapter): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.GeneratedMessageV3.parseWithIOException(com.google.protobuf.Parser, com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.Message"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.parseFrom(byte[]): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data": [
      "com.google.protobuf.Parser.parseFrom(byte[]): java.lang.Object"
    ],
    "com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.GsonBuilder.generateNonExecutableJson(): com.google.gson.GsonBuilder",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.value(long): com.google.gson.stream.JsonWriter": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement): void"
    ],
    "com.google.gson.metrics.ParseBenchmark.resourceToString(java.lang.String): java.lang.String": [
      "java.util.zip.ZipFile.getInputStream(java.util.zip.ZipEntry): java.io.InputStream",
      "java.util.zip.ZipFile.\u003cinit\u003e(java.io.File): void",
      "java.io.StringWriter.write(char[], int, int): void",
      "com.google.gson.metrics.ParseBenchmark.getResourceFile(java.lang.String): java.io.File",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "java.io.Reader.read(char[]): int",
      "java.io.InputStreamReader.\u003cinit\u003e(java.io.InputStream, java.nio.charset.Charset): void",
      "java.util.zip.ZipFile.getEntry(java.lang.String): java.util.zip.ZipEntry",
      "java.util.zip.ZipFile.close(): void",
      "java.io.Reader.close(): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.InternationalizationTest.testSupplementaryUnicodeEscapedDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.lang.String.\u003cinit\u003e(int[], int, int): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.GsonBuilder.setDateFormat(int): com.google.gson.GsonBuilder": [],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testDelegating_SameFactoryInstance(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory.\u003cinit\u003e(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory$Factory.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory): com.google.gson.GsonBuilder",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.GsonVersionDiagnosticsTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$20.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$20.write(com.google.gson.stream.JsonWriter, java.lang.StringBuffer): void"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.Gson.getAdapter(java.lang.Class): com.google.gson.TypeAdapter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "java.lang.Object.getClass(): java.lang.Class",
      "com.google.gson.stream.JsonWriter.endObject(): com.google.gson.stream.JsonWriter",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.MixedStreamTest.testWriteMixedStreamed(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, com.google.gson.stream.JsonWriter): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.setIndent(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.access$000(com.google.gson.typeadapters.RuntimeTypeAdapterFactory): boolean": [],
    "com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization(): void": [
      "com.google.gson.functional.VersioningTest.gsonWithVersion(double): com.google.gson.Gson",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod(): void": [
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.VersionExclusionStrategyTest.testOlderVersion(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.internal.Excluder.withVersion(double): com.google.gson.internal.Excluder",
      "com.google.gson.internal.Excluder.excludeClass(java.lang.Class, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Class.getField(java.lang.String): java.lang.reflect.Field"
    ],
    "com.google.gson.JsonNull.\u003cinit\u003e(): void": [
      "com.google.gson.JsonElement.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.ConstructorConstructor$7.construct(): java.lang.Object": [
      "com.google.gson.JsonIOException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.graph.GraphAdapterBuilder.\u003cinit\u003e(): void": [
      "java.util.Collections.emptyList(): java.util.List",
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.internal.ConstructorConstructor.\u003cinit\u003e(java.util.Map, boolean, java.util.List): void",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory$Factory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class",
      "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory$Factory$1.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactory$Factory, com.google.gson.TypeAdapter): void",
      "com.google.gson.Gson.getDelegateAdapter(com.google.gson.TypeAdapterFactory, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.GsonTest$2DummyAdapter.toString(): java.lang.String": [],
    "com.google.gson.functional.ReflectionAccessFilterTest.testBlockAllCollectionInterface(): void": [
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "java.util.List.get(int): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.ReflectionAccessFilterTest$12.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void",
      "java.lang.Double.valueOf(double): java.lang.Double"
    ],
    "com.google.gson.functional.PrimitiveTest.testByteDeserialization(): void": [
      "com.google.common.truth.PrimitiveByteArraySubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.Truth.assertThat(byte[]): com.google.common.truth.PrimitiveByteArraySubject",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.lang.Byte.byteValue(): byte"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.maybeForceBuilderInitialization(): void",
      "com.google.protobuf.GeneratedMessageV3$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.internalGetFieldAccessorTable(): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable": [
      "com.google.protobuf.GeneratedMessageV3$FieldAccessorTable.ensureFieldAccessorsInitialized(java.lang.Class, java.lang.Class): com.google.protobuf.GeneratedMessageV3$FieldAccessorTable"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setNumbers(int, long): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "com.google.protobuf.Internal$LongList.setLong(int, long): long",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureNumbersIsMutable(): void"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.Date.\u003cinit\u003e(long): void",
      "java.util.Date.toString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$10.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.functional.CustomTypeAdaptersTest$10.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): byte[]"
    ],
    "com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter$1.\u003cinit\u003e(com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter, java.lang.Class): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonArrayAsListTest.testClear(): void": [
      "com.google.gson.JsonArray.asList(): java.util.List",
      "java.util.List.clear(): void",
      "com.google.gson.JsonArray.add(java.lang.Number): void",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonArray.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.bind.NumberTypeAdapter$1.\u003cinit\u003e(com.google.gson.internal.bind.NumberTypeAdapter): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.Excluder.isStatic(java.lang.Class): boolean": [
      "java.lang.Class.getModifiers(): int"
    ],
    "com.google.gson.stream.JsonWriterTest.testNameInArray(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.close(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest$2.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.functional.StreamingTypeAdaptersTest$2.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.StreamingTypeAdaptersTest$Person): void"
    ],
    "com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization(): void": [
      "com.google.gson.functional.ExposeFieldsTest$ClassWithInterfaceField.\u003cinit\u003e(com.google.gson.functional.ExposeFieldsTest$SomeInterface): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.functional.ExposeFieldsTest$SomeObject.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testFailWithPosition(java.lang.String, java.lang.String): void": [
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonReader.skipValue(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.\u003cclinit\u003e(): void": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$1.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest.testFirstNameIsChosenForSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.Java17RecordTest$RecordWithCustomNames.\u003cinit\u003e(java.lang.String, java.lang.String): void"
    ],
    "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.testFormattingInFr(): void": [
      "com.google.gson.internal.bind.DefaultDateTypeAdapterTest.assertFormattingAlwaysEmitsUsLocale(java.util.Locale): void"
    ],
    "com.example.ClassWithAdapter.\u003cinit\u003e(int): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.GsonTest$7.\u003cinit\u003e(com.google.gson.GsonTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonArray.get(int): com.google.gson.JsonElement"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testExcludePrecedence(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$4.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.GsonBuilder.setExclusionStrategies(com.google.gson.ExclusionStrategy[]): com.google.gson.GsonBuilder",
      "com.google.common.truth.IntegerSubject.isNull(): void",
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Boolean): void",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$DelegatingAndOverwriting.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.isInitialized(): boolean": [],
    "com.google.gson.reflect.TypeTokenTest$1Enclosing$5.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest$1Enclosing): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.createAccumulator(): java.lang.Object": [],
    "com.google.gson.graph.GraphAdapterBuilder$Graph.nextName(): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.util.Map.size(): int",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Integer.toHexString(int): java.lang.String"
    ],
    "com.google.gson.interceptors.Intercept.postDeserialize(): java.lang.Class": [],
    "com.google.gson.internal.ConstructorConstructor$13.construct(): java.lang.Object": [
      "java.util.ArrayList.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.util.ISO8601Utils.indexOfNonDigit(java.lang.String, int): int": [
      "java.lang.String.charAt(int): char",
      "java.lang.String.length(): int"
    ],
    "com.google.gson.JsonArrayAsListTest.lambda$testSet$3(java.util.List): void": [
      "java.util.List.set(int, java.lang.Object): java.lang.Object",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage": [
      "com.google.protobuf.Parser.parseFrom(java.nio.ByteBuffer, com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.hasNIdCt(): boolean": [],
    "com.example.ClassWithJsonAdapterAnnotation$Adapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.example.ClassWithJsonAdapterAnnotation$Adapter.write(com.google.gson.stream.JsonWriter, com.example.ClassWithJsonAdapterAnnotation$DummyClass): void"
    ],
    "com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization(): void": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.gson.common.TestTypes$ClassWithBaseArrayField.\u003cinit\u003e(com.google.gson.common.TestTypes$Base[]): void",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.JsonArray.iterator(): java.util.Iterator",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonArray(): com.google.gson.JsonArray",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.util.Iterator.hasNext(): boolean",
      "java.util.Iterator.next(): java.lang.Object"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.native_test.Java17RecordReflectionTest$1.write(com.google.gson.stream.JsonWriter, com.google.gson.native_test.Java17RecordReflectionTest$RecordWithRegisteredAdapter): void"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.access$200(com.google.gson.typeadapters.RuntimeTypeAdapterFactory): java.lang.Class": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setSimples(int, com.google.gson.protobuf.generated.Bag$SimpleProto$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "java.util.List.set(int, java.lang.Object): java.lang.Object",
      "com.google.protobuf.RepeatedFieldBuilderV3.setMessage(int, com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.build(): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureSimplesIsMutable(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.addAllNameThatTestsCaseFormat(java.lang.Iterable): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.AbstractMessageLite$Builder.addAll(java.lang.Iterable, java.util.List): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.ensureNameThatTestsCaseFormatIsMutable(): void"
    ],
    "com.google.gson.functional.InterfaceTest$TestObjectWrapper.\u003cinit\u003e(com.google.gson.functional.InterfaceTest$TestObjectInterface): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.functional.TypeHierarchyAdapterTest$ManagerAdapter.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.TypeHierarchyAdapterTest$Manager.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeHierarchyAdapterTest$EmployeeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testBoolMaisValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "com.google.gson.internal.bind.JsonTreeWriter.value(java.lang.Boolean): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields(): void": [
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$Base.\u003cinit\u003e(int): void",
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$ClassWithContainersOfBaseFields.\u003cinit\u003e(java.util.Collection, java.util.Map): void",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.functional.MoreSpecificTypeSerializationTest$Sub.\u003cinit\u003e(int, int): void",
      "com.google.gson.JsonElement.getAsInt(): int",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.access$100(com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.functional.CustomTypeAdaptersTest$5.\u003cinit\u003e(com.google.gson.functional.CustomTypeAdaptersTest): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest.testMapDeserializationWithUnquotedLongKeys(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.MapSubject.containsKey(java.lang.Object): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.functional.MapTest$14.getType(): java.lang.reflect.Type",
      "java.lang.String.format(java.lang.String, java.lang.Object[]): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.MapTest$14.\u003cinit\u003e(com.google.gson.functional.MapTest): void",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "com.google.common.truth.MapSubject.hasSize(int): void",
      "java.util.Map.get(java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.JsonSerializer.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [],
    "com.google.gson.functional.ObjectTest$3.\u003cinit\u003e(com.google.gson.functional.ObjectTest): void": [
      "com.google.gson.common.TestTypes$ClassWithNoFields.\u003cinit\u003e(): void"
    ],
    "com.google.gson.MixedStreamTest$2.\u003cinit\u003e(com.google.gson.MixedStreamTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.Gson.fromJson(java.lang.String, com.google.gson.reflect.TypeToken): java.lang.Object": [
      "java.io.StringReader.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.Gson.fromJson(java.io.Reader, com.google.gson.reflect.TypeToken): java.lang.Object"
    ],
    "com.google.gson.Gson$FutureTypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.Gson$FutureTypeAdapter.delegate(): com.google.gson.TypeAdapter"
    ],
    "com.google.gson.functional.ExposeFieldsTest$SomeInterfaceInstanceCreator.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.Main.toJson(com.google.gson.Gson, java.lang.Object): java.lang.String": [
      "com.example.TestExecutor.same(java.lang.Object): java.lang.Object",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.UncategorizedTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.Parser.parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite): java.lang.Object"
    ],
    "com.google.gson.metrics.PerformanceTest.testByteArrayDeserialization(): void": [
      "java.io.PrintStream.printf(java.lang.String, java.lang.Object[]): java.io.PrintStream",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.StringBuilder.\u003cinit\u003e(int): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$PublicRecord.hashCode(): int": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.buildPartial(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$OuterMessage"
    ],
    "com.google.gson.JsonParserTest.lambda$testParseUnquotedMultiWordStringFails$1(): void": [
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement"
    ],
    "com.google.gson.ToNumberPolicyTest.lambda$testLongOrDouble$3(com.google.gson.ToNumberStrategy): void": [
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.writeTo(com.google.protobuf.CodedOutputStream): void": [
      "com.google.protobuf.CodedOutputStream.writeInt32(int, int): void",
      "com.google.protobuf.GeneratedMessageV3.writeString(com.google.protobuf.CodedOutputStream, int, java.lang.Object): void",
      "com.google.protobuf.UnknownFieldSet.writeTo(com.google.protobuf.CodedOutputStream): void",
      "com.google.protobuf.CodedOutputStream.writeInt64(int, long): void"
    ],
    "com.google.gson.functional.ParameterizedTypesTest$1.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlTypesSupport$1.deserialize(java.util.Date): java.sql.Date": [
      "java.sql.Date.\u003cinit\u003e(long): void",
      "java.util.Date.getTime(): long"
    ],
    "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest.testJsonDeserializer_CustomSerializerDelegate(): void": [
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Deserializer.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$Container.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest$2.\u003cinit\u003e(com.google.gson.functional.TypeAdapterRuntimeTypeWrapperTest): void"
    ],
    "com.google.gson.functional.UncategorizedTest$Derived2.\u003cinit\u003e(): void": [
      "com.google.gson.functional.UncategorizedTest$Base.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Truck.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.TypeAdapter.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.StreamingTypeAdaptersTest$Person.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomFieldAdapter.hashCode(): int": [],
    "com.google.gson.internal.reflect.Java17ReflectionHelperTest$PrincipalImpl.getName(): java.lang.String": [],
    "com.google.gson.graph.GraphAdapterBuilderTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.TypeAdapterTest.testToJson_ThrowingIOException(): void": [
      "com.google.gson.TypeAdapterTest$2.\u003cinit\u003e(com.google.gson.TypeAdapterTest, java.io.IOException): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.ThrowableSubject.isEqualTo(java.lang.Object): void",
      "java.io.IOException.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.ThrowableSubject.hasCauseThat(): com.google.common.truth.ThrowableSubject"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.metrics.PerformanceTest.testLargeGsonMapRoundTrip(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.gson.metrics.PerformanceTest$3.\u003cinit\u003e(com.google.gson.metrics.PerformanceTest): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.metrics.PerformanceTest$3.getType(): java.lang.reflect.Type",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.util.HashMap.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.CustomDeserializerTest$DataHolderWrapper.\u003cinit\u003e(): void": [
      "com.google.gson.functional.CustomDeserializerTest$DataHolderWrapper.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest$DataHolder): void",
      "com.google.gson.functional.CustomDeserializerTest$DataHolder.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.\u003cclinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeReader$1.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$35.\u003cclinit\u003e(): void": [
      "com.google.gson.stream.JsonToken.values(): com.google.gson.stream.JsonToken[]",
      "com.google.gson.stream.JsonToken.ordinal(): int"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationWorksForParameterizedType(): void": [
      "java.util.List.get(int): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Part.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$Gizmo2.\u003cinit\u003e(java.util.List): void"
    ],
    "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest$PrincipalTypeAdapter.read(com.google.gson.stream.JsonReader): java.security.Principal": [
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.internal.reflect.Java17ReflectionHelperTest$PrincipalImpl.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.functional.MapTest$3.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$1.\u003cinit\u003e(com.google.gson.functional.MapAsArrayTypeAdapterTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.removeAll(java.util.Collection): boolean": [
      "java.util.ArrayList.removeAll(java.util.Collection): boolean"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$ManagerAdapter.serialize(com.google.gson.functional.TypeHierarchyAdapterTest$Manager, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clear(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.clear(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap(): void": [
      "java.lang.String.replace(char, char): java.lang.String",
      "java.util.LinkedHashMap.\u003cinit\u003e(): void",
      "com.google.common.truth.MapSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.Truth.assertThat(java.util.Map): com.google.common.truth.MapSubject",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object"
    ],
    "com.google.gson.functional.CustomDeserializerTest$MyBase.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.interceptors.InterceptorTest$4.\u003cinit\u003e(com.google.gson.interceptors.InterceptorTest): void": [
      "com.google.gson.TypeAdapter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.LinkedTreeMap.remove(java.lang.Object): java.lang.Object": [
      "com.google.gson.internal.LinkedTreeMap.removeInternalByKey(java.lang.Object): com.google.gson.internal.LinkedTreeMap$Node"
    ],
    "com.google.gson.JsonElement.isJsonArray(): boolean": [],
    "com.google.gson.interceptors.InterceptorTest$UserGroup.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.lambda$testAdapterCreatedByInstanceCreator$2(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$CreatedByInstanceCreator$Serializer, java.lang.reflect.Type): java.lang.Object": [],
    "com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest.createGson(com.google.gson.ExclusionStrategy, boolean): com.google.gson.Gson",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.gson.functional.ExclusionStrategyFunctionalTest$MyExclusionStrategy.\u003cinit\u003e(java.lang.Class): void",
      "java.lang.Long.valueOf(long): java.lang.Long",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.common.truth.LongSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilderForType(): com.google.protobuf.MessageLite$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilderForType(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.DefaultTypeAdaptersTest$NumberAsStringAdapter.\u003cinit\u003e(java.lang.Class): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.BigDecimalSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.math.BigDecimal): com.google.common.truth.BigDecimalSubject",
      "java.math.BigDecimal.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.getCountryCode5F55Bytes(): com.google.protobuf.ByteString": [
      "com.google.protobuf.ByteString.copyFromUtf8(java.lang.String): com.google.protobuf.ByteString"
    ],
    "com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization(): void": [
      "java.util.Collection.add(java.lang.Object): boolean",
      "com.google.gson.functional.EnumTest$1.\u003cinit\u003e(com.google.gson.functional.EnumTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.functional.EnumTest$1.getType(): java.lang.reflect.Type",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonAdapterSerializerDeserializerTest$UserSerializer.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormatOrBuilder.getNameThatTestsCaseFormat(int): java.lang.String": [],
    "com.google.gson.internal.UnsafeAllocator$3.newInstance(java.lang.Class): java.lang.Object": [
      "java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]): java.lang.Object",
      "com.google.gson.internal.UnsafeAllocator.access$000(java.lang.Class): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage2FieldBuilder(): com.google.protobuf.SingleFieldBuilderV3": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getParentForChildren(): com.google.protobuf.GeneratedMessageV3$BuilderParent",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.isClean(): boolean",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage2(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage",
      "com.google.protobuf.SingleFieldBuilderV3.\u003cinit\u003e(com.google.protobuf.AbstractMessage, com.google.protobuf.AbstractMessage$BuilderParent, boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Number.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization(): void": [
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Long): com.google.common.truth.LongSubject",
      "com.google.common.truth.LongSubject.isNull(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$3LocalRecord.i(): int": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.newBuilder(com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.toBuilder(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$SimpleProto): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder"
    ],
    "com.google.gson.stream.JsonReaderPathTest$Factory.$values(): com.google.gson.stream.JsonReaderPathTest$Factory[]": [],
    "com.google.gson.stream.JsonReader.setLenient(boolean): void": [
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithCustomNames.hashCode(): int": [],
    "com.google.gson.functional.TypeVariableTest$Blue.\u003cinit\u003e(boolean): void": [
      "com.google.gson.functional.TypeVariableTest$Red.\u003cinit\u003e(java.lang.Object): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities(): void": [
      "com.google.gson.JsonElement.toString(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeWriter.value(double): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeWriter.value(float): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.get(): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeWriter.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.internal.bind.JsonTreeWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.\u003cclinit\u003e(): void": [
      "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory$DummyTypeAdapterFactory.\u003cinit\u003e(com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory$1): void"
    ],
    "com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization(): void": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.common.TestTypes$Sub.\u003cinit\u003e(): void",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement",
      "com.google.gson.JsonObject.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.JsonElement.getAsString(): java.lang.String",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.common.TestTypes$ClassWithBaseField.\u003cinit\u003e(com.google.gson.common.TestTypes$Base): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory$1.write(com.google.gson.stream.JsonWriter, java.lang.String): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithDelayedDelegatingFactory$Factory$1.delegate(): com.google.gson.TypeAdapter",
      "com.google.gson.TypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void"
    ],
    "com.google.gson.functional.JavaUtilTest.setUp(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.PerformanceTest.testLargeCollectionDeserialization(): void": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.StringBuilder.append(int): java.lang.StringBuilder",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.IterableSubject.hasSize(int): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder",
      "com.google.gson.metrics.PerformanceTest$1.\u003cinit\u003e(com.google.gson.metrics.PerformanceTest): void",
      "com.google.gson.metrics.PerformanceTest$1.getType(): java.lang.reflect.Type"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testAllowForSupertype(): void": [
      "com.google.gson.Gson.newBuilder(): com.google.gson.GsonBuilder",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.functional.ReflectionAccessFilterTest$5.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void",
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.ReflectionAccessFilterTest$ExtendingClassWithPrivateField.\u003cinit\u003e(): void",
      "com.google.gson.functional.ReflectionAccessFilterTest$4.\u003cinit\u003e(com.google.gson.functional.ReflectionAccessFilterTest): void"
    ],
    "com.google.gson.functional.Java17RecordTest$8LocalRecord.\u003cclinit\u003e(): void": [
      "java.lang.RuntimeException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void": [
      "com.google.gson.JsonArray.iterator(): java.util.Iterator",
      "com.google.gson.internal.bind.JsonTreeReader.peekStack(): java.lang.Object",
      "com.google.gson.internal.bind.JsonTreeReader.expect(com.google.gson.stream.JsonToken): void",
      "com.google.gson.internal.bind.JsonTreeReader.push(java.lang.Object): void"
    ],
    "com.google.gson.TypeAdapter$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapter.read(com.google.gson.stream.JsonReader): java.lang.Object",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.nextNull(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFieldsOrBuilder.getNumbersCount(): int": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.hasAnotherField(): boolean": [],
    "com.google.gson.internal.reflect.ReflectionHelper.fieldToString(java.lang.reflect.Field): java.lang.String": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.lang.reflect.Field.getName(): java.lang.String",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.Class.getName(): java.lang.String",
      "java.lang.reflect.Field.getDeclaringClass(): java.lang.Class"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest.testBlockInaccessibleJava(): void": [
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "org.junit.Assert.fail(java.lang.String): void",
      "java.io.File.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Class.getConstructor(java.lang.Class[]): java.lang.reflect.Constructor",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.Class.forName(java.lang.String): java.lang.Class",
      "com.google.gson.GsonBuilder.addReflectionAccessFilter(com.google.gson.ReflectionAccessFilter): com.google.gson.GsonBuilder",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "org.junit.Assume.assumeNotNull(java.lang.Object[]): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.lang.reflect.Constructor.newInstance(java.lang.Object[]): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.Java17RecordTest$13LocalRecord.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.sql.SqlDateTypeAdapter$1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.functional.CustomDeserializerTest$2.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.functional.EnumTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize1dArray(): void": [
      "com.google.gson.TypeAdapter.fromJson(java.lang.String): java.lang.Object",
      "com.google.gson.functional.StreamingTypeAdaptersTest$4.\u003cinit\u003e(com.google.gson.functional.StreamingTypeAdaptersTest): void",
      "com.google.common.truth.PrimitiveDoubleArraySubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter",
      "com.google.common.truth.Truth.assertThat(double[]): com.google.common.truth.PrimitiveDoubleArraySubject"
    ],
    "com.google.gson.reflect.TypeTokenTest.testParameterizedFactory(): void": [
      "com.google.gson.reflect.TypeToken.get(java.lang.Class): com.google.gson.reflect.TypeToken",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "java.lang.reflect.ParameterizedType.getRawType(): java.lang.reflect.Type",
      "com.google.gson.reflect.TypeTokenTest$9.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void",
      "com.google.common.truth.ObjectArraySubject.asList(): com.google.common.truth.IterableSubject",
      "com.google.gson.reflect.TypeTokenTest$5.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void",
      "com.google.gson.reflect.TypeTokenTest$6.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void",
      "com.google.gson.reflect.TypeTokenTest$11.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void",
      "com.google.gson.reflect.TypeTokenTest$7.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void",
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.common.truth.IterableSubject.containsExactly(java.lang.Object[]): com.google.common.truth.Ordered",
      "java.lang.reflect.ParameterizedType.getOwnerType(): java.lang.reflect.Type",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.reflect.TypeTokenTest$10.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void",
      "com.google.gson.reflect.TypeTokenTest$8.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object[]): com.google.common.truth.ObjectArraySubject",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.reflect.TypeToken.getType(): java.lang.reflect.Type",
      "com.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type[]): com.google.gson.reflect.TypeToken"
    ],
    "com.google.gson.metrics.PerformanceTest.testStringDeserialization(): void": [
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.String.length(): int",
      "java.lang.StringBuilder.\u003cinit\u003e(int): void",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.io.PrintStream.println(java.lang.String): void",
      "com.google.gson.metrics.PerformanceTest.parseLongJson(java.lang.String): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testSkipObjectName(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.nextInt(): int",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "com.google.gson.stream.JsonReader.skipValue(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$DataOrBuilder.hasHeight(): boolean": [],
    "com.google.gson.native_test.ReflectionTest$ClassWithFinalField.\u003cinit\u003e(): void": [
      "com.google.gson.native_test.ReflectionTest$ClassWithFinalField.nonConstant(): int",
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.addSimples(int, com.google.gson.protobuf.generated.Bag$SimpleProto$Builder): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "com.google.protobuf.RepeatedFieldBuilderV3.addMessage(int, com.google.protobuf.AbstractMessage): com.google.protobuf.RepeatedFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.build(): com.google.gson.protobuf.generated.Bag$SimpleProto",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.ensureSimplesIsMutable(): void",
      "java.util.List.add(int, java.lang.Object): void"
    ],
    "com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded(): void": [
      "com.google.gson.functional.FieldExclusionTest$Outer$Inner.\u003cinit\u003e(com.google.gson.functional.FieldExclusionTest$Outer, java.lang.String): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.FieldExclusionTest$Outer$Inner.toJson(): java.lang.String",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.Truth.assertThat(java.lang.Double): com.google.common.truth.DoubleSubject",
      "java.lang.Double.doubleValue(): double",
      "java.lang.Double.valueOf(double): java.lang.Double",
      "com.google.common.truth.DoubleSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonDeserializer(): void": [
      "com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest$WithJsonDeserializer.\u003cinit\u003e(java.util.List): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.Truth.assertThat(java.lang.Iterable): com.google.common.truth.IterableSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "com.google.common.truth.IterableSubject.isEqualTo(java.lang.Object): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization(): void": [
      "com.google.gson.functional.CustomDeserializerTest$1.\u003cinit\u003e(com.google.gson.functional.CustomDeserializerTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.GsonBuilder.excludeFieldsWithoutExposeAnnotation(): com.google.gson.GsonBuilder": [
      "com.google.gson.internal.Excluder.excludeFieldsWithoutExposeAnnotation(): com.google.gson.internal.Excluder"
    ],
    "com.google.gson.metrics.ParseBenchmark.getResourceFile(java.lang.String): java.io.File": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Class.getResource(java.lang.String): java.net.URL",
      "java.io.File.\u003cinit\u003e(java.net.URI): void",
      "java.net.URL.toURI(): java.net.URI",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "java.io.File.isFile(): boolean",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.\u003cinit\u003e(java.lang.String, byte, short, int, long, float, double, char, boolean): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.MapTest$33.\u003cinit\u003e(com.google.gson.functional.MapTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testNullSubtype(): void": [
      "org.junit.Assert.fail(): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.clearCount(): com.google.gson.protobuf.generated.Bag$SimpleProto$Builder": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.onChanged(): void"
    ],
    "com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.functional.ReflectionAccessFilterTest$9.createInstance(java.lang.reflect.Type): com.google.gson.functional.ReflectionAccessFilterTest$ClassWithoutNoArgsConstructor": [
      "com.google.gson.functional.ReflectionAccessFilterTest$ClassWithoutNoArgsConstructor.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Data$Builder.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$BuilderParent): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testBooleans(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.value(boolean): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getDescriptor(): com.google.protobuf.Descriptors$Descriptor": [],
    "com.google.gson.common.TestTypes$ClassOverridingEquals.getExpectedJson(): java.lang.String": [
      "com.google.gson.common.TestTypes$ClassOverridingEquals.getExpectedJson(): java.lang.String"
    ],
    "com.google.gson.internal.bind.TypeAdapters.newFactory(java.lang.Class, com.google.gson.TypeAdapter): com.google.gson.TypeAdapterFactory": [
      "com.google.gson.internal.bind.TypeAdapters$31.\u003cinit\u003e(java.lang.Class, com.google.gson.TypeAdapter): void"
    ],
    "com.google.gson.stream.JsonWriter.flush(): void": [
      "java.io.Writer.flush(): void",
      "java.lang.IllegalStateException.\u003cinit\u003e(java.lang.String): void"
    ],
    "com.google.gson.internal.bind.TypeAdapters$13.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "com.google.gson.internal.bind.TypeAdapters$13.write(com.google.gson.stream.JsonWriter, java.lang.Number): void"
    ],
    "com.google.gson.stream.JsonReaderTest.testReadEmptyObject(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.hasNext(): boolean",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.metrics.ParseBenchmark.main(java.lang.String[]): void": [
      "com.google.gson.metrics.NonUploadingCaliperRunner.run(java.lang.Class, java.lang.String[]): void"
    ],
    "com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings(): void": [
      "java.io.CharArrayReader.\u003cinit\u003e(char[]): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.io.CharArrayWriter.write(char[]): void",
      "java.io.CharArrayWriter.toCharArray(): char[]",
      "com.google.gson.Gson.fromJson(com.google.gson.JsonElement, java.lang.Class): java.lang.Object",
      "com.google.gson.JsonStreamParser.next(): com.google.gson.JsonElement",
      "com.google.gson.JsonStreamParser.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String",
      "java.lang.String.toCharArray(): char[]",
      "java.io.CharArrayWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.Java17RecordTest$PrivateRecord.toString(): java.lang.String": [],
    "com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type): boolean": [
      "java.lang.reflect.GenericArrayType.getGenericComponentType(): java.lang.reflect.Type",
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "java.lang.reflect.ParameterizedType.getRawType(): java.lang.reflect.Type",
      "com.google.gson.internal.$Gson$Types.equal(java.lang.Object, java.lang.Object): boolean",
      "java.lang.reflect.WildcardType.getUpperBounds(): java.lang.reflect.Type[]",
      "java.lang.reflect.TypeVariable.getName(): java.lang.String",
      "java.lang.reflect.WildcardType.getLowerBounds(): java.lang.reflect.Type[]",
      "java.lang.Object.equals(java.lang.Object): boolean",
      "java.lang.String.equals(java.lang.Object): boolean",
      "java.util.Arrays.equals(java.lang.Object[], java.lang.Object[]): boolean",
      "java.lang.reflect.TypeVariable.getGenericDeclaration(): java.lang.reflect.GenericDeclaration",
      "java.lang.reflect.ParameterizedType.getOwnerType(): java.lang.reflect.Type",
      "com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getDefaultInstanceForType(): com.google.protobuf.Message": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.getDefaultInstanceForType(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields"
    ],
    "com.example.TestExecutor.same(java.lang.Object): java.lang.Object": [
      "java.util.Optional.orElseThrow(java.util.function.Supplier): java.lang.Object",
      "java.util.Optional.of(java.lang.Object): java.util.Optional",
      "java.util.Optional.map(java.util.function.Function): java.util.Optional"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.JsonObjectTest.testPropertyWithQuotes(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void",
      "com.google.gson.Gson.toJson(com.google.gson.JsonElement): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilderForType(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder"
    ],
    "com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName(): void": [
      "org.junit.Assert.fail(java.lang.String): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void": [
      "com.google.protobuf.GeneratedMessageV3.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void"
    ],
    "com.google.gson.metrics.PerformanceTest.parseLongJson(java.lang.String): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void"
    ],
    "com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.GsonTest$13.createInstance(java.lang.reflect.Type): java.lang.Object": [
      "com.google.gson.GsonTest$13.createInstance(java.lang.reflect.Type): com.google.gson.GsonTest$CustomClass3"
    ],
    "com.google.gson.functional.EnumTest$Gender.valueOf(java.lang.String): com.google.gson.functional.EnumTest$Gender": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.functional.ParameterizedTypesTest$2.\u003cinit\u003e(com.google.gson.functional.ParameterizedTypesTest): void",
      "com.google.gson.functional.ParameterizedTypesTest$2.getType(): java.lang.reflect.Type",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.getExpectedJson(): java.lang.String",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeInstanceCreator.\u003cinit\u003e(java.lang.Object): void",
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedType.\u003cinit\u003e(java.lang.Object): void",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.serialize(com.google.gson.ParameterizedTypeFixtures$MyParameterizedType, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.toBuilder(): com.google.protobuf.Message$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.functional.ObjectTest.testNestedSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.common.TestTypes$Nested.\u003cinit\u003e(com.google.gson.common.TestTypes$BagOfPrimitives, com.google.gson.common.TestTypes$BagOfPrimitives): void",
      "com.google.gson.common.TestTypes$Nested.getExpectedJson(): java.lang.String",
      "com.google.gson.common.TestTypes$BagOfPrimitives.\u003cinit\u003e(long, int, boolean, java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.metrics.PerformanceTest$ClassWithField.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields(): void": [
      "com.google.gson.ExposeAnnotationExclusionStrategyTest.createFieldAttributes(java.lang.String): java.lang.reflect.Field",
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean): boolean",
      "com.google.common.truth.BooleanSubject.isFalse(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.internal.bind.TypeAdapters$12.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.internal.bind.TypeAdapters$12.read(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.internal.LinkedTreeMap.containsKey(java.lang.Object): boolean": [
      "com.google.gson.internal.LinkedTreeMap.findByObject(java.lang.Object): com.google.gson.internal.LinkedTreeMap$Node"
    ],
    "com.google.gson.GsonBuilderTest.lambda$testRegisterTypeAdapterForObjectAndJsonElements$0(com.google.gson.GsonBuilder, java.lang.reflect.Type): void": [
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testDuplicateSubtype(): void": [
      "org.junit.Assert.fail(): void",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.of(java.lang.Class): com.google.gson.typeadapters.RuntimeTypeAdapterFactory",
      "com.google.gson.typeadapters.RuntimeTypeAdapterFactory.registerSubtype(java.lang.Class, java.lang.String): com.google.gson.typeadapters.RuntimeTypeAdapterFactory"
    ],
    "com.google.gson.functional.ObjectTest.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.FieldNamingStrategy.translateName(java.lang.reflect.Field): java.lang.String": [],
    "com.google.gson.functional.ObjectTest$2.\u003cinit\u003e(com.google.gson.functional.ObjectTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.$Gson$Types$WildcardTypeImpl.\u003cinit\u003e(java.lang.reflect.Type[], java.lang.reflect.Type[]): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type): java.lang.reflect.Type",
      "java.util.Objects.requireNonNull(java.lang.Object): java.lang.Object",
      "com.google.gson.internal.$Gson$Types.checkNotPrimitive(java.lang.reflect.Type): void",
      "com.google.gson.internal.$Gson$Preconditions.checkArgument(boolean): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Type$1.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, int, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonObject.\u003cinit\u003e(): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer",
      "com.google.gson.JsonObject.add(java.lang.String, com.google.gson.JsonElement): void"
    ],
    "com.google.gson.reflect.TypeTokenTest$10.\u003cinit\u003e(com.google.gson.reflect.TypeTokenTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.stream.JsonWriterTest.testNonFiniteDoublesWhenLenient(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.setStrictness(com.google.gson.Strictness): void",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.value(double): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void",
      "java.io.StringWriter.toString(): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage.newBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$OuterMessage.toBuilder(): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.FieldAttributes.getAnnotations(): java.util.Collection": [
      "java.lang.reflect.Field.getAnnotations(): java.lang.annotation.Annotation[]",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List"
    ],
    "com.google.gson.functional.PrimitiveTest.lambda$testDeserializingBigIntegerAsLong$33(java.lang.String): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFieldsOrBuilder.hasName(): boolean": [],
    "com.google.gson.internal.LinkedTreeMap$KeySet.iterator(): java.util.Iterator": [
      "com.google.gson.internal.LinkedTreeMap$KeySet$1.\u003cinit\u003e(com.google.gson.internal.LinkedTreeMap$KeySet): void"
    ],
    "com.google.gson.TypeAdapterTest$1.read(com.google.gson.stream.JsonReader): java.lang.Object": [
      "com.google.gson.TypeAdapterTest$1.read(com.google.gson.stream.JsonReader): java.lang.String"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.Java17RecordTest$10LocalRecord.hashCode(): int": [],
    "com.google.gson.functional.PrimitiveTest.testLazilyParsedNumberSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithCustomNames.a(): java.lang.String": [],
    "com.example.Main.lambda$testNoJdkUnsafe$17(com.google.gson.Gson): java.lang.String": [
      "java.lang.Integer.toString(int): java.lang.String",
      "com.example.Main.fromJson(com.google.gson.Gson, java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.parseFrom(com.google.protobuf.ByteString): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields": [
      "com.google.protobuf.Parser.parseFrom(com.google.protobuf.ByteString): java.lang.Object"
    ],
    "com.google.gson.internal.bind.ObjectTypeAdapter$1.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.google.gson.internal.bind.ObjectTypeAdapter.\u003cinit\u003e(com.google.gson.Gson, com.google.gson.ToNumberStrategy, com.google.gson.internal.bind.ObjectTypeAdapter$1): void",
      "com.google.gson.reflect.TypeToken.getRawType(): java.lang.Class"
    ],
    "com.google.gson.internal.bind.Java17ReflectiveTypeAdapterFactoryTest$DummyClass.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.VersionExclusionStrategyTest$MockClassSince.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.bind.JsonElementReaderTest.testWrongType(): void": [
      "com.google.gson.internal.bind.JsonTreeReader.nextName(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.nextInt(): int",
      "com.google.gson.internal.bind.JsonTreeReader.beginArray(): void",
      "com.google.gson.internal.bind.JsonTreeReader.endObject(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextNull(): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.internal.bind.JsonTreeReader.nextBoolean(): boolean",
      "com.google.gson.internal.bind.JsonTreeReader.nextString(): java.lang.String",
      "com.google.gson.internal.bind.JsonTreeReader.beginObject(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.internal.bind.JsonTreeReader.nextLong(): long",
      "com.google.gson.internal.bind.JsonTreeReader.nextDouble(): double",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.internal.bind.JsonTreeReader.\u003cinit\u003e(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeReader.endArray(): void"
    ],
    "com.google.gson.internal.bind.JsonTreeWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter": [
      "java.lang.IllegalArgumentException.\u003cinit\u003e(java.lang.String): void",
      "java.lang.Number.doubleValue(): double",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "java.lang.StringBuilder.\u003cinit\u003e(): void",
      "com.google.gson.internal.bind.JsonTreeWriter.nullValue(): com.google.gson.stream.JsonWriter",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.StringBuilder.append(java.lang.Object): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "com.google.gson.internal.bind.JsonTreeWriter.put(com.google.gson.JsonElement): void",
      "com.google.gson.internal.bind.JsonTreeWriter.isLenient(): boolean",
      "java.lang.Double.isInfinite(double): boolean",
      "java.lang.Double.isNaN(double): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$800(): com.google.protobuf.Internal$LongList": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.emptyLongList(): com.google.protobuf.Internal$LongList"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest$2.\u003cinit\u003e(com.google.gson.functional.DefaultTypeAdaptersTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api.valueOf(java.lang.String): com.google.gson.metrics.ParseBenchmark$Api": [
      "java.lang.Enum.valueOf(java.lang.Class, java.lang.String): java.lang.Enum"
    ],
    "com.google.gson.internal.bind.JsonTreeWriterTest.testNameAsTopLevelValue(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.gson.internal.bind.JsonTreeWriter.close(): void",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.bind.JsonTreeWriter.value(long): com.google.gson.stream.JsonWriter",
      "com.google.gson.internal.bind.JsonTreeWriter.\u003cinit\u003e(): void"
    ],
    "com.google.gson.GsonTest$1DummyAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Object): void": [
      "java.lang.AssertionError.\u003cinit\u003e(java.lang.Object): void"
    ],
    "com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.JsonPrimitive.hashCode(): int",
      "java.math.BigInteger.\u003cinit\u003e(java.lang.String): void",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Byte.valueOf(byte): java.lang.Byte",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.internal.ConstructorConstructor$19.\u003cinit\u003e(com.google.gson.internal.ConstructorConstructor, java.lang.Class): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.newBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.toBuilder(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.access$1900(com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations): com.google.protobuf.UnknownFieldSet": [],
    "com.google.gson.ToNumberPolicyTest.testLazilyParsedNumber(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.ToNumberPolicyTest.fromString(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.internal.LazilyParsedNumber.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.ToNumberStrategy.readNumber(com.google.gson.stream.JsonReader): java.lang.Number"
    ],
    "com.google.gson.native_test.Java17RecordReflectionTest$RecordWithCustomClassAdapter.\u003cinit\u003e(int): void": [
      "java.lang.Record.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.ProtoTypeAdapter$Builder.\u003cinit\u003e(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization, com.google.common.base.CaseFormat, com.google.common.base.CaseFormat): void": [
      "java.lang.Object.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.setEnumSerialization(com.google.gson.protobuf.ProtoTypeAdapter$EnumSerialization): com.google.gson.protobuf.ProtoTypeAdapter$Builder",
      "java.util.HashSet.\u003cinit\u003e(): void",
      "com.google.gson.protobuf.ProtoTypeAdapter$Builder.setFieldNameSerializationFormat(com.google.common.base.CaseFormat, com.google.common.base.CaseFormat): com.google.gson.protobuf.ProtoTypeAdapter$Builder"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$4.\u003cinit\u003e(com.google.gson.functional.JsonAdapterAnnotationOnClassesTest): void": [
      "com.google.gson.reflect.TypeToken.\u003cinit\u003e(): void"
    ],
    "com.google.gson.internal.NonNullElementWrapperList.hashCode(): int": [
      "java.util.ArrayList.hashCode(): int"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clearNumbers(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.onChanged(): void",
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields.access$1000(): com.google.protobuf.Internal$LongList"
    ],
    "com.google.gson.stream.JsonWriterTest.testBadNestingObject(): void": [
      "com.google.gson.stream.JsonWriter.beginArray(): com.google.gson.stream.JsonWriter",
      "com.google.gson.stream.JsonWriter.beginObject(): com.google.gson.stream.JsonWriter",
      "java.io.StringWriter.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Throwable): com.google.common.truth.ThrowableSubject",
      "com.google.common.truth.ThrowableSubject.hasMessageThat(): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonWriter.endArray(): com.google.gson.stream.JsonWriter",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.gson.stream.JsonWriter.\u003cinit\u003e(java.io.Writer): void"
    ],
    "com.google.gson.functional.MapAsArrayTypeAdapterTest$Point.\u003cinit\u003e(int, int): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory$NullReturningFactory$1.write(com.google.gson.stream.JsonWriter, com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithNullReturningFactory): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.String): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.metrics.ParseBenchmark$Api.\u003cinit\u003e(java.lang.String, int, com.google.gson.metrics.ParseBenchmark$1): void": [
      "com.google.gson.metrics.ParseBenchmark$Api.\u003cinit\u003e(java.lang.String, int): void"
    ],
    "com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt(): void": [
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable"
    ],
    "com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable): java.lang.Throwable",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations.isInitialized(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$SimpleProto.access$000(): boolean": [],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.protobuf.Message): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.mergeFrom(com.google.protobuf.Message): com.google.protobuf.AbstractMessage$Builder",
      "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.mergeFrom(com.google.gson.protobuf.generated.Bag$OuterMessage): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testReadAcrossBuffers(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "java.lang.StringBuilder.toString(): java.lang.String",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "java.lang.StringBuilder.\u003cinit\u003e(java.lang.String): void",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder",
      "java.lang.StringBuilder.append(char): java.lang.StringBuilder"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.functional.NullObjectAndFieldTest$2.\u003cinit\u003e(com.google.gson.functional.NullObjectAndFieldTest): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.GsonBuilder.\u003cinit\u003e(): void",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object): com.google.gson.GsonBuilder"
    ],
    "com.google.gson.internal.$Gson$Types.getMapKeyAndValueTypes(java.lang.reflect.Type, java.lang.Class): java.lang.reflect.Type[]": [
      "java.lang.reflect.ParameterizedType.getActualTypeArguments(): java.lang.reflect.Type[]",
      "com.google.gson.internal.$Gson$Types.getSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class): java.lang.reflect.Type"
    ],
    "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): java.lang.Object": [
      "com.google.gson.ParameterizedTypeFixtures$MyParameterizedTypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.ParameterizedTypeFixtures$MyParameterizedType"
    ],
    "com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "java.util.ArrayList.\u003cinit\u003e(): void",
      "java.util.List.add(java.lang.Object): boolean",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.JsonParserTest.testParseInvalidJson(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.buildPartial(): com.google.gson.protobuf.generated.Bag$SimpleProto": [
      "com.google.gson.protobuf.generated.Bag$SimpleProto.\u003cinit\u003e(com.google.protobuf.GeneratedMessageV3$Builder): void",
      "com.google.gson.protobuf.generated.Bag$SimpleProto$Builder.onBuilt(): void"
    ],
    "com.google.gson.internal.JavaVersion.determineMajorJavaVersion(): int": [
      "java.lang.System.getProperty(java.lang.String): java.lang.String",
      "com.google.gson.internal.JavaVersion.getMajorJavaVersion(java.lang.String): int"
    ],
    "com.google.gson.functional.Java17RecordTest$RecordWithPrimitives.aByte(): byte": [],
    "com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "java.lang.Double.doubleValue(): double",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.lang.Double.isNaN(double): boolean"
    ],
    "com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization(): void": [
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "org.junit.Assert.fail(java.lang.String): void"
    ],
    "com.google.gson.native_test.ReflectionTest.testClassWithoutDefaultConstructor(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object",
      "com.google.common.truth.IntegerSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Integer): com.google.common.truth.IntegerSubject",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithDifferentCaseFormat$Builder"
    ],
    "com.google.gson.stream.JsonReaderPathTest.objectOfObjects(): void": [
      "com.google.gson.stream.JsonReader.getPath(): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReader.endObject(): void",
      "com.google.gson.stream.JsonReader.beginObject(): void",
      "com.google.gson.stream.JsonReaderPathTest$Factory.create(java.lang.String): com.google.gson.stream.JsonReader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.getPreviousPath(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextName(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextInt(): int"
    ],
    "com.google.gson.OverrideCoreTypeAdaptersTest$1.write(com.google.gson.stream.JsonWriter, java.lang.Boolean): void": [
      "com.google.gson.stream.JsonWriter.value(long): com.google.gson.stream.JsonWriter",
      "java.lang.Boolean.booleanValue(): boolean"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessageOrBuilder.getMonth(): int": [],
    "com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter(): void": [
      "com.google.gson.Gson.\u003cinit\u003e(): void",
      "java.util.Arrays.asList(java.lang.Object[]): java.util.List",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type): java.lang.String",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.functional.TypeVariableTest$1.getType(): java.lang.reflect.Type",
      "com.google.gson.functional.TypeVariableTest$1.\u003cinit\u003e(com.google.gson.functional.TypeVariableTest): void",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type): java.lang.Object",
      "com.google.common.truth.Subject.isEqualTo(java.lang.Object): void",
      "com.google.gson.functional.TypeVariableTest$Foo.\u003cinit\u003e(java.lang.Object, java.lang.Object, java.lang.Boolean): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean",
      "java.util.Map.put(java.lang.Object, java.lang.Object): java.lang.Object",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$WithDelegatingFactoryOnClassAndField.\u003cinit\u003e(java.lang.String): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.example.Main.lambda$testConstructorNoArgs$8(com.google.gson.Gson): java.lang.String": [
      "com.example.ClassWithNoArgsConstructor.\u003cinit\u003e(): void",
      "com.example.Main.toJson(com.google.gson.Gson, java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers(): void": [
      "com.google.gson.functional.NullObjectAndFieldTest$ClassWithMembers.\u003cinit\u003e(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.GsonBuilder.create(): com.google.gson.Gson",
      "com.google.common.truth.StringSubject.contains(java.lang.CharSequence): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.protobuf.generated.Bag$OuterMessage$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$OuterMessage$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ],
    "com.google.gson.metrics.ParseBenchmark$Document.access$800(com.google.gson.metrics.ParseBenchmark$Document): com.fasterxml.jackson.core.type.TypeReference": [],
    "com.google.gson.internal.bind.NumberTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Number): void": [
      "com.google.gson.stream.JsonWriter.value(java.lang.Number): com.google.gson.stream.JsonWriter"
    ],
    "com.google.gson.internal.ConstructorConstructor$5.\u003cinit\u003e(java.lang.reflect.Type): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.protobuf.AbstractMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder.clone(): com.google.gson.protobuf.generated.Bag$ProtoWithRepeatedFields$Builder"
    ],
    "com.google.gson.stream.JsonReaderTest.testPeekingUnquotedStringsPrefixedWithBooleans(): void": [
      "com.google.common.truth.ComparableSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.stream.JsonReader.beginArray(): void",
      "com.google.gson.stream.JsonReader.peek(): com.google.gson.stream.JsonToken",
      "com.google.gson.stream.JsonReaderTest.reader(java.lang.String): java.io.Reader",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "org.junit.Assert.fail(): void",
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.gson.stream.JsonReaderTest.assertUnexpectedStructureError(java.lang.IllegalStateException, java.lang.String, java.lang.String, java.lang.String): void",
      "com.google.gson.stream.JsonReader.setStrictness(com.google.gson.Strictness): void",
      "com.google.gson.stream.JsonReader.nextString(): java.lang.String",
      "com.google.gson.stream.JsonReader.nextBoolean(): boolean",
      "com.google.gson.stream.JsonReader.\u003cinit\u003e(java.io.Reader): void",
      "com.google.common.truth.Truth.assertThat(java.lang.Comparable): com.google.common.truth.ComparableSubject",
      "com.google.gson.stream.JsonReader.endArray(): void"
    ],
    "com.google.gson.functional.TypeHierarchyAdapterTest$EmployeeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext): com.google.gson.functional.TypeHierarchyAdapterTest$Employee": [
      "com.google.gson.JsonObject.get(java.lang.String): com.google.gson.JsonElement",
      "com.google.gson.JsonElement.getAsJsonObject(): com.google.gson.JsonObject",
      "com.google.gson.JsonDeserializationContext.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type): java.lang.Object",
      "java.lang.Long.longValue(): long",
      "com.google.gson.functional.TypeHierarchyAdapterTest$Employee.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeHierarchyAdapterTest$Manager.\u003cinit\u003e(): void",
      "com.google.gson.functional.TypeHierarchyAdapterTest$CEO.\u003cinit\u003e(): void"
    ],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage1Builder(): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$InnerMessage$Builder": [
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.getInnerMessage1FieldBuilder(): com.google.protobuf.SingleFieldBuilderV3",
      "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.onChanged(): void",
      "com.google.protobuf.SingleFieldBuilderV3.getBuilder(): com.google.protobuf.AbstractMessage$Builder"
    ],
    "com.google.gson.functional.Java17RecordTest$3LocalRecord.toString(): java.lang.String": [],
    "com.example.ClassWithJsonAdapterAnnotation$Factory.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken): com.google.gson.TypeAdapter": [
      "com.example.ClassWithJsonAdapterAnnotation$Factory$1.\u003cinit\u003e(com.example.ClassWithJsonAdapterAnnotation$Factory): void"
    ],
    "com.google.gson.GsonBuilderTest$HasModifiers.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.ObjectTest$ClassWithStaticField.\u003cinit\u003e(): void": [
      "java.lang.Object.\u003cinit\u003e(): void"
    ],
    "com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization(): void": [
      "com.google.common.truth.Subject.isNull(): void",
      "com.google.gson.functional.VersioningTest.gsonWithVersion(double): com.google.gson.Gson",
      "com.google.common.truth.Truth.assertThat(java.lang.Object): com.google.common.truth.Subject",
      "com.google.gson.Gson.fromJson(java.lang.String, java.lang.Class): java.lang.Object"
    ],
    "com.google.gson.Gson.toJsonTree(java.lang.Object): com.google.gson.JsonElement": [
      "com.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type): com.google.gson.JsonElement",
      "java.lang.Object.getClass(): java.lang.Class"
    ],
    "com.google.gson.functional.StringTest.testAssignmentCharSerialization(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.String): com.google.common.truth.StringSubject",
      "com.google.common.truth.StringSubject.isEqualTo(java.lang.Object): void",
      "com.google.gson.Gson.toJson(java.lang.Object): java.lang.String"
    ],
    "com.google.gson.functional.CustomTypeAdaptersTest$3.serialize(com.google.gson.common.TestTypes$BagOfPrimitives, java.lang.reflect.Type, com.google.gson.JsonSerializationContext): com.google.gson.JsonElement": [
      "com.google.gson.JsonPrimitive.\u003cinit\u003e(java.lang.Number): void",
      "java.lang.Integer.valueOf(int): java.lang.Integer"
    ],
    "com.google.gson.JsonParserTest.testParseEmptyWhitespaceInput(): void": [
      "com.google.common.truth.Truth.assertThat(java.lang.Boolean): com.google.common.truth.BooleanSubject",
      "com.google.gson.JsonElement.isJsonNull(): boolean",
      "com.google.gson.JsonParser.parseString(java.lang.String): com.google.gson.JsonElement",
      "com.google.common.truth.BooleanSubject.isTrue(): void",
      "java.lang.Boolean.valueOf(boolean): java.lang.Boolean"
    ],
    "com.google.gson.functional.Java17RecordTest$11LocalRecord.c(): double": [],
    "com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.gson.protobuf.generated.Bag$ProtoWithAnnotations$Builder": [
      "com.google.protobuf.GeneratedMessageV3$Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor, java.lang.Object): com.google.protobuf.GeneratedMessageV3$Builder"
    ]
  }
}